<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TheSadRogue.Primitives</name>
    </assembly>
    <members>
        <member name="T:SadRogue.Primitives.AdjacencyRule">
            <summary>
            Structure representing a method for determining which coordinates are adjacent to a given
            coordinate, and which directions those neighbors are in. Cannot be instantiated -- pre-made
            static instances are provided.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.AdjacencyRule.Cardinals">
            <summary>
            Represents method of determining adjacency where neighbors are considered adjacent if
            they are in a cardinal direction, eg. 4-way (manhattan-based) connectivity.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.AdjacencyRule.Diagonals">
            <summary>
            Represents method of determining adjacency where neighbors are considered adjacent only
            if they are in a diagonal direction.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.AdjacencyRule.EightWay">
            <summary>
            Represents method of determining adjacency where all 8 possible neighbors are considered
            adjacent (eg. 8-way connectivity).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.AdjacencyRule.DirectionsOfNeighborsCache">
            <summary>
            Array that caches the output of DirectionsOfNeighbors() for this instance.  Can be useful since iterating
            over an array by index is often faster than using a foreach/IEnumerable.
            </summary>
            <remarks>
            The indices in this value are not intended to be modified; doing so may result in bad behavior!
            </remarks>
        </member>
        <member name="F:SadRogue.Primitives.AdjacencyRule.DirectionsOfNeighborsClockwiseCache">
            <summary>
            Array that caches the output of DirectionsOfNeighborsClockwise() for this instance.  Can be useful since iterating
            over an array by index is often faster than using a foreach/IEnumerable.
            </summary>
            <remarks>
            The indices in this value are not intended to be modified; doing so may result in bad behavior!
            </remarks>
        </member>
        <member name="F:SadRogue.Primitives.AdjacencyRule.DirectionsOfNeighborsCounterClockwiseCache">
            <summary>
            Array that caches the output of DirectionsOfNeighborsCounterClockwise() for this instance.  Can be useful since iterating
            over an array by index is often faster than using a foreach/IEnumerable.
            </summary>
            <remarks>
            The indices in this value are not intended to be modified; doing so may result in bad behavior!
            </remarks>
        </member>
        <member name="T:SadRogue.Primitives.AdjacencyRule.Types">
            <summary>
            Enum representing <see cref="T:SadRogue.Primitives.AdjacencyRule"/> types. Each AdjacencyRule instance has a <see cref="F:SadRogue.Primitives.AdjacencyRule.Type"/> field
            which contains the corresponding value from this enum.  Useful for easy mapping of AdjacencyRule
            types to a primitive type (for cases like a switch statement).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.AdjacencyRule.Types.Cardinals">
            <summary>
            Type for <see cref="F:SadRogue.Primitives.AdjacencyRule.Cardinals"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.AdjacencyRule.Types.Diagonals">
            <summary>
            Type for <see cref="F:SadRogue.Primitives.AdjacencyRule.Diagonals"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.AdjacencyRule.Types.EightWay">
            <summary>
            Type for <see cref="F:SadRogue.Primitives.AdjacencyRule.EightWay"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.AdjacencyRule.Type">
            <summary>
            Enum value representing the method of determining adjacency -- useful for using
            <see cref="T:SadRogue.Primitives.AdjacencyRule"/> types in switch statements.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.AdjacencyRule.DirectionsOfNeighbors">
            <summary>
            Gets directions leading to neighboring locations, according to the current adjacency
            method. Cardinals are returned before any diagonals.
            </summary>
            <returns>Directions that lead to neighboring locations.</returns>
        </member>
        <member name="M:SadRogue.Primitives.AdjacencyRule.DirectionsOfNeighborsClockwise(SadRogue.Primitives.Direction)">
            <summary>
            Gets directions leading to neighboring locations, according to the current adjacency
            method. Appropriate directions are returned in clockwise order from the given starting
            direction.
            </summary>
            <param name="startingDirection">The direction to start with.  <see cref="F:SadRogue.Primitives.Direction.None"/>
            causes the default starting direction to be used, which is UP for CARDINALS/EIGHT_WAY, and UP_RIGHT
            for diagonals.</param>
            <returns>Directions that lead to neighboring locations.</returns>
        </member>
        <member name="M:SadRogue.Primitives.AdjacencyRule.DirectionsOfNeighborsCounterClockwise(SadRogue.Primitives.Direction)">
            <summary>
            Gets directions leading to neighboring locations, according to the current adjacency
            method. Appropriate directions are returned in counter-clockwise order from the given
            starting direction.
            </summary>
            <param name="startingDirection">The direction to start with.  null or <see cref="F:SadRogue.Primitives.Direction.None"/>
            causes the default starting direction to be used, which is UP for CARDINALS/EIGHT_WAY, and UP_LEFT
            for diagonals.</param>
            <returns>Directions that lead to neighboring locations.</returns>
        </member>
        <member name="M:SadRogue.Primitives.AdjacencyRule.Matches(SadRogue.Primitives.AdjacencyRule)">
            <summary>
            True if the given AdjacencyRule has the same Type the current one.
            </summary>
            <param name="other">AdjacencyRule to compare.</param>
            <returns>True if the two directions are the same, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.AdjacencyRule.Neighbors(SadRogue.Primitives.Point)">
            <summary>
            Gets all neighbors of the specified location, based on the current adjacency method.
            Cardinals are returned before any diagonals.
            </summary>
            <param name="startingLocation">Location to return neighbors for.</param>
            <returns>All neighbors of the given location.</returns>
        </member>
        <member name="M:SadRogue.Primitives.AdjacencyRule.Neighbors(System.Int32,System.Int32)">
            <summary>
            Gets all neighbors of the specified location, based on the current adjacency method.
            Cardinals are returned before any diagonals.
            </summary>
            <param name="startingLocationX">X-value of the location to return neighbors for.</param>
            <param name="startingLocationY">Y-value of the location to return neighbors for.</param>
            <returns>All neighbors of the given location.</returns>
        </member>
        <member name="M:SadRogue.Primitives.AdjacencyRule.NeighborsClockwise(SadRogue.Primitives.Point,SadRogue.Primitives.Direction)">
            <summary>
            Gets all neighbors of the specified location, based on the current adjacency method.
            Neighbors are returned in clockwise order, starting with the neighbor in the given
            starting direction.
            </summary>
            <param name="startingLocation">Location to return neighbors for.</param>
            <param name="startingDirection">
            The neighbor in this direction will be returned first, proceeding clockwise.
            If <see cref="F:SadRogue.Primitives.Direction.None"/> is specified, the default starting direction
            is used, which is <see cref="F:SadRogue.Primitives.Direction.Up"/> for CARDINALS/EIGHT_WAY, and <see cref="F:SadRogue.Primitives.Direction.UpRight"/>
            for DIAGONALS.
            </param>
            <returns>All neighbors of the given location.</returns>
        </member>
        <member name="M:SadRogue.Primitives.AdjacencyRule.NeighborsClockwise(System.Int32,System.Int32,SadRogue.Primitives.Direction)">
            <summary>
            Gets all neighbors of the specified location, based on the current adjacency method.
            Neighbors are returned in clockwise order, starting with the neighbor in the given
            starting direction.
            </summary>
            <param name="startingLocationX">X-value of the location to return neighbors for.</param>
            <param name="startingLocationY">Y-value of the location to return neighbors for.</param>
            <param name="startingDirection">
            The neighbor in this direction will be returned first, proceeding clockwise.
            If <see cref="F:SadRogue.Primitives.Direction.None"/> is specified, the default starting direction
            is used, which is <see cref="F:SadRogue.Primitives.Direction.Up"/> for CARDINALS/EIGHT_WAY, and <see cref="F:SadRogue.Primitives.Direction.UpRight"/>
            for DIAGONALS.
            </param>
            <returns>All neighbors of the given location.</returns>
        </member>
        <member name="M:SadRogue.Primitives.AdjacencyRule.NeighborsCounterClockwise(SadRogue.Primitives.Point,SadRogue.Primitives.Direction)">
            <summary>
            Gets all neighbors of the specified location, based on the current adjacency method.
            Neighbors are returned in counter-clockwise order, starting with the neighbor in the given
            starting direction.
            </summary>
            <param name="startingLocation">Location to return neighbors for.</param>
            <param name="startingDirection">
            The neighbor in this direction will be returned first, proceeding counter-clockwise.
            If <see cref="F:SadRogue.Primitives.Direction.None"/> is specified, the default starting direction
            is used, which is <see cref="F:SadRogue.Primitives.Direction.Up"/> for CARDINALS/EIGHT_WAY, and
            <see cref="F:SadRogue.Primitives.Direction.UpLeft"/> for DIAGONALS.
            </param>
            <returns>All neighbors of the given location.</returns>
        </member>
        <member name="M:SadRogue.Primitives.AdjacencyRule.NeighborsCounterClockwise(System.Int32,System.Int32,SadRogue.Primitives.Direction)">
            <summary>
            Gets all neighbors of the specified location, based on the current adjacency method.
            Neighbors are returned in counter-clockwise order, starting with the neighbor in the given
            starting direction.
            </summary>
            <param name="startingLocationX">X-value of the location to return neighbors for.</param>
            <param name="startingLocationY">Y-value of the location to return neighbors for.</param>
            <param name="startingDirection">
            The neighbor in this direction will be returned first, proceeding counter-clockwise.
            If <see cref="F:SadRogue.Primitives.Direction.None"/> is specified, the default starting direction
            is used, which is <see cref="F:SadRogue.Primitives.Direction.Up"/> for CARDINALS/EIGHT_WAY, and
            <see cref="F:SadRogue.Primitives.Direction.UpLeft"/> for DIAGONALS.
            </param>
            <returns>All neighbors of the given location.</returns>
        </member>
        <member name="M:SadRogue.Primitives.AdjacencyRule.Equals(SadRogue.Primitives.AdjacencyRule)">
            <summary>
            True if the given AdjacencyRule has the same Type the current one.
            </summary>
            <param name="other">AdjacencyRule to compare.</param>
            <returns>True if the two directions are the same, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.AdjacencyRule.Equals(System.Object)">
            <summary>
            Same as operator == in this case; returns false if <paramref name="obj"/> is not an AdjacencyRule.
            </summary>
            <param name="obj">The object to compare the current AdjacencyRule to.</param>
            <returns>
            True if <paramref name="obj"/> is an AdjacencyRule, and the two adjacency rules are equal, false otherwise.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.AdjacencyRule.GetHashCode">
            <summary>
            Returns a hash-map value for the current object.
            </summary>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.AdjacencyRule.op_Equality(SadRogue.Primitives.AdjacencyRule,SadRogue.Primitives.AdjacencyRule)">
            <summary>
            True if the two adjacency rules have the same Type.
            </summary>
            <param name="lhs"/>
            <param name="rhs"/>
            <returns>True if the two adjacency rules are equal, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.AdjacencyRule.op_Inequality(SadRogue.Primitives.AdjacencyRule,SadRogue.Primitives.AdjacencyRule)">
            <summary>
            True if the types are not equal.
            </summary>
            <param name="lhs"/>
            <param name="rhs"/>
            <returns>
            True if the types are not equal, false if they are both equal.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.AdjacencyRule.op_Implicit(SadRogue.Primitives.AdjacencyRule)~SadRogue.Primitives.AdjacencyRule.Types">
            <summary>
            Implicitly converts an AdjacencyRule to its corresponding <see cref="F:SadRogue.Primitives.AdjacencyRule.Type"/>.
            </summary>
            <param name="rule"/>
        </member>
        <member name="M:SadRogue.Primitives.AdjacencyRule.op_Implicit(SadRogue.Primitives.AdjacencyRule.Types)~SadRogue.Primitives.AdjacencyRule">
            <summary>
            Implicitly converts an <see cref="T:SadRogue.Primitives.AdjacencyRule.Types"/> enum value to its corresponding AdjacencyRule.
            </summary>
            <param name="type"/>
        </member>
        <member name="M:SadRogue.Primitives.AdjacencyRule.ToString">
            <summary>
            Returns a string representation of the <see cref="T:SadRogue.Primitives.AdjacencyRule"/>.
            </summary>
            <returns>A string representation of the <see cref="T:SadRogue.Primitives.AdjacencyRule"/>.</returns>
        </member>
        <member name="T:SadRogue.Primitives.Area">
            <summary>
            Represents an arbitrarily-shaped 2D area. Stores and provides access to a list of each
            unique position in the area.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Area.PointHasher">
            <summary>
            Hashing algorithm being used to store points added to this area.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.Area.#ctor(System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point})">
            <summary>
            Constructor.
            </summary>
            <param name="pointHasher">
            A custom equality comparer/hashing algorithm to use when storing points.  If not specified, it defaults
            to using the Equals and GetHashCode functions of the Point struct.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.Area.#ctor(System.Collections.Generic.IEnumerable{SadRogue.Primitives.Point},System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point})">
            <summary>
            Constructor that takes initial points to add to the area.
            </summary>
            <param name="initialPoints">Initial points to add to the area.</param>
            <param name="pointHasher">
            A custom equality comparer/hashing algorithm to use when storing points.  If not specified, it defaults
            to using the Equals and GetHashCode functions of the Point struct.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.Area.#ctor(System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point},SadRogue.Primitives.Point[])">
            <summary>
            Constructor that takes initial points to add to the area.
            </summary>
            <param name="initialPoints">Initial points to add to the area.</param>
            <param name="pointHasher">
            A custom equality comparer/hashing algorithm to use when storing points.  If not specified, it defaults
            to using the Equals and GetHashCode functions of the Point struct.
            </param>
        </member>
        <member name="P:SadRogue.Primitives.Area.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.Area.Bounds">
            <summary>
            Smallest possible rectangle that encompasses every position in the area.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Area.Count">
            <summary>
            Number of (unique) positions in the area.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Area.UseIndexEnumeration">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.Area.GetDifference(SadRogue.Primitives.IReadOnlyArea,SadRogue.Primitives.IReadOnlyArea,System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point})">
            <summary>
            Gets an area containing all positions in <paramref name="area1"/>, minus those that are in
            <paramref name="area2"/>.
            </summary>
            <param name="area1"/>
            <param name="area2"/>
            <param name="pointHasher">
            A custom equality comparer/hashing algorithm to use when storing points in the new Area.  If not specified, it defaults
            to using the Equals and GetHashCode functions of the Point struct.
            </param>
            <returns>A area with exactly those positions in <paramref name="area1"/> that are NOT in
            <paramref name="area2"/>.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Area.GetIntersection(SadRogue.Primitives.IReadOnlyArea,SadRogue.Primitives.IReadOnlyArea,System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point})">
            <summary>
            Gets an area containing exactly those positions contained in both of the given areas.
            </summary>
            <param name="area1"/>
            <param name="area2"/>
            <param name="pointHasher">
            A custom equality comparer/hashing algorithm to use when storing points in the new Area.  If not specified, it defaults
            to using the Equals and GetHashCode functions of the Point struct.
            </param>
            <returns>An area containing exactly those positions contained in both of the given areas.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Area.GetUnion(SadRogue.Primitives.IReadOnlyArea,SadRogue.Primitives.IReadOnlyArea,System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point})">
            <summary>
            Gets an area containing every position in one or both given areas.
            </summary>
            <param name="area1"/>
            <param name="area2"/>
            <param name="pointHasher">
            A custom equality comparer/hashing algorithm to use when storing points in the new Area.  If not specified, it defaults
            to using the Equals and GetHashCode functions of the Point struct.
            </param>
            <returns>An area containing only those positions in one or both of the given areas.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Area.op_Addition(SadRogue.Primitives.Area,SadRogue.Primitives.Point)">
            <summary>
            Creates an area with the positions all shifted by the given vector.
            </summary>
            <param name="lhs"/>
            <param name="rhs">Vector to add to each position in <paramref name="lhs"/>.</param>
            <returns>
            An area with the positions all translated by the given amount in x and y directions.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Area.Matches(SadRogue.Primitives.IReadOnlyArea)">
            <summary>
            Compares for equality. Returns true if the two areas contain exactly the same points.
            </summary>
            <param name="other"/>
            <returns>True if the areas contain exactly the same points, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Area.Add(SadRogue.Primitives.Point)">
            <summary>
            Adds the given position to the list of points within the area if it is not already in the
            list, or does nothing otherwise.
            </summary>
            <remarks>
            Because the class uses a hash set internally to determine what points have already been added,
            this is an average case O(1) operation.
            </remarks>
            <param name="position">The position to add.</param>
        </member>
        <member name="M:SadRogue.Primitives.Area.Add(System.Int32,System.Int32)">
            <summary>
            Adds the given position to the list of points within the area if it is not already in the
            list, or does nothing otherwise.
            </summary>
            <remarks>
            Because the class uses a hash set internally to determine what points have already been added,
            this is an average case O(1) operation.
            </remarks>
            <param name="positionX">X-value of the position to add.</param>
            <param name="positionY">Y-value of the position to add.</param>
        </member>
        <member name="M:SadRogue.Primitives.Area.Add(System.Collections.Generic.IEnumerable{SadRogue.Primitives.Point})">
            <summary>
            Adds the given positions to the list of points within the area if they are not already in
            the list.
            </summary>
            <param name="positions">Positions to add to the list.</param>
        </member>
        <member name="M:SadRogue.Primitives.Area.Add(SadRogue.Primitives.Rectangle)">
            <summary>
            Adds all positions in the given rectangle to the area, if they are not already present.
            </summary>
            <param name="rectangle">Rectangle indicating which points to add.</param>
        </member>
        <member name="M:SadRogue.Primitives.Area.Add(SadRogue.Primitives.IReadOnlyArea)">
            <summary>
            Adds all positions in the given map area to this one.
            </summary>
            <param name="area">Area containing positions to add.</param>
        </member>
        <member name="M:SadRogue.Primitives.Area.Contains(SadRogue.Primitives.Point)">
            <summary>
            Determines whether or not the given position is within the area or not.
            </summary>
            <param name="position">The position to check.</param>
            <returns>True if the specified position is within the area, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Area.Contains(System.Int32,System.Int32)">
            <summary>
            Determines whether or not the given position is within the area or not.
            </summary>
            <param name="positionX">X-value of the position to check.</param>
            <param name="positionY">Y-value of the position to check.</param>
            <returns>True if the specified position is within the area, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Area.Contains(SadRogue.Primitives.IReadOnlyArea)">
            <summary>
            Returns whether or not the given area is completely contained within the current one.
            </summary>
            <param name="area">Area to check.</param>
            <returns>
            True if the given area is completely contained within the current one, false otherwise.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Area.Intersects(SadRogue.Primitives.IReadOnlyArea)">
            <summary>
            Returns whether or not the given map area intersects the current one. If you intend to
            determine/use the exact intersection based on this return value, it is best to instead
            call the <see cref="M:SadRogue.Primitives.Area.GetIntersection(SadRogue.Primitives.IReadOnlyArea,SadRogue.Primitives.IReadOnlyArea,System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point})"/>, and
            check the number of positions in the result (0 if no intersection).
            </summary>
            <param name="area">The area to check.</param>
            <returns>True if the given map area intersects the current one, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Area.Remove(SadRogue.Primitives.Point)">
            <summary>
            Removes the given position specified from the area. Particularly when the remove operation
            operation changes the bounds, this operation can be expensive, so if you must do multiple
            remove operations, it would be best to group them into 1 using <see cref="M:SadRogue.Primitives.Area.Remove(System.Collections.Generic.IEnumerable{SadRogue.Primitives.Point})"/>.
            </summary>
            <param name="position">The position to remove.</param>
        </member>
        <member name="M:SadRogue.Primitives.Area.Remove(System.Int32,System.Int32)">
            <summary>
            Removes the given position specified from the area. Particularly when the remove operation
            operation changes the bounds, this operation can be expensive, so if you must do multiple
            remove operations, it would be best to group them into 1 using <see cref="M:SadRogue.Primitives.Area.Remove(System.Collections.Generic.IEnumerable{SadRogue.Primitives.Point})"/>.
            </summary>
            <param name="positionX">X-value of the position to remove.</param>
            <param name="positionY">Y-value of the position to remove.</param>
        </member>
        <member name="M:SadRogue.Primitives.Area.Remove(System.Func{SadRogue.Primitives.Point,System.Boolean})">
            <summary>
            Removes positions for which the given predicate returns true from the area.
            </summary>
            <param name="predicate">Predicate returning true for positions that should be removed.</param>
        </member>
        <member name="M:SadRogue.Primitives.Area.Remove(System.Collections.Generic.HashSet{SadRogue.Primitives.Point})">
            <summary>
            Removes the given positions from the specified area.
            </summary>
            <param name="positions">Positions to remove.</param>
        </member>
        <member name="M:SadRogue.Primitives.Area.Remove(System.Collections.Generic.IEnumerable{SadRogue.Primitives.Point})">
            <summary>
            Removes the given positions from the specified area.
            </summary>
            <param name="positions">Positions to remove.</param>
        </member>
        <member name="M:SadRogue.Primitives.Area.Remove(SadRogue.Primitives.IReadOnlyArea)">
            <summary>
            Removes all positions in the given map area from this one.
            </summary>
            <param name="area">Area containing positions to remove.</param>
        </member>
        <member name="M:SadRogue.Primitives.Area.Remove(SadRogue.Primitives.Rectangle)">
            <summary>
            Removes all positions in the given rectangle from this area.
            </summary>
            <param name="rectangle">Rectangle containing positions to remove.</param>
        </member>
        <member name="M:SadRogue.Primitives.Area.ToString">
            <summary>
            Returns the string of each position in the area, in a square-bracket enclosed list,
            eg. [(1, 2), (3, 4), (5, 6)].
            </summary>
            <returns>A string representation of those coordinates in the area.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Area.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through all positions in the Area, in the order they were added.
            </summary>
            <returns>An enumerator that iterates through all the positions in the Area, in the order they were added.</returns>
        </member>
        <member name="T:SadRogue.Primitives.BoundedRectangle">
            <summary>
            This class defines a 2D rectangular area, whose area is automatically "locked" to
            being inside a rectangular bounding box as it is changed. A typical use might be
            keeping track of a camera's view area.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.BoundedRectangle.#ctor(SadRogue.Primitives.Rectangle,SadRogue.Primitives.Rectangle)">
            <summary>
            Constructor.
            </summary>
            <param name="area">Initial area for the rectangle.</param>
            <param name="boundingBox">Initial bounding box by which to bound the rectangle.</param>
        </member>
        <member name="P:SadRogue.Primitives.BoundedRectangle.Area">
            <summary>
            The rectangle that is guaranteed to be contained completely within <see cref="P:SadRogue.Primitives.BoundedRectangle.BoundingBox" />.
            Use <see cref="M:SadRogue.Primitives.BoundedRectangle.SetArea(SadRogue.Primitives.Rectangle)" /> to set the area.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.BoundedRectangle.BoundingBox">
            <summary>
            The rectangle which <see cref="P:SadRogue.Primitives.BoundedRectangle.Area" /> is automatically bounded to be within.  Use the
            <see cref="M:SadRogue.Primitives.BoundedRectangle.SetBoundingBox(SadRogue.Primitives.Rectangle)" /> property to set the bounding box.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.BoundedRectangle.Matches(SadRogue.Primitives.BoundedRectangle)">
            <summary>
            True if the given BoundedRectangle has the same Bounds and Area as the current one.
            </summary>
            <param name="other">BoundedRectangle to compare.</param>
            <returns>True if the two BoundedRectangles are the same, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.BoundedRectangle.SetArea(SadRogue.Primitives.Rectangle)">
            <summary>
            Forces the area given to conform to the <see cref="P:SadRogue.Primitives.BoundedRectangle.BoundingBox" /> specified and sets it to <see cref="P:SadRogue.Primitives.BoundedRectangle.Area" />.
            </summary>
            <param name="newArea">The new area to bound and set.</param>
        </member>
        <member name="M:SadRogue.Primitives.BoundedRectangle.SetBoundingBox(SadRogue.Primitives.Rectangle)">
            <summary>
            Sets the bounding box to the specified value, and forces the current area to fit within the bounding box
            as needed.
            </summary>
            <param name="newBoundingBox">The new bounding box to apply.</param>
        </member>
        <member name="T:SadRogue.Primitives.Color">
            <summary>
            Describes a 32-bit packed color.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.Color.#ctor(System.UInt32)">
            <summary>
            Constructs an RGBA color from a packed value.
            The value is a 32-bit unsigned integer, with R in the least significant octet.
            </summary>
            <param name="packedValue">The packed value.</param>
        </member>
        <member name="M:SadRogue.Primitives.Color.#ctor(SadRogue.Primitives.Color,System.Int32)">
            <summary>
            Constructs an RGBA color from a <see cref="T:SadRogue.Primitives.Color"/> and an alpha value.
            </summary>
            <param name="color">A <see cref="T:SadRogue.Primitives.Color"/> for RGB values of new <see cref="T:SadRogue.Primitives.Color"/> instance.</param>
            <param name="alpha">The alpha component value from 0 to 255.</param>
        </member>
        <member name="M:SadRogue.Primitives.Color.#ctor(SadRogue.Primitives.Color,System.Single)">
            <summary>
            Constructs an RGBA color from color and alpha value.
            </summary>
            <param name="color">A <see cref="T:SadRogue.Primitives.Color"/> for RGB values of new <see cref="T:SadRogue.Primitives.Color"/> instance.</param>
            <param name="alpha">Alpha component value from 0.0f to 1.0f.</param>
        </member>
        <member name="M:SadRogue.Primitives.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs an RGBA color from scalars representing red, green and blue values. Alpha value will be opaque.
            </summary>
            <param name="r">Red component value from 0.0f to 1.0f.</param>
            <param name="g">Green component value from 0.0f to 1.0f.</param>
            <param name="b">Blue component value from 0.0f to 1.0f.</param>
        </member>
        <member name="M:SadRogue.Primitives.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs an RGBA color from scalars representing red, green, blue and alpha values.
            </summary>
            <param name="r">Red component value from 0.0f to 1.0f.</param>
            <param name="g">Green component value from 0.0f to 1.0f.</param>
            <param name="b">Blue component value from 0.0f to 1.0f.</param>
            <param name="alpha">Alpha component value from 0.0f to 1.0f.</param>
        </member>
        <member name="M:SadRogue.Primitives.Color.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs an RGBA color from scalars representing red, green and blue values. Alpha value will be opaque.
            </summary>
            <param name="r">Red component value from 0 to 255.</param>
            <param name="g">Green component value from 0 to 255.</param>
            <param name="b">Blue component value from 0 to 255.</param>
        </member>
        <member name="M:SadRogue.Primitives.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs an RGBA color from scalars representing red, green, blue and alpha values.
            </summary>
            <param name="r">Red component value from 0 to 255.</param>
            <param name="g">Green component value from 0 to 255.</param>
            <param name="b">Blue component value from 0 to 255.</param>
            <param name="alpha">Alpha component value from 0 to 255.</param>
        </member>
        <member name="M:SadRogue.Primitives.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs an RGBA color from scalars representing red, green, blue and alpha values.
            </summary>
            <remarks>
            This overload sets the values directly without clamping, and may therefore be faster than the other overloads.
            </remarks>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="alpha"></param>
        </member>
        <member name="P:SadRogue.Primitives.Color.B">
            <summary>
            Gets or sets the blue component.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Color.G">
            <summary>
            Gets or sets the green component.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Color.R">
            <summary>
            Gets or sets the red component.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Color.A">
            <summary>
            Gets or sets the alpha component.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.Color.op_Equality(SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Compares whether two <see cref="T:SadRogue.Primitives.Color"/> instances are equal.
            </summary>
            <param name="a"><see cref="T:SadRogue.Primitives.Color"/> instance on the left of the equal sign.</param>
            <param name="b"><see cref="T:SadRogue.Primitives.Color"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.op_Inequality(SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Compares whether two <see cref="T:SadRogue.Primitives.Color"/> instances are not equal.
            </summary>
            <param name="a"><see cref="T:SadRogue.Primitives.Color"/> instance on the left of the not equal sign.</param>
            <param name="b"><see cref="T:SadRogue.Primitives.Color"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:SadRogue.Primitives.Color"/>.
            </summary>
            <returns>Hash code of this <see cref="T:SadRogue.Primitives.Color"/>.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.Equals(System.Object)">
            <summary>
            Compares whether current instance is equal to specified object.
            </summary>
            <param name="obj">The <see cref="T:SadRogue.Primitives.Color"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="F:SadRogue.Primitives.Color.AnsiBlack">
            <summary>
            The black ansi color (0, 0, 0).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.AnsiRed">
            <summary>
            The Red ansi color (170, 0, 0).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.AnsiGreen">
            <summary>
            The Green ansi color 0, 170, 0).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.AnsiYellow">
            <summary>
            The Yellow ansi color (170, 85, 0).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.AnsiBlue">
            <summary>
            The Blue ansi color (0, 0, 170).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.AnsiMagenta">
            <summary>
            The Magenta ansi color (170, 0, 170).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.AnsiCyan">
            <summary>
            The Cyan ansi color (0, 170, 170).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.AnsiWhite">
            <summary>
            The White ansi color (170, 170, 170).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.AnsiBlackBright">
            <summary>
            The BlackBright ansi color (85, 85, 85).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.AnsiRedBright">
            <summary>
            The RedBright ansi color (255, 85, 85).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.AnsiGreenBright">
            <summary>
            The GreenBright ansi color (85, 255, 85).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.AnsiYellowBright">
            <summary>
            The YellowBright ansi color (255, 255, 85).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.AnsiBlueBright">
            <summary>
            The BlueBright ansi color (85, 85, 255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.AnsiMagentaBright">
            <summary>
            The MagentaBright ansi color (255, 85, 255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.AnsiCyanBright">
            <summary>
            The CyanBright ansi color (85, 255, 255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.AnsiWhiteBright">
            <summary>
            The WhiteBright ansi color (255, 255, 255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.TransparentBlack">
            <summary>
            TransparentBlack color (R:0,G:0,B:0,A:0).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Transparent">
            <summary>
            Transparent color (R:0,G:0,B:0,A:0).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.AliceBlue">
            <summary>
            AliceBlue color (R:240,G:248,B:255,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.AntiqueWhite">
            <summary>
            AntiqueWhite color (R:250,G:235,B:215,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Aqua">
            <summary>
            Aqua color (R:0,G:255,B:255,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Aquamarine">
            <summary>
            Aquamarine color (R:127,G:255,B:212,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Azure">
            <summary>
            Azure color (R:240,G:255,B:255,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Beige">
            <summary>
            Beige color (R:245,G:245,B:220,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Bisque">
            <summary>
            Bisque color (R:255,G:228,B:196,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Black">
            <summary>
            Black color (R:0,G:0,B:0,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.BlanchedAlmond">
            <summary>
            BlanchedAlmond color (R:255,G:235,B:205,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Blue">
            <summary>
            Blue color (R:0,G:0,B:255,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.BlueViolet">
            <summary>
            BlueViolet color (R:138,G:43,B:226,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Brown">
            <summary>
            Brown color (R:165,G:42,B:42,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.BurlyWood">
            <summary>
            BurlyWood color (R:222,G:184,B:135,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.CadetBlue">
            <summary>
            CadetBlue color (R:95,G:158,B:160,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Chartreuse">
            <summary>
            Chartreuse color (R:127,G:255,B:0,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Chocolate">
            <summary>
            Chocolate color (R:210,G:105,B:30,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Coral">
            <summary>
            Coral color (R:255,G:127,B:80,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.CornflowerBlue">
            <summary>
            CornflowerBlue color (R:100,G:149,B:237,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Cornsilk">
            <summary>
            Cornsilk color (R:255,G:248,B:220,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Crimson">
            <summary>
            Crimson color (R:220,G:20,B:60,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Cyan">
            <summary>
            Cyan color (R:0,G:255,B:255,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DarkBlue">
            <summary>
            DarkBlue color (R:0,G:0,B:139,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DarkCyan">
            <summary>
            DarkCyan color (R:0,G:139,B:139,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DarkGoldenrod">
            <summary>
            DarkGoldenrod color (R:184,G:134,B:11,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DarkGray">
            <summary>
            DarkGray color (R:169,G:169,B:169,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DarkGreen">
            <summary>
            DarkGreen color (R:0,G:100,B:0,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DarkKhaki">
            <summary>
            DarkKhaki color (R:189,G:183,B:107,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DarkMagenta">
            <summary>
            DarkMagenta color (R:139,G:0,B:139,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DarkOliveGreen">
            <summary>
            DarkOliveGreen color (R:85,G:107,B:47,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DarkOrange">
            <summary>
            DarkOrange color (R:255,G:140,B:0,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DarkOrchid">
            <summary>
            DarkOrchid color (R:153,G:50,B:204,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DarkRed">
            <summary>
            DarkRed color (R:139,G:0,B:0,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DarkSalmon">
            <summary>
            DarkSalmon color (R:233,G:150,B:122,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DarkSeaGreen">
            <summary>
            DarkSeaGreen color (R:143,G:188,B:139,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DarkSlateBlue">
            <summary>
            DarkSlateBlue color (R:72,G:61,B:139,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DarkSlateGray">
            <summary>
            DarkSlateGray color (R:47,G:79,B:79,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DarkTurquoise">
            <summary>
            DarkTurquoise color (R:0,G:206,B:209,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DarkViolet">
            <summary>
            DarkViolet color (R:148,G:0,B:211,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DeepPink">
            <summary>
            DeepPink color (R:255,G:20,B:147,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DeepSkyBlue">
            <summary>
            DeepSkyBlue color (R:0,G:191,B:255,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DimGray">
            <summary>
            DimGray color (R:105,G:105,B:105,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.DodgerBlue">
            <summary>
            DodgerBlue color (R:30,G:144,B:255,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Firebrick">
            <summary>
            Firebrick color (R:178,G:34,B:34,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.FloralWhite">
            <summary>
            FloralWhite color (R:255,G:250,B:240,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.ForestGreen">
            <summary>
            ForestGreen color (R:34,G:139,B:34,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Fuchsia">
            <summary>
            Fuchsia color (R:255,G:0,B:255,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Gainsboro">
            <summary>
            Gainsboro color (R:220,G:220,B:220,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.GhostWhite">
            <summary>
            GhostWhite color (R:248,G:248,B:255,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Gold">
            <summary>
            Gold color (R:255,G:215,B:0,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Goldenrod">
            <summary>
            Goldenrod color (R:218,G:165,B:32,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Gray">
            <summary>
            Gray color (R:128,G:128,B:128,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Green">
            <summary>
            Green color (R:0,G:128,B:0,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.GreenYellow">
            <summary>
            GreenYellow color (R:173,G:255,B:47,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Honeydew">
            <summary>
            Honeydew color (R:240,G:255,B:240,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.HotPink">
            <summary>
            HotPink color (R:255,G:105,B:180,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.IndianRed">
            <summary>
            IndianRed color (R:205,G:92,B:92,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Indigo">
            <summary>
            Indigo color (R:75,G:0,B:130,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Ivory">
            <summary>
            Ivory color (R:255,G:255,B:240,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Khaki">
            <summary>
            Khaki color (R:240,G:230,B:140,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Lavender">
            <summary>
            Lavender color (R:230,G:230,B:250,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.LavenderBlush">
            <summary>
            LavenderBlush color (R:255,G:240,B:245,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.LawnGreen">
            <summary>
            LawnGreen color (R:124,G:252,B:0,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.LemonChiffon">
            <summary>
            LemonChiffon color (R:255,G:250,B:205,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.LightBlue">
            <summary>
            LightBlue color (R:173,G:216,B:230,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.LightCoral">
            <summary>
            LightCoral color (R:240,G:128,B:128,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.LightCyan">
            <summary>
            LightCyan color (R:224,G:255,B:255,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.LightGoldenrodYellow">
            <summary>
            LightGoldenrodYellow color (R:250,G:250,B:210,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.LightGray">
            <summary>
            LightGray color (R:211,G:211,B:211,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.LightGreen">
            <summary>
            LightGreen color (R:144,G:238,B:144,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.LightPink">
            <summary>
            LightPink color (R:255,G:182,B:193,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.LightSalmon">
            <summary>
            LightSalmon color (R:255,G:160,B:122,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.LightSeaGreen">
            <summary>
            LightSeaGreen color (R:32,G:178,B:170,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.LightSkyBlue">
            <summary>
            LightSkyBlue color (R:135,G:206,B:250,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.LightSlateGray">
            <summary>
            LightSlateGray color (R:119,G:136,B:153,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.LightSteelBlue">
            <summary>
            LightSteelBlue color (R:176,G:196,B:222,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.LightYellow">
            <summary>
            LightYellow color (R:255,G:255,B:224,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Lime">
            <summary>
            Lime color (R:0,G:255,B:0,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.LimeGreen">
            <summary>
            LimeGreen color (R:50,G:205,B:50,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Linen">
            <summary>
            Linen color (R:250,G:240,B:230,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Magenta">
            <summary>
            Magenta color (R:255,G:0,B:255,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Maroon">
            <summary>
            Maroon color (R:128,G:0,B:0,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.MediumAquamarine">
            <summary>
            MediumAquamarine color (R:102,G:205,B:170,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.MediumBlue">
            <summary>
            MediumBlue color (R:0,G:0,B:205,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.MediumOrchid">
            <summary>
            MediumOrchid color (R:186,G:85,B:211,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.MediumPurple">
            <summary>
            MediumPurple color (R:147,G:112,B:219,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.MediumSeaGreen">
            <summary>
            MediumSeaGreen color (R:60,G:179,B:113,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.MediumSlateBlue">
            <summary>
            MediumSlateBlue color (R:123,G:104,B:238,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.MediumSpringGreen">
            <summary>
            MediumSpringGreen color (R:0,G:250,B:154,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.MediumTurquoise">
            <summary>
            MediumTurquoise color (R:72,G:209,B:204,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.MediumVioletRed">
            <summary>
            MediumVioletRed color (R:199,G:21,B:133,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.MidnightBlue">
            <summary>
            MidnightBlue color (R:25,G:25,B:112,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.MintCream">
            <summary>
            MintCream color (R:245,G:255,B:250,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.MistyRose">
            <summary>
            MistyRose color (R:255,G:228,B:225,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Moccasin">
            <summary>
            Moccasin color (R:255,G:228,B:181,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.MonoGameOrange">
            <summary>
            MonoGame orange theme color (R:231,G:60,B:0,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.NavajoWhite">
            <summary>
            NavajoWhite color (R:255,G:222,B:173,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Navy">
            <summary>
            Navy color (R:0,G:0,B:128,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.OldLace">
            <summary>
            OldLace color (R:253,G:245,B:230,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Olive">
            <summary>
            Olive color (R:128,G:128,B:0,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.OliveDrab">
            <summary>
            OliveDrab color (R:107,G:142,B:35,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Orange">
            <summary>
            Orange color (R:255,G:165,B:0,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.OrangeRed">
            <summary>
            OrangeRed color (R:255,G:69,B:0,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Orchid">
            <summary>
            Orchid color (R:218,G:112,B:214,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.PaleGoldenrod">
            <summary>
            PaleGoldenrod color (R:238,G:232,B:170,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.PaleGreen">
            <summary>
            PaleGreen color (R:152,G:251,B:152,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.PaleTurquoise">
            <summary>
            PaleTurquoise color (R:175,G:238,B:238,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.PaleVioletRed">
            <summary>
            PaleVioletRed color (R:219,G:112,B:147,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.PapayaWhip">
            <summary>
            PapayaWhip color (R:255,G:239,B:213,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.PeachPuff">
            <summary>
            PeachPuff color (R:255,G:218,B:185,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Peru">
            <summary>
            Peru color (R:205,G:133,B:63,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Pink">
            <summary>
            Pink color (R:255,G:192,B:203,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Plum">
            <summary>
            Plum color (R:221,G:160,B:221,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.PowderBlue">
            <summary>
            PowderBlue color (R:176,G:224,B:230,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Purple">
            <summary>
             Purple color (R:128,G:0,B:128,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Red">
            <summary>
            Red color (R:255,G:0,B:0,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.RosyBrown">
            <summary>
            RosyBrown color (R:188,G:143,B:143,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.RoyalBlue">
            <summary>
            RoyalBlue color (R:65,G:105,B:225,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.SaddleBrown">
            <summary>
            SaddleBrown color (R:139,G:69,B:19,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Salmon">
            <summary>
            Salmon color (R:250,G:128,B:114,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.SandyBrown">
            <summary>
            SandyBrown color (R:244,G:164,B:96,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.SeaGreen">
            <summary>
            SeaGreen color (R:46,G:139,B:87,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.SeaShell">
            <summary>
            SeaShell color (R:255,G:245,B:238,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Sienna">
            <summary>
            Sienna color (R:160,G:82,B:45,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Silver">
            <summary>
            Silver color (R:192,G:192,B:192,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.SkyBlue">
            <summary>
            SkyBlue color (R:135,G:206,B:235,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.SlateBlue">
            <summary>
            SlateBlue color (R:106,G:90,B:205,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.SlateGray">
            <summary>
            SlateGray color (R:112,G:128,B:144,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Snow">
            <summary>
            Snow color (R:255,G:250,B:250,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.SpringGreen">
            <summary>
            SpringGreen color (R:0,G:255,B:127,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.SteelBlue">
            <summary>
            SteelBlue color (R:70,G:130,B:180,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Tan">
            <summary>
            Tan color (R:210,G:180,B:140,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Teal">
            <summary>
            Teal color (R:0,G:128,B:128,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Thistle">
            <summary>
            Thistle color (R:216,G:191,B:216,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Tomato">
            <summary>
            Tomato color (R:255,G:99,B:71,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Turquoise">
            <summary>
            Turquoise color (R:64,G:224,B:208,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Violet">
            <summary>
            Violet color (R:238,G:130,B:238,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Wheat">
            <summary>
            Wheat color (R:245,G:222,B:179,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.White">
            <summary>
            White color (R:255,G:255,B:255,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.WhiteSmoke">
            <summary>
            WhiteSmoke color (R:245,G:245,B:245,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.Yellow">
            <summary>
            Yellow color (R:255,G:255,B:0,A:255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Color.YellowGreen">
            <summary>
            YellowGreen color (R:154,G:205,B:50,A:255).
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.Color.GetLuma">
            <summary>
            Gets the luma of an existing color.
            </summary>
            <returns>A value based on this code: (color.R + color.R + color.B + color.G + color.G + color.G) / 6f</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.GetBrightness">
            <summary>
            Gets the lightness of a color (as defined by the HSL color space).
            </summary>
            <remarks>
            This function exists largely for historical reasons; use GetHSLLightness and GetHSVBrightness instead.
            </remarks>
            <returns>The lightness value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.GetHSLLightness">
            <summary>
            Gets the lightness of a color (as defined by the HSL color space).
            </summary>
            <returns>The lightness value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.GetHSVBrightness">
            <summary>
            Gets the brightness of a color (as defined by the HSV color space).
            </summary>
            <returns>The brightness value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.GetHue">
            <summary>
            Gets the hue of a color (as defined by the HSL color space).
            </summary>
            <remarks>
            This function exists largely for historical reason; use GetHSLHue and GetHSVHue instead.
            </remarks>
            <returns>The hue value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.GetHSLHue">
            <summary>
            Gets the hue of a color (as defined by the HSL color space).
            </summary>
            <returns>The hue value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.GetHSVHue">
            <summary>
            Gets the hue of a color (as defined by the HSV color space).
            </summary>
            <returns>The hue value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.GetSaturation">
            <summary>
            Gets the saturation of a color (as defined by the HSL color space).
            </summary>
            <remarks>
            This function exists largely for historical reason; use GetHSLSaturation and GetHSVSaturation instead.
            </remarks>
            <returns>The saturation value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.GetHSLSaturation">
            <summary>
            Gets the saturation of a color (as defined by the HSL color space).
            </summary>
            <returns>The saturation value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.GetHSVSaturation">
            <summary>
            Gets the saturation of a color (as defined by the HSL color space).
            </summary>
            <returns>The saturation value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.Lerp(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Single)">
            <summary>
            Performs linear interpolation of <see cref="T:SadRogue.Primitives.Color"/>.
            </summary>
            <param name="value1">Source <see cref="T:SadRogue.Primitives.Color"/>.</param>
            <param name="value2">Destination <see cref="T:SadRogue.Primitives.Color"/>.</param>
            <param name="amount">Interpolation factor.</param>
            <returns>Interpolated <see cref="T:SadRogue.Primitives.Color"/>.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.Matches(SadRogue.Primitives.Color)">
            <summary>
            Returns true if the colors represent the same color values.
            </summary>
            <param name="other"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.Color.Multiply(SadRogue.Primitives.Color,System.Single)">
            <summary>
            Multiply <see cref="T:SadRogue.Primitives.Color"/> by value.
            </summary>
            <param name="value">Source <see cref="T:SadRogue.Primitives.Color"/>.</param>
            <param name="scale">Multiplicator.</param>
            <returns>Multiplication result.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.LerpSteps(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32)">
            <summary>
            Creates an array of colors that includes the <paramref name="startingColor"/> and <paramref name="endingColor"/> and <paramref name="steps"/> of colors between them.
            </summary>
            <param name="startingColor">The starting color which will be at index 0 in the array.</param>
            <param name="endingColor">The ending color which will be at index `steps - 1` in the array.</param>
            <param name="steps">The gradient steps in the array which uses <see cref="M:SadRogue.Primitives.Color.Lerp(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Single)"/>.</param>
            <returns>An array of colors.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.FromHSL(System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:SadRogue.Primitives.Color"/> from the specified hue, saturation, lightness, and alpha values.
            Taken from the MIT licensed Windows Community Toolkit:
            https://github.com/CommunityToolkit/WindowsCommunityToolkit/blob/63cbb4a51bdef59083ccfc86bbcba41f966d0027/Microsoft.Toolkit.Uwp/Helpers/ColorHelper.cs#L246
            </summary>
            <param name="h">0..360 range hue</param>
            <param name="s">0..1 range saturation</param>
            <param name="l">0..1 range lightness</param>
            <returns>The created <see cref="T:SadRogue.Primitives.Color"/>.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.op_Multiply(SadRogue.Primitives.Color,System.Single)">
            <summary>
            Multiply <see cref="T:SadRogue.Primitives.Color"/> by value.
            </summary>
            <param name="value">Source <see cref="T:SadRogue.Primitives.Color"/>.</param>
            <param name="scale">Multiplicator.</param>
            <returns>Multiplication result.</returns>
        </member>
        <member name="P:SadRogue.Primitives.Color.PackedValue">
            <summary>
            Gets the packed value of this <see cref="T:SadRogue.Primitives.Color"/>.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.Color.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:SadRogue.Primitives.Color"/> in the format:
            {R:[red] G:[green] B:[blue] A:[alpha]}
            </summary>
            <returns><see cref="T:System.String"/> representation of this <see cref="T:SadRogue.Primitives.Color"/>.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.FromNonPremultiplied(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Translate a non-premultipled alpha <see cref="T:SadRogue.Primitives.Color"/> to a <see cref="T:SadRogue.Primitives.Color"/> that contains premultiplied alpha.
            </summary>
            <param name="r">Red component value.</param>
            <param name="g">Green component value.</param>
            <param name="b">Blue component value.</param>
            <param name="a">Alpha component value.</param>
            <returns>A <see cref="T:SadRogue.Primitives.Color"/> which contains premultiplied alpha data.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.Equals(SadRogue.Primitives.Color)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:SadRogue.Primitives.Color"/>.
            </summary>
            <param name="other">The <see cref="T:SadRogue.Primitives.Color"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Color.Deconstruct(System.Single@,System.Single@,System.Single@)">
            <summary>
            Deconstruction method for <see cref="T:SadRogue.Primitives.Color"/>.
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
        </member>
        <member name="M:SadRogue.Primitives.Color.Deconstruct(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Deconstruction method for <see cref="T:SadRogue.Primitives.Color"/> with Alpha.
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
        </member>
        <member name="M:SadRogue.Primitives.Color.Deconstruct(System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Deconstruction method for <see cref="T:SadRogue.Primitives.Color"/>.
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
        </member>
        <member name="M:SadRogue.Primitives.Color.Deconstruct(System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Deconstruction method for <see cref="T:SadRogue.Primitives.Color"/> with Alpha.
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
        </member>
        <member name="M:SadRogue.Primitives.Color.Deconstruct(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Deconstruction method for <see cref="T:SadRogue.Primitives.Color"/>.
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
        </member>
        <member name="M:SadRogue.Primitives.Color.Deconstruct(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Deconstruction method for <see cref="T:SadRogue.Primitives.Color"/> with Alpha.
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
        </member>
        <member name="T:SadRogue.Primitives.ListEnumerator`1">
             <summary>
             A custom enumerator that simply iterates over a List.  It differs from C#'s built-in iterator in that it
             also implements IEnumerable, and so can be used as a substitute for IEnumerable&lt;T&gt;.
             </summary>
             <remarks>
             This type is a struct, and as such is much more efficient when used in a foreach loop than a function returning
             IEnumerable&lt;T&gt;.  It is also faster than iterating over a list via an IReadOnlyList reference (about 7x faster,
             in fact, for types with a small size).
            
             Otherwise, it has basically the same characteristics that exposing a list as <see cref="T:System.Collections.Generic.IEnumerable`1"/> would;
             so if you need to expose items as some type like IEnumerable, and the items are internally stored as a list, this
             can be a good option.  This type does implement IEnumerable, and as such can be used directly with functions that
             require one (for example, System.LINQ).  However, this will have reduced performance due to boxing of the iterator.
             </remarks>
             <typeparam name="T">Type of items in the list.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.ListEnumerator`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="list">List to iterate over.</param>
        </member>
        <member name="M:SadRogue.Primitives.ListEnumerator`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.ListEnumerator`1.MoveNext">
            <inheritdoc/>
        </member>
        <member name="P:SadRogue.Primitives.ListEnumerator`1.Current">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.ListEnumerator`1.GetEnumerator">
            <summary>
            Returns this enumerator.
            </summary>
            <returns>This enumerator.</returns>
        </member>
        <member name="T:SadRogue.Primitives.ReadOnlyListEnumerator`1">
            <summary>
            A structure similar to <see cref="T:SadRogue.Primitives.ListEnumerator`1"/>, but for <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>.  It is not quite
            as fast as <see cref="T:SadRogue.Primitives.ListEnumerator`1"/>, but is still faster than using the typical Enumerable implementation
            for IReadOnlyList.  You should only use this if you can't use <see cref="T:SadRogue.Primitives.ListEnumerator`1"/> due to the type
            you're working with; they share the same characteristics otherwise.
            </summary>
            <typeparam name="T">Types of elements stored in the list.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.ReadOnlyListEnumerator`1.#ctor(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="list">List to iterate over.</param>
        </member>
        <member name="M:SadRogue.Primitives.ReadOnlyListEnumerator`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.ReadOnlyListEnumerator`1.MoveNext">
            <inheritdoc/>
        </member>
        <member name="P:SadRogue.Primitives.ReadOnlyListEnumerator`1.Current">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.ReadOnlyListEnumerator`1.GetEnumerator">
            <summary>
            Returns this enumerator.
            </summary>
            <returns>This enumerator.</returns>
        </member>
        <member name="T:SadRogue.Primitives.Direction">
            <summary>
            Structure representing the concept of a "direction" on a grid, and "defines" the coordinate plane via the
            <see cref="P:SadRogue.Primitives.Direction.YIncreasesUpward"/> flag. Interacts with Point to allow easy translation
            of positions in a direction, and contains numerous helper functions for retrieving directions in
            various orders, getting direction closest to a line, etc.
            </summary>
            <remarks>
            The static <see cref="P:SadRogue.Primitives.Direction.YIncreasesUpward"/> flag defines the way that many algorithms
            interpret the coordinate plane.  By default, this flag is false, meaning that the y-value of positions
            is assumed to DECREASE as you proceed in the direction defined by <see cref="F:SadRogue.Primitives.Direction.Up"/>, and
            increase as you go downward.  If the coordinate plane is displayed on the screen, the origin would be
            the top left corner.  This default setting matches the typical console/computer graphic definition of the
            coordinate plane.  Setting the flag to true inverts this, so that the y-value of positions INCREASES
            as you proceed in the direction defined by <see cref="F:SadRogue.Primitives.Direction.Up"/>.  This places the origin in the bottom
            left corner, and matches a typical mathematical definition of a euclidean coordinate plane, as well as the scene
            coordinate plane defined by Unity and other game engines.
            </remarks>
        </member>
        <member name="T:SadRogue.Primitives.Direction.Types">
            <summary>
            Enum representing Direction types. Each Direction instance has a <see cref="F:SadRogue.Primitives.Direction.Type"/> field
            which contains the corresponding value from this enum.  Useful for easy mapping of Direction
            types to a primitive type (for cases like a switch statement).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Direction.Types.None">
            <summary>
            Type for <see cref="F:SadRogue.Primitives.Direction.None"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Direction.Types.Up">
            <summary>
            Type for <see cref="F:SadRogue.Primitives.Direction.Up"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Direction.Types.UpRight">
            <summary>
            Type for <see cref="F:SadRogue.Primitives.Direction.UpRight"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Direction.Types.Right">
            <summary>
            Type for <see cref="F:SadRogue.Primitives.Direction.Right"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Direction.Types.DownRight">
            <summary>
            Type for <see cref="F:SadRogue.Primitives.Direction.DownRight"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Direction.Types.Down">
            <summary>
            Type for <see cref="F:SadRogue.Primitives.Direction.Down"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Direction.Types.DownLeft">
            <summary>
            Type for <see cref="F:SadRogue.Primitives.Direction.DownLeft"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Direction.Types.Left">
            <summary>
            Type for <see cref="F:SadRogue.Primitives.Direction.Left"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Direction.Types.UpLeft">
            <summary>
            Type for <see cref="F:SadRogue.Primitives.Direction.UpLeft"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Direction.Down">
            <summary>
            Down direction.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Direction.DownLeft">
            <summary>
            Down-left direction.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Direction.DownRight">
            <summary>
            Down-right direction.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Direction.Left">
            <summary>
            Left direction.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Direction.None">
            <summary>
            No direction.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Direction.Right">
            <summary>
            Right direction.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Direction.Up">
            <summary>
            Up direction.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Direction.UpLeft">
            <summary>
            Up-left direction.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Direction.UpRight">
            <summary>
            Up-right direction.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Direction.YIncreasesUpward">
            <summary>
            Whether or not a positive y-value indicates an upward change. To set this value, use <see cref="M:SadRogue.Primitives.Direction.SetYIncreasesUpwardsUnsafe(System.Boolean)"/>, however note that this is an unsafe
            operation in a multi-threaded environment where one or more threads may be using Directions.  It is intended that this configuration be done as part of an initialization
            routine.
            </summary>
            <remarks>
            If true, directions with an upwards component represent a positive change in y-value, and ones with downward components
            represent a negative change in y-value.  Changing this to false (which is the default) inverts this.
            </remarks>
        </member>
        <member name="P:SadRogue.Primitives.Direction.DeltaX">
            <summary>
            Change in x-value represented by this direction.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Direction.DeltaY">
            <summary>
            Change in y-value represented by this direction.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Direction.Type">
            <summary>
            Enum type corresponding to direction being represented.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.Direction.Equals(SadRogue.Primitives.Direction)">
            <summary>
            True if the given direction has the same Type the current one.
            </summary>
            <param name="other">Direction to compare.</param>
            <returns>True if the two directions are the same, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Direction.Equals(System.Object)">
            <summary>
            Same as operator == in this case; returns false if <paramref name="obj"/> is not a Direction.
            </summary>
            <param name="obj">The object to compare the current Direction to.</param>
            <returns>
            True if <paramref name="obj"/> is a Direction, and the two directions are equal, false otherwise.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Direction.GetHashCode">
            <summary>
            Returns a hash-map value for the current object.
            </summary>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.Direction.Matches(SadRogue.Primitives.Direction)">
            <summary>
            True if the given direction has the same Type the current one.
            </summary>
            <param name="other">Direction to compare.</param>
            <returns>True if the two directions are the same, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Direction.op_Equality(SadRogue.Primitives.Direction,SadRogue.Primitives.Direction)">
            <summary>
            True if the two directions have the same Type.
            </summary>
            <param name="lhs"/>
            <param name="rhs"/>
            <returns>True if the two directions are equal, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Direction.op_Inequality(SadRogue.Primitives.Direction,SadRogue.Primitives.Direction)">
            <summary>
            True if the types are not equal.
            </summary>
            <param name="lhs"/>
            <param name="rhs"/>
            <returns>
            True if the types are not equal, false if they are both equal.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Direction.op_Implicit(SadRogue.Primitives.Direction)~SadRogue.Primitives.Direction.Types">
            <summary>
            Implicitly converts a Direction to its corresponding <see cref="F:SadRogue.Primitives.Direction.Type"/>.
            </summary>
            <param name="direction"/>
        </member>
        <member name="M:SadRogue.Primitives.Direction.op_Implicit(SadRogue.Primitives.Direction.Types)~SadRogue.Primitives.Direction">
            <summary>
            Implicitly converts an <see cref="T:SadRogue.Primitives.Direction.Types"/> enum value to its corresponding Direction.
            </summary>
            <param name="type"/>
        </member>
        <member name="M:SadRogue.Primitives.Direction.SetYIncreasesUpwardsUnsafe(System.Boolean)">
            <summary>
            Changes the value of <see cref="P:SadRogue.Primitives.Direction.YIncreasesUpward"/>.  This operation is not safe to perform if another thread may be directly or indirectly using Directions.
            It is intended that this value be set once to match your environment as part of an initialization routine.
            </summary>
            <param name="newValue">New value to assign to <see cref="P:SadRogue.Primitives.Direction.YIncreasesUpward"/>.</param>
        </member>
        <member name="M:SadRogue.Primitives.Direction.GetCardinalDirection(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Returns the cardinal direction that most closely matches the degree heading of the given
            line. Rounds clockwise if the heading is exactly on a diagonal direction. Similar to
            <see cref="M:SadRogue.Primitives.Direction.GetDirection(SadRogue.Primitives.Point,SadRogue.Primitives.Point)"/>, except this function returns only cardinal directions.
            </summary>
            <param name="start">Starting coordinate of the line.</param>
            <param name="end">Ending coordinate of the line.</param>
            <returns>
            The cardinal direction that most closely matches the heading indicated by the given line.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Direction.GetCardinalDirection(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the cardinal direction that most closely matches the degree heading of the given
            line. Rounds clockwise if the heading is exactly on a diagonal direction. Similar to
            <see cref="M:SadRogue.Primitives.Direction.GetDirection(SadRogue.Primitives.Point,SadRogue.Primitives.Point)"/>, except this function returns only cardinal directions.
            </summary>
            <param name="startX">X-value of the starting coordinate of the line.</param>
            <param name="startY">Y-value of the starting coordinate of the line.</param>
            <param name="endX">X-value of the ending coordinate of the line.</param>
            <param name="endY">Y-value of the ending coordinate of the line.</param>
            <returns>
            The cardinal direction that most closely matches the heading indicated by the given line.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Direction.GetCardinalDirection(SadRogue.Primitives.Point)">
            <summary>
            Returns the cardinal direction that most closely matches the degree heading of a line
            with the given delta-change values. Rounds clockwise if exactly on a diagonal. Similar to
            <see cref="M:SadRogue.Primitives.Direction.GetDirection(SadRogue.Primitives.Point)"/>, except this function returns only cardinal directions.
            </summary>
            <param name="deltaChange">
            Vector representing the change in x and change in y across the line (deltaChange.X is the
            change in x, deltaChange.Y is the change in y).
            </param>
            <returns>
            The cardinal direction that most closely matches the degree heading of the given line.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Direction.GetCardinalDirection(System.Int32,System.Int32)">
            <summary>
            Returns the cardinal direction that most closely matches the degree heading of a line
            with the given delta-change values. Rounds clockwise if exactly on a diagonal. Similar to
            <see cref="M:SadRogue.Primitives.Direction.GetDirection(SadRogue.Primitives.Point)"/>, except this function returns only cardinal directions.
            </summary>
            <param name="dx">Change in x along the line.</param>
            <param name="dy">Change in y along the line.</param>
            <returns>
            The cardinal direction that most closely matches the degree heading of the given line.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Direction.GetDirection(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Returns the direction that most closely matches the degree heading of the given line.
            Rounds clockwise if the heading is exactly between two directions.
            </summary>
            <param name="start">Starting coordinate of the line.</param>
            <param name="end">Ending coordinate of the line.</param>
            <returns>
            The direction that most closely matches the heading indicated by the given line.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Direction.GetDirection(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the direction that most closely matches the degree heading of the given line.
            Rounds clockwise if the heading is exactly between two directions.
            </summary>
            <param name="startX">X-value of the starting coordinate of the line.</param>
            <param name="startY">Y-value of the starting coordinate of the line.</param>
            <param name="endX">X-value of the ending coordinate of the line.</param>
            <param name="endY">Y-value of the ending coordinate of the line.</param>
            <returns>
            The direction that most closely matches the heading indicated by the given line.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Direction.GetDirection(SadRogue.Primitives.Point)">
            <summary>
            Returns the direction that most closely matches the degree heading of a line with the
            given delta-change values. Rounds clockwise if the heading is exactly between two directions.
            </summary>
            <param name="deltaChange">
            Vector representing the change in x and change in y across the line (deltaChange.X is the
            change in x, deltaChange.Y is the change in y).
            </param>
            <returns>
            The direction that most closely matches the heading indicated by the given input.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Direction.GetDirection(System.Int32,System.Int32)">
            <summary>
            Returns the direction that most closely matches the degree heading of a line with the
            given delta-change values. Rounds clockwise if the heading is exactly between two directions.
            </summary>
            <param name="dx">Change in x-value across the line.</param>
            <param name="dy">Change in y-value across the line.</param>
            <returns>
            The direction that most closely matches the heading indicated by the given input.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Direction.op_Subtraction(SadRogue.Primitives.Direction,System.Int32)">
            <summary>
            Moves the direction counter-clockwise <paramref name="i"/> times.
            </summary>
            <param name="d"/>
            <param name="i"/>
            <returns>
            The given direction moved counter-clockwise <paramref name="i"/> times.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Direction.op_Decrement(SadRogue.Primitives.Direction)">
            <summary>
            Moves the direction counter-clockwise by one.
            </summary>
            <param name="d"/>
            <returns>The direction one unit counterclockwise of <paramref name="d"/>.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Direction.op_Addition(SadRogue.Primitives.Direction,System.Int32)">
            <summary>
            Moves the direction clockwise <paramref name="i"/> times.
            </summary>
            <param name="d"/>
            <param name="i"/>
            <returns>
            The given direction moved clockwise <paramref name="i"/> times.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Direction.op_Increment(SadRogue.Primitives.Direction)">
            <summary>
            Moves the direction clockwise by one.
            </summary>
            <param name="d"/>
            <returns>The direction one unit clockwise of <paramref name="d"/>.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Direction.IsCardinal">
            <summary>
            Returns true if the current direction is a cardinal direction.
            </summary>
            <returns>True if the current direction is a cardinal direction, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Direction.ToString">
            <summary>
            Writes the string (eg. "UP", "UP_RIGHT", etc.) for the direction.
            </summary>
            <returns>String representation of the direction.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Direction.op_Addition(System.ValueTuple{System.Int32,System.Int32},SadRogue.Primitives.Direction)">
            <summary>
            Translates the given position by one unit in the given direction.
            </summary>
            <param name="tuple"/>
            <param name="d"/>
            <returns>
            Tuple (tuple.y + d.DeltaX, tuple.y + d.DeltaY).
            </returns>
        </member>
        <member name="T:SadRogue.Primitives.Distance">
             <summary>
             Class representing methods of calculating distance on a grid. You cannot create instances of this
             class using a constructor -- instead this class contains static instances representing the
             various distance calculations.
             </summary>
             <remarks>
             Provides functions that calculate the distance between two points according to the distance
             measurement being used. Instances of Distance are also implicitly convertible to both
             <see cref="T:SadRogue.Primitives.Radius"/> and <see cref="T:SadRogue.Primitives.AdjacencyRule"/> (since both a method of determining adjacent
             locations and a radius shape are implied by a distance calculation).
            
             Note that, although this class is abstract, you cannot practically create your own subclasses.
             Each subclass requires an entry in <see cref="T:SadRogue.Primitives.Distance.Types"/> to function properly.  The class is only
             abstract in order to allow an internal implementation which will maximize performance.
             </remarks>
        </member>
        <member name="F:SadRogue.Primitives.Distance.Chebyshev">
            <summary>
            Represents chebyshev distance (equivalent to 8-way movement with no extra cost for diagonals).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Distance.Euclidean">
            <summary>
            Represents euclidean distance (equivalent to 8-way movement with ~1.41 movement cost for diagonals).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Distance.Manhattan">
            <summary>
            Represents manhattan distance (equivalent to 4-way, cardinal-only movement).
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Distance.Type">
            <summary>
            Enum value representing the method of calculating distance -- useful for using
            Distance types in switch statements.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.Distance.#ctor(SadRogue.Primitives.Distance.Types)">
            <summary>
            Creates a new Distance class to represent the distance calculation specified by the type.
            </summary>
            <param name="type"/>
        </member>
        <member name="T:SadRogue.Primitives.Distance.Types">
            <summary>
            Enum representing Distance types. Each Distance instance has a <see cref="P:SadRogue.Primitives.Distance.Type"/> field
            which contains the corresponding value from this enum.  Useful for easy mapping of Distance
            types to a primitive type (for cases like a switch statement).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Distance.Types.Manhattan">
            <summary>
            Enum type for <see cref="F:SadRogue.Primitives.Distance.Manhattan"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Distance.Types.Euclidean">
            <summary>
            Enum type for <see cref="F:SadRogue.Primitives.Distance.Euclidean"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Distance.Types.Chebyshev">
            <summary>
            Enum type for <see cref="F:SadRogue.Primitives.Distance.Chebyshev"/>.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.Distance.op_Implicit(SadRogue.Primitives.Distance)~SadRogue.Primitives.Radius">
            <summary>
            Allows explicit casting to <see cref="T:SadRogue.Primitives.Radius"/> type.
            </summary>
            <remarks>
            The 2D radius shape corresponding to the definition of a radius according to the distance calculation
            given will be returned.
            </remarks>
            <param name="distance"/>
        </member>
        <member name="M:SadRogue.Primitives.Distance.op_Implicit(SadRogue.Primitives.Distance)~SadRogue.Primitives.AdjacencyRule">
            <summary>
            Allows implicit casting to the <see cref="T:SadRogue.Primitives.AdjacencyRule"/> type.
            </summary>
            <remarks>
            The adjacency rule corresponding to the definition of a adjacency according to the
            distance calculation given will be returned.
            </remarks>
            <param name="distance"/>
        </member>
        <member name="M:SadRogue.Primitives.Distance.op_Implicit(SadRogue.Primitives.Distance)~SadRogue.Primitives.Distance.Types">
            <summary>
            Implicitly converts a Distance to its corresponding <see cref="P:SadRogue.Primitives.Distance.Type"/>.
            </summary>
            <param name="distance"/>
        </member>
        <member name="M:SadRogue.Primitives.Distance.op_Implicit(SadRogue.Primitives.Distance.Types)~SadRogue.Primitives.Distance">
            <summary>
            Implicitly converts an <see cref="T:SadRogue.Primitives.Distance.Types"/> enum value to its corresponding Distance.
            </summary>
            <param name="type"/>
        </member>
        <member name="M:SadRogue.Primitives.Distance.Calculate(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Returns the distance between the two (2D) points specified.
            </summary>
            <param name="start">Starting point.</param>
            <param name="end">Ending point.</param>
            <returns>The distance between the two points.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Distance.Calculate(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the distance between the two (2D) points specified.
            </summary>
            <param name="startX">X-Coordinate of the starting point.</param>
            <param name="startY">Y-Coordinate of the starting point.</param>
            <param name="endX">X-Coordinate of the ending point.</param>
            <param name="endY">Y-Coordinate of the ending point.</param>
            <returns>The distance between the two points.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Distance.Calculate(SadRogue.Primitives.Point)">
            <summary>
            Returns the distance between two locations, given the change in X and change in Y value
            (specified by the X and Y values of the given vector).
            </summary>
            <param name="deltaChange">The delta-x and delta-y between the two locations.</param>
            <returns>The distance between two locations withe the given delta-change values.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Distance.Calculate(System.Double,System.Double)">
            <summary>
            Returns the distance between two locations, given the change in X and change in Y value.
            </summary>
            <param name="dx">The delta-x between the two locations.</param>
            <param name="dy">The delta-y between the two locations.</param>
            <returns>The distance between two locations with the given delta-change values.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Distance.GetHashCode">
            <summary>
            Returns a hash-map value for the current object.
            </summary>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.Distance.Matches(SadRogue.Primitives.Distance)">
            <summary>
            True if the given Distance has the same Type the current one.
            </summary>
            <param name="other">Distance to compare.</param>
            <returns>True if the two distance calculation methods are the same, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Distance.ToString">
            <summary>
            Returns a string representation of the distance calculation method represented.
            </summary>
            <returns>A string representation of the distance method represented.</returns>
        </member>
        <member name="T:SadRogue.Primitives.ManhattanDistance">
            <summary>
            Represents manhattan distance (equivalent to 4-way, cardinal-only movement).
            </summary>
            <remarks>
            You can't create instances of this class; instead, use <see cref="F:SadRogue.Primitives.Distance.Manhattan"/>.
            </remarks>
        </member>
        <member name="M:SadRogue.Primitives.ManhattanDistance.Calculate(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="T:SadRogue.Primitives.ChebyshevDistance">
            <summary>
            Represents chebyshev distance (equivalent to 8-way movement with no extra cost for diagonals).
            </summary>
            <remarks>
            You can't create instances of this class; instead, use <see cref="F:SadRogue.Primitives.Distance.Chebyshev"/>.
            </remarks>
        </member>
        <member name="M:SadRogue.Primitives.ChebyshevDistance.Calculate(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="T:SadRogue.Primitives.EuclideanDistance">
            /// <summary>
            Represents euclidean distance (equivalent to 8-way movement with ~1.41 movement cost for diagonals).
            </summary>
            <remarks>
            You can't create instances of this class; instead, use <see cref="F:SadRogue.Primitives.Distance.Chebyshev"/>.
            </remarks>
        </member>
        <member name="M:SadRogue.Primitives.EuclideanDistance.Calculate(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="T:SadRogue.Primitives.GradientStop">
            <summary>
            A gradient stop. Defines a color and where it is located within the gradient.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.GradientStop.Color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.GradientStop.Stop">
            <summary>
            The color stop in the gradient this applies to.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.GradientStop.#ctor(SadRogue.Primitives.Color,System.Single)">
            <summary>
            Creates a new gradient stop.
            </summary>
            <param name="color">The color to use.</param>
            <param name="stop">The position of the stop.</param>
        </member>
        <member name="M:SadRogue.Primitives.GradientStop.op_Equality(SadRogue.Primitives.GradientStop,SadRogue.Primitives.GradientStop)">
            <summary>
            Compares two gradient stops based on their color and stop value.
            </summary>
            <param name="lhs"/>
            <param name="rhs"/>
            <returns>True if the gradients have the same color and stop; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GradientStop.op_Inequality(SadRogue.Primitives.GradientStop,SadRogue.Primitives.GradientStop)">
            <summary>
            Compares two gradient stops based on their color and stop value.
            </summary>
            <param name="lhs"/>
            <param name="rhs"/>
            <returns>True if the gradients have different color or stop values, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GradientStop.GetHashCode">
            <summary>
            Gets a hash code based upon the stop's color and stop values.
            </summary>
            <returns>A hash code based upon the stop's color and stop values.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GradientStop.Equals(System.Object)">
            <summary>
            Returns true if <paramref name="obj"/> is a gradient stop with the same color and stop value.
            </summary>
            <param name="obj"/>
            <returns>True if <paramref name="obj"/> is a gradient stop with the same color and stop value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GradientStop.Equals(SadRogue.Primitives.GradientStop)">
            <summary>
            Compares this gradient stop to the one given.
            </summary>
            <param name="g"/>
            <returns>True if this gradient stop and the specified one have the same color and stop values; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GradientStop.Matches(SadRogue.Primitives.GradientStop)">
            <summary>
            Compares this gradient stop to the one given.
            </summary>
            <param name="other"/>
            <returns>True if this gradient stop and the specified one have the same color and stop values; false otherwise.</returns>
        </member>
        <member name="T:SadRogue.Primitives.Gradient">
            <summary>
            Represents a gradient with multiple color stops.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Gradient.Stops">
            <summary>
            The color stops that define the gradient.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.Gradient.#ctor(System.Collections.Generic.IEnumerable{SadRogue.Primitives.Color},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Creates a new color gradient with the defined colors and stops.
            </summary>
            <param name="colors">The colors with the gradient.</param>
            <param name="stops">The gradient stops where the colors are used.</param>
        </member>
        <member name="M:SadRogue.Primitives.Gradient.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Creates a new color gradient with only two colors, the first at the start, and the second at the end.
            </summary>
            <param name="startingColor">The starting color of the gradient.</param>
            <param name="endingColor">The ending color of the gradient.</param>
        </member>
        <member name="M:SadRogue.Primitives.Gradient.#ctor(SadRogue.Primitives.Color[])">
            <summary>
            Creates a new color gradient, evenly spacing them out. At least one color must be provided.
            </summary>
            <param name="colors">The colors to create a gradient from.</param>
        </member>
        <member name="M:SadRogue.Primitives.Gradient.#ctor(System.Collections.Generic.IEnumerable{SadRogue.Primitives.GradientStop})">
            <summary>
            Creates a new color gradient with the given colors/stops.
            </summary>
            <param name="gradientStops">Stops to include in the gradient.</param>
        </member>
        <member name="M:SadRogue.Primitives.Gradient.GetEnumerator">
            <summary>
            Gets an enumerator with all of the gradient stops.
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:SadRogue.Primitives.Gradient.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator with all of the gradient stops.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Gradient.ToColorArray(System.Int32)">
            <summary>
            Gets an array of colors based from the gradient.
            </summary>
            <param name="count">The amount of colors to produce.</param>
            <returns>An array of colors.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Gradient.Lerp(System.Single)">
            <summary>
            Returns a color from this gradient at the specified lerp value.
            </summary>
            <param name="amount">The lerp amount.</param>
            <returns>A color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Gradient.op_Implicit(SadRogue.Primitives.Color)~SadRogue.Primitives.Gradient">
            <summary>
            Converts a color to a gradient.
            </summary>
            <param name="color" />
        </member>
        <member name="M:SadRogue.Primitives.Gradient.Matches(SadRogue.Primitives.Gradient)">
            <summary>
            Returns true if the given gradients contain precisely the same stops.
            </summary>
            <param name="other"/>
            <returns>True if the given gradients contain precisely the same stops; false otherwise.</returns>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.ArrayView`1">
             <summary>
             Implementation of <see cref="T:SadRogue.Primitives.GridViews.ISettableGridView`1" /> that uses a 1D array to store data.
             </summary>
             <remarks>
             An <see cref="T:SadRogue.Primitives.GridViews.ArrayView`1" /> can be implicitly converted to its underlying 1D array,
             which allows exposing that array to code that works with 1D arrays.  Modifications in the array
             appear in the map view as well.
            
             If you need a 2D array instead of 1D, then you should use <see cref="T:SadRogue.Primitives.GridViews.ArrayView2D`1" /> instead.
             </remarks>
             <typeparam name="T">The type of value being stored.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor. Takes width and height of array to create.
            </summary>
            <param name="width">Width of array.</param>
            <param name="height">Height of array.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView`1.#ctor(`0[],System.Int32)">
            <summary>
            Constructor.  Takes an existing 1D array to use as the underlying array, and
            the width of the 2D grid represented by that array.
            </summary>
            <param name="existingArray">Existing 1D array to use as the underlying array.</param>
            <param name="width">The width of the 2D grid represented by <paramref name="existingArray" />.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView`1.Clone">
            <summary>
            Performs deep copy of array view.
            </summary>
            <returns>The cloned ArrayView.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView`1.Matches(SadRogue.Primitives.GridViews.ArrayView{`0})">
            <summary>
            Compares the current ArrayView to the one given.
            </summary>
            <param name="other" />
            <returns>True if the given ArrayView&lt;T&gt; references the same underlying array, false otherwise.</returns>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.ArrayView`1.Height">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.ArrayView`1.Width">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.ArrayView`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView`1.op_Implicit(SadRogue.Primitives.GridViews.ArrayView{`0})~`0[]">
            <summary>
            Allows implicit conversion to 1D array.  Does not copy the underlying values.
            </summary>
            <param name="arrayView">ArrayView to convert.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView`1.ToArray">
            <summary>
            Converts to 1D array, without copying the values.  Typically using this method is unnecessary
            and you can use the implicit conversion defined for this type instead.
            </summary>
            <returns>The underlying ArrayView data as a 1D array.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView`1.ToString">
            <summary>
            Returns a string representation of the grid values.
            </summary>
            <returns>A string representation of the grid values.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView`1.ToString(System.Func{`0,System.String})">
            <summary>
            Returns a string representation of the grid values, using <paramref name="elementStringifier" />
            to determine what string represents each value.
            </summary>
            <param name="elementStringifier">
            Function determining the string representation of each value.
            </param>
            <returns>A string representation of the grid values.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView`1.ToString(System.Int32,System.Func{`0,System.String})">
            <summary>
            Returns a string representation of the grid values using the given parameters.
            </summary>
            <remarks>
            Each element will have spaces added to cause it to take up exactly
            <paramref name="fieldSize" /> characters, provided <paramref name="fieldSize" />
            is less than the length of the value's string representation.
            </remarks>
            <param name="fieldSize">
            The size of the field to give each value.  A positive-number
            right-aligns the text within the field, while a negative number left-aligns the text.
            </param>
            <param name="elementStringifier">
            Function to use to convert each value to a string. null defaults to the ToString
            function of type T.
            </param>
            <returns>A string representation of the grid values.</returns>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.ArrayView2D`1">
             <summary>
             Implementation of <see cref="T:SadRogue.Primitives.GridViews.ISettableGridView`1" /> that uses a 2D array to store data.
             </summary>
             <remarks>
             An <see cref="T:SadRogue.Primitives.GridViews.ArrayView2D`1" /> can be implicitly converted to its underlying 2D array,
             which allows exposing that array to code that works with 2D arrays.  Modifications in the array
             appear in the map view as well.
            
             If you need a 1D array instead of 2D, then you should use <see cref="T:SadRogue.Primitives.GridViews.ArrayView`1" /> instead.
             </remarks>
             <typeparam name="T">The type of value being stored.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView2D`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor. Takes width and height of array to create.
            </summary>
            <param name="width">Width of array.</param>
            <param name="height">Height of array.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView2D`1.#ctor(`0[0:,0:])">
            <summary>
            Constructor.  Takes an existing 2D array to use as the underlying data structure.
            </summary>
            <param name="existingArray">An existing 2D array to use as the data structure.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView2D`1.Clone">
            <summary>
            Performs deep copy of array view.
            </summary>
            <returns>The cloned ArrayView2D.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView2D`1.Matches(SadRogue.Primitives.GridViews.ArrayView2D{`0})">
            <summary>
            Compares the current ArrayView2D to the one given.
            </summary>
            <param name="other" />
            <returns>True if the given ArrayView2D&lt;T&gt; with a reference to the same underlying array, false otherwise.</returns>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.ArrayView2D`1.Height">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.ArrayView2D`1.Width">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.ArrayView2D`1.Item(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView2D`1.op_Implicit(SadRogue.Primitives.GridViews.ArrayView2D{`0})~`0[0:,0:]">
            <summary>
            Allows implicit conversion to 2D array.  Does not copy the underlying values.
            </summary>
            <param name="arrayView">The ArrayView2D to convert.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView2D`1.op_Implicit(`0[0:,0:])~SadRogue.Primitives.GridViews.ArrayView2D{`0}">
            <summary>
            Allows implicit conversion from 2D array.  Does not copy the underlying values.
            </summary>
            <param name="array"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView2D`1.ToMultidimensionalArray">
            <summary>
            Converts to 2D array, without copying the values.  Typically using this method is unnecessary
            and you can use the implicit conversion defined for this type instead.
            </summary>
            <returns>The underlying ArrayView data as a 1D array.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView2D`1.FromMultidimensionalArray(`0[0:,0:])">
            <summary>
            Converts from 2D array, without copying the values.  Typically using this method is unnecessary and you
            can use the implicit conversion defined for this type instead.
            </summary>
            <param name="array"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView2D`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView2D`1.ToString">
            <summary>
            Returns a string representation of the grid values.
            </summary>
            <returns>A string representation of the grid values.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView2D`1.ToString(System.Func{`0,System.String})">
            <summary>
            Returns a string representation of the grid values, using <paramref name="elementStringifier" />
            to determine what string represents each value.
            </summary>
            <param name="elementStringifier">
            Function determining the string representation of each value.
            </param>
            <returns>A string representation of the 2D array.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ArrayView2D`1.ToString(System.Int32,System.Func{`0,System.String})">
            <summary>
            Returns a string representation of the grid values using the given parameters.
            </summary>
            <remarks>
            Each element will have spaces added to cause it to take up exactly
            <paramref name="fieldSize" /> characters, provided <paramref name="fieldSize" />
            is less than the length of the value's string representation.
            </remarks>
            <param name="fieldSize">
            The size of the field to give each value.  A positive-number
            right-aligns the text within the field, while a negative number left-aligns the text.
            </param>
            <param name="elementStringifier">
            Function to use to convert each value to a string. null defaults to the ToString
            function of type T.
            </param>
            <returns>A string representation of the grid values.</returns>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.BitArrayView">
            <summary>
            A grid view that wraps a C# BitArray into a settable grid view of boolean values.
            </summary>
            <remarks>
            This grid view con be useful to represent a region or area of a 2d grid where points are either "on" or "off".
            HashSet&lt;Point&gt; can work for this purpose, but hashing can be slow.  bool[] or ArrayView&lt;bool&gt;
            are other options, but this class uses approximately 8x less memory than those options, and is only very slightly
            slower (less than 0.5ns) in terms of index access.  The Fill operation is actually much faster than the
            corresponding operation for a boolean array, which can make it a very useful alternative as a "visited" array
            when iterating over a grid.
            </remarks>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.BitArrayView.Height">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.BitArrayView.Width">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.BitArrayView.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.GridViews.BitArrayView.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor. Takes width and height of array to create.
            </summary>
            <param name="width">Width of array.</param>
            <param name="height">Height of array.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.BitArrayView.#ctor(System.Collections.BitArray,System.Int32)">
            <summary>
            Constructor.  Takes an existing 1D array to use as the underlying array, and
            the width of the 2D grid represented by that array.
            </summary>
            <param name="existingArray">Existing 1D array to use as the underlying array.</param>
            <param name="width">The width of the 2D grid represented by <paramref name="existingArray" />.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.BitArrayView.Clone">
            <summary>
            Performs deep copy of bit-array view.
            </summary>
            <returns>The cloned BitArrayView.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.BitArrayView.Matches(SadRogue.Primitives.GridViews.BitArrayView)">
            <summary>
            Compares the current BitArrayView to the one given.
            </summary>
            <param name="other" />
            <returns>True if the given BitArrayView references the same underlying bit-array, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.BitArrayView.op_Implicit(SadRogue.Primitives.GridViews.BitArrayView)~System.Collections.BitArray">
            <summary>
            Allows implicit conversion to BitArray.  Does not copy the underlying values.
            </summary>
            <param name="arrayView">BitArrayView to convert.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.BitArrayView.ToBitArray">
            <summary>
            Converts to BitArray, without copying the values.  Typically using this method is unnecessary
            and you can use the implicit conversion defined for this type instead.
            </summary>
            <returns>The underlying BitArray data as a 1D array.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.BitArrayView.Fill(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.BitArrayView.ToString">
            <summary>
            Returns a string representation of the grid values.
            </summary>
            <returns>A string representation of the grid values.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.BitArrayView.ToString(System.Func{System.Boolean,System.String})">
            <summary>
            Returns a string representation of the grid values, using <paramref name="elementStringifier" />
            to determine what string represents each value.
            </summary>
            <param name="elementStringifier">
            Function determining the string representation of each value.
            </param>
            <returns>A string representation of the grid values.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.BitArrayView.ToString(System.Int32,System.Func{System.Boolean,System.String})">
            <summary>
            Returns a string representation of the grid values using the given parameters.
            </summary>
            <remarks>
            Each element will have spaces added to cause it to take up exactly
            <paramref name="fieldSize" /> characters, provided <paramref name="fieldSize" />
            is less than the length of the value's string representation.
            </remarks>
            <param name="fieldSize">
            The size of the field to give each value.  A positive-number
            right-aligns the text within the field, while a negative number left-aligns the text.
            </param>
            <param name="elementStringifier">
            Function to use to convert each value to a string. null defaults to the ToString
            function of type T.
            </param>
            <returns>A string representation of the grid values.</returns>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.ValueChange`1">
            <summary>
            Records a value change in a diff as recorded by a <see cref="T:SadRogue.Primitives.GridViews.DiffAwareGridView`1"/>.
            </summary>
            <typeparam name="T">Type of value being changed.</typeparam>
        </member>
        <member name="F:SadRogue.Primitives.GridViews.ValueChange`1.Position">
            <summary>
            Position whose value was changed.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.GridViews.ValueChange`1.OldValue">
            <summary>
            Original value that was changed.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.GridViews.ValueChange`1.NewValue">
            <summary>
            New value that was set.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ValueChange`1.#ctor(SadRogue.Primitives.Point,`0,`0)">
            <summary>
            Creates a new value change record.
            </summary>
            <param name="position">Position whose value was changed.</param>
            <param name="oldValue">Original value that was changed.</param>
            <param name="newValue">New value that was set.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ValueChange`1.Equals(SadRogue.Primitives.GridViews.ValueChange{`0})">
            <summary>
            Compares the two changes according to their positions and values.
            </summary>
            <param name="other"/>
            <returns>True if the two value changes represent the same change, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ValueChange`1.Matches(SadRogue.Primitives.GridViews.ValueChange{`0})">
            <summary>
            Compares the two changes according to their positions and values.
            </summary>
            <param name="other"/>
            <returns>True if the two value changes represent the same change, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ValueChange`1.Equals(System.Object)">
            <summary>
            Compares the two changes according to their types, positions and values.
            </summary>
            <param name="obj"/>
            <returns>True if the two value changes represent the same object and change, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ValueChange`1.GetHashCode">
            <summary>
            Returns a hash value computed using the item's position, old value, and new value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ValueChange`1.op_Equality(SadRogue.Primitives.GridViews.ValueChange{`0},SadRogue.Primitives.GridViews.ValueChange{`0})">
            <summary>
            Tests the two changes by their fields for equality.
            </summary>
            <param name="left"/>
            <param name="right"/>
            <returns>True if all the changes are equivalent; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ValueChange`1.op_Inequality(SadRogue.Primitives.GridViews.ValueChange{`0},SadRogue.Primitives.GridViews.ValueChange{`0})">
            <summary>
            Tests the two changes by their fields for inequality.
            </summary>
            <param name="left"/>
            <param name="right"/>
            <returns>True if all the changes are equivalent; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ValueChange`1.ToString">
            <summary>
            Returns a string representing the object, including its position, old value, and new value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.Diff`1">
            <summary>
            Represents a unique patch/diff of the state of a <see cref="T:SadRogue.Primitives.GridViews.DiffAwareGridView`1"/>.
            </summary>
            <typeparam name="T">Type of value stored in the grid view.</typeparam>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.Diff`1.Changes">
            <summary>
            Read-only list of changes made in this time step.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.Diff`1.IsFinalized">
            <summary>
            Whether or not the list of changes in this diff has been finalized, eg allows more changes to be added.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.Diff`1.#ctor">
            <summary>
            Creates a new empty diff.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.Diff`1.#ctor(System.Collections.Generic.IEnumerable{SadRogue.Primitives.GridViews.ValueChange{`0}})">
            <summary>
            Creates a diff composed of the specified changes.
            </summary>
            <param name="changes">Changes to create a diff from.</param>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.Diff`1.IsCompressed">
            <summary>
            Whether or not the diff is currently known to be at the minimal possible size.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.Diff`1.Add(SadRogue.Primitives.GridViews.ValueChange{`0})">
            <summary>
            Adds a change to the diff.
            </summary>
            <param name="change">Change to add.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.Diff`1.FinalizeChanges">
            <summary>
            Finalizes the current diff, such that no changes are allowed to be added to it.  It can still be compressed.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.Diff`1.Compress">
            <summary>
            Reduces the diff to the minimum possible changes to achieve the resulting values by removing duplicate
            positions from the change list.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.Diff`1.GetEnumerator">
            <summary>
            Returns an enumerator of the changes in the diff.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.Diff`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator of the changes in the diff.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.DiffAwareGridView`1">
            <summary>
            A grid view wrapper useful for recording diffs (change-sets) of changes to a grid view, and applying/removing
            those change-sets of values from the grid view.  Only works with grid views of value types.
            </summary>
            <remarks>
            Generally, this class is useful with values types/primitive types wherein values are completely replaced when
            they are modified.  It allows applying a series of change sets in forward or reverse order; and as such
            can be extremely useful for debugging or situations where you want to record intermediate states of an
            algorithm.
            </remarks>
            <typeparam name="T">Type of value in the grid view.  Must be a value type.</typeparam>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.DiffAwareGridView`1.BaseGrid">
            <summary>
            The grid view whose changes are being recorded in diffs.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.DiffAwareGridView`1.Height">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.DiffAwareGridView`1.Width">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.DiffAwareGridView`1.Item(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.DiffAwareGridView`1.CurrentDiffIndex">
            <summary>
            The index of the diff whose ending state is currently reflected in <see cref="P:SadRogue.Primitives.GridViews.DiffAwareGridView`1.BaseGrid"/>. Returns -1
            if none of the diffs in the list have been applied (eg. the grid view is in the state it was in at the
            <see cref="T:SadRogue.Primitives.GridViews.DiffAwareGridView`1"/>'s creation.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.DiffAwareGridView`1.Diffs">
            <summary>
            All diffs recorded for the current grid view, and their changes.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.GridViews.DiffAwareGridView`1.AutoCompress">
            <summary>
            Whether or not to automatically compress diffs when the currently applied diff is changed.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.DiffAwareGridView`1.#ctor(SadRogue.Primitives.GridViews.ISettableGridView{`0},System.Boolean)">
            <summary>
            Constructs a diff-aware grid view that wraps around an existing grid view.
            </summary>
            <param name="baseGrid">The grid view whose changes are to be recorded in diffs.</param>
            <param name="autoCompress">
            Whether or not to automatically compress diffs when the currently applied diff is changed.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.DiffAwareGridView`1.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a diff-aware grid view, whose base grid will be a new <see cref="T:SadRogue.Primitives.GridViews.ArrayView`1"/>.
            </summary>
            <param name="width">Width of the base grid view that will be created.</param>
            <param name="height">Height of the base grid view that will be created.</param>
            <param name="autoCompress">
            Whether or not to automatically compress diffs when the currently applied diff is changed.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.DiffAwareGridView`1.SetBaseline(SadRogue.Primitives.GridViews.IGridView{`0})">
            <summary>
            Sets the baseline values (eg. values before any diffs are recorded) to the values from the given grid view.
            Only valid to do before any diffs are recorded.
            </summary>
            <param name="baseline">Baseline values to use.  Must have same width/height as <see cref="P:SadRogue.Primitives.GridViews.DiffAwareGridView`1.BaseGrid"/>.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.DiffAwareGridView`1.ApplyNextDiff">
            <summary>
            Applies the next recorded diff, or throws exception if there is no future diffs recorded.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.DiffAwareGridView`1.RevertToPreviousDiff">
            <summary>
            Reverts the current diff's changes, so that the grid view will be in the state it was in at the end
            of the previous diff.  Throws exception if no diffs are applied.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.DiffAwareGridView`1.FinalizeCurrentDiff">
            <summary>
            Finalizes the current diff so that no more changes can be added to it; future changes will create a new
            diff.  Throws exceptions if there are diffs that are not currently applied.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.DiffAwareGridView`1.ApplyNextDiffOrFinalize">
            <summary>
            Convenience method that calls <see cref="M:SadRogue.Primitives.GridViews.DiffAwareGridView`1.ApplyNextDiff"/> if there are existing diffs to apply, and
            <see cref="M:SadRogue.Primitives.GridViews.DiffAwareGridView`1.FinalizeCurrentDiff"/> if there are no existing diffs to apply.  Returns whether or not an
            existing diff was applied.
            </summary>
            <returns>True if an existing diff is applied, false if a new one was created.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.DiffAwareGridView`1.ClearHistory">
            <summary>
            Erase recorded diffs without modifying state of grid view.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.DiffAwareGridView`1.SetHistory(System.Collections.Generic.IEnumerable{SadRogue.Primitives.GridViews.Diff{`0}})">
            <summary>
            Overwrite any history present and replace it with the history given.  This does not modify the underlying
            grid view; the history must be valid with respect to its current state.
            </summary>
            <remarks>
            Generally, you will not call this function, however it can be useful for serialization and copying
            histories between objects.  Assumes the grid view is in a state that reflects all of the diffs in the
            history being applied.
            </remarks>
            <param name="history">The history to apply.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.DiffAwareGridView`1.SetHistory(System.Collections.Generic.IEnumerable{SadRogue.Primitives.GridViews.Diff{`0}},System.Int32)">
            <summary>
            Overwrite any history present and replace it with the history given.  This does not modify the underlying
            grid view; the history must be valid with respect to its current state.
            </summary>
            <remarks>
            Generally, you will not call this function, however it can be useful for serialization and copying
            histories between objects.
            </remarks>
            <param name="history">The history to apply.</param>
            <param name="currentIndex">The index of the given history that is applied to the <see cref="P:SadRogue.Primitives.GridViews.DiffAwareGridView`1.BaseGrid"/>.
            Set to the length of the list - 1 if all diffs have been applied, or -1 if none of them have.</param>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.GridView1DIndexBase`1">
            <summary>
            Exactly like <see cref="T:SadRogue.Primitives.GridViews.GridViewBase`1"/>, except for the one indexer left to the user to implement
            is the one which takes a 1D array, and the position-based indexers are implemented off that.
            </summary>
            <remarks>
            This can be more convenient than <see cref="T:SadRogue.Primitives.GridViews.GridViewBase`1"/> for use cases where 1D indices are easiest
            to work with, and is technically more efficient for cases such as wrapping a 1D array, where the backing data
            structure takes an index (although this should typically be considered a micro-optimization).
            </remarks>
            <typeparam name="T">The type of value being stored.</typeparam>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.GridView1DIndexBase`1.Height">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.GridView1DIndexBase`1.Width">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.GridView1DIndexBase`1.Item(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.GridView1DIndexBase`1.Count">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.GridView1DIndexBase`1.Item(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.GridView1DIndexBase`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:SadRogue.Primitives.GridViews.GridViewBase`1">
            <summary>
            A convenient base class to inherit from when implementing <see cref="T:SadRogue.Primitives.GridViews.IGridView`1"/> that minimizes
            the number of items you must implement by implementing indexers in terms of a single indexer taking a Point.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.GridViewBase`1.Height">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.GridViewBase`1.Width">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.GridViewBase`1.Item(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.GridViewBase`1.Count">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.GridViewBase`1.Item(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.GridViewBase`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:SadRogue.Primitives.GridViews.IGridView`1">
             <summary>
             Interface designed to act as a standardized input/output format that defines minimal required data
             for algorithms that operate on a grid of some sort.  For a concrete implementation to subclass for custom
             implementations, see <see cref="T:SadRogue.Primitives.GridViews.GridViewBase`1"/>.
             </summary>
             <remarks>
             Many algorithms that operate on a grid need only some very basic information about each location in the grid
             to function.  For example, a basic grid-based pathfinding algorithm might only need to know whether each
             location can be traversed or not, which can be represented by a single boolean value per location.  A renderer
             might want to know simple rendering information for each location, which might be wrapped in a class or
             structure.
            
             One option for creating these algorithms would be to take as input arrays of the type they need.  For example,
             the pathing algorithm might take an array of boolean values as input.  However, this can be quite inflexible.
             The values that algorithms need to function might be determined based on a much more complex structure than a
             simple array of the precise type it needs, depending on use case.  Taking an array as input in these cases
             forces a user to either adapt their data structure to the one that the algorithm uses, or maintain multiple
             "copies" of their data in the format that the algorithms need.
            
             <see cref="T:SadRogue.Primitives.GridViews.IGridView`1"/> is designed to act as a much more flexible input/output format for algorithms
             like this that operate on a grid.  The interface simply defines properties for width and height, and some
             basic abstract indexers that allow accessing the "object" at each location.  In the examples from above,
             the basic pathfinding algorithm might take as input an IGridView&lt;bool&gt;, whereas the renderer might take
             IGridView&lt;RenderingInfo&gt;.  This allows the algorithms to operate on the minimal data that they need
             to function, but allows a user to define where that data comes from.  For common cases, concrete implementations
             are provided that make the interface easier to use; for example, <see cref="T:SadRogue.Primitives.GridViews.ArrayView`1"/> defines the
             interface such that the data comes from an array, and <see cref="T:SadRogue.Primitives.GridViews.LambdaGridView`1"/> defines the interface
             such that an arbitrary callback is used to retrieve the data.
             </remarks>
             <typeparam name="T">The type of value being returned by the indexer functions.</typeparam>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.IGridView`1.Height">
            <summary>
            The height of the grid being represented.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.IGridView`1.Width">
            <summary>
            The width of the grid being represented.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.IGridView`1.Count">
            <summary>
            Number of tiles in the grid; equal to <see cref="P:SadRogue.Primitives.GridViews.IGridView`1.Width"/> * <see cref="P:SadRogue.Primitives.GridViews.IGridView`1.Height"/>.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.IGridView`1.Item(System.Int32,System.Int32)">
            <summary>
            Given an X and Y value, returns the "value" associated with that location.
            </summary>
            <remarks>
            Typically, this can be implemented via <see cref="P:SadRogue.Primitives.GridViews.IGridView`1.Item(SadRogue.Primitives.Point)"/>.
            </remarks>
            <param name="x">X-value of location.</param>
            <param name="y">Y-value of location.</param>
            <returns>The "value" associated with that location.</returns>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.IGridView`1.Item(SadRogue.Primitives.Point)">
            <summary>
            Given a position, returns the "value" associated with that location.
            </summary>
            <param name="pos">Location to retrieve the value for.</param>
            <returns>The "value" associated with the provided location.</returns>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.IGridView`1.Item(System.Int32)">
            <summary>
            Given an 1-dimensional index, returns the value associated with the corresponding position
            in the map view.
            </summary>
            <remarks>
            Typically, this may be implemented in terms of <see cref="P:SadRogue.Primitives.GridViews.IGridView`1.Item(SadRogue.Primitives.Point)" /> by using
            <see cref="M:SadRogue.Primitives.Point.FromIndex(System.Int32,System.Int32)" /> to calculate the 2D position represented by that
            1D index, and passing that position to the <see cref="P:SadRogue.Primitives.GridViews.IGridView`1.Item(SadRogue.Primitives.Point)" /> indexer to determine
            the value associated with the position.
            </remarks>
            <param name="index1D">1D index of location to retrieve the "value" for.</param>
            <returns>The "value" associated with the given location.</returns>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.GridViewExtensions">
            <summary>
            Extensions for <see cref="T:SadRogue.Primitives.GridViews.IGridView`1" /> implementations that provide basic utility functions
            for them.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.GridViewExtensions.ApplyOverlay``1(SadRogue.Primitives.GridViews.ISettableGridView{``0},SadRogue.Primitives.GridViews.IGridView{``0})">
            <summary>
            Sets all the values of the current grid view to be equal to the corresponding values from
            the grid view you pass in.
            </summary>
            <typeparam name="T" />
            <param name="self" />
            <param name="overlay">
            The data apply to the view. Must have identical dimensions to the current view.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.GridViewExtensions.ApplyOverlay``1(SadRogue.Primitives.GridViews.ISettableGridView{``0},System.Func{SadRogue.Primitives.Point,``0})">
            <summary>
            Sets the values for each location of the current grid view to be equal to the value returned from the given
            function when given that position.
            </summary>
            <typeparam name="T" />
            <param name="self" />
            <param name="valueFunc">
            Function returning data for each location in the grid view.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.GridViewExtensions.Bounds``1(SadRogue.Primitives.GridViews.IGridView{``0})">
            <summary>
            Gets a rectangle representing the bounds of the current grid view.
            </summary>
            <typeparam name="T" />
            <param name="gridView" />
            <returns>A rectangle representing the grid view's bounds.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.GridViewExtensions.Contains``1(SadRogue.Primitives.GridViews.IGridView{``0},System.Int32,System.Int32)">
            <summary>
            Returns whether or not the given position is contained within the current grid view or not.
            </summary>
            <typeparam name="T" />
            <param name="gridView" />
            <param name="x">X-value of the position to check.</param>
            <param name="y">Y-value of the position to check.</param>
            <returns>True if the given position is contained within this grid view, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.GridViewExtensions.Contains``1(SadRogue.Primitives.GridViews.IGridView{``0},SadRogue.Primitives.Point)">
            <summary>
            Returns whether or not the given position is contained within the current grid view or not.
            </summary>
            <typeparam name="T" />
            <param name="gridView" />
            <param name="position">The position to check.</param>
            <returns>True if the given position is contained within this grid view, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.GridViewExtensions.ExtendToString``1(SadRogue.Primitives.GridViews.IGridView{``0},System.String,System.String,System.Func{``0,System.String},System.String,System.String,System.String,System.String)">
            <summary>
            Allows stringifying the contents of a grid view. Takes characters to surround the grid view printout, and
            each row, the method used to get the string representation of each element (defaulting to the ToString
            function of type T), and separation characters for each element and row.
            </summary>
            <typeparam name="T" />
            <param name="gridView" />
            <param name="begin">Character(s) that should precede the IGridView printout.</param>
            <param name="beginRow">Character(s) that should precede each row.</param>
            <param name="elementStringifier">
            Function to use to get the string representation of each value. null uses the ToString
            function of type T.
            </param>
            <param name="rowSeparator">Character(s) to separate each row from the next.</param>
            <param name="elementSeparator">Character(s) to separate each element from the next.</param>
            <param name="endRow">Character(s) that should follow each row.</param>
            <param name="end">Character(s) that should follow the IGridView printout.</param>
            <returns>A string representation of the values in the grid view.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.GridViewExtensions.ExtendToString``1(SadRogue.Primitives.GridViews.IGridView{``0},System.Int32,System.String,System.String,System.Func{``0,System.String},System.String,System.String,System.String,System.String)">
            <summary>
            Allows stringifying the contents of a grid view. Takes characters to surround the grid view representation,
            and each row, the method used to get the string representation of each element (defaulting to the ToString
            function of type T), and separation characters for each element and row. Takes the size of the field to
            give each element, characters to surround the GridView printout, and each row, the method used to get the
            string representation of each element (defaulting to the ToString function of type T), and separation
            characters for each element and row.
            </summary>
            <typeparam name="T" />
            <param name="gridView" />
            <param name="fieldSize">
            The amount of space each element should take up in characters. A positive number aligns
            the text to the right of the space, while a negative number aligns the text to the left.
            </param>
            <param name="begin">Character(s) that should precede the IGridView printout.</param>
            <param name="beginRow">Character(s) that should precede each row.</param>
            <param name="elementStringifier">
            Function to use to get the string representation of each value. Null uses the ToString
            function of type T.
            </param>
            <param name="rowSeparator">Character(s) to separate each row from the next.</param>
            <param name="elementSeparator">Character(s) to separate each element from the next.</param>
            <param name="endRow">Character(s) that should follow each row.</param>
            <param name="end">Character(s) that should follow the IGridView printout.</param>
            <returns>A string representation of the grid view.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.GridViewExtensions.Positions``1(SadRogue.Primitives.GridViews.IGridView{``0})">
            <summary>
            Iterates through each position in the grid view.
            </summary>
            <typeparam name="T" />
            <param name="gridView" />
            <returns>All positions in the IGridView.</returns>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.ISettableGridView`1">
             <summary>
             Interface designed to act as a standardized input/output format that defines minimal required data
             for algorithms that operate and make changes to a grid of some sort.  For a concrete implementation to subclass
             for custom implementations, see <see cref="T:SadRogue.Primitives.GridViews.SettableGridViewBase`1"/>.
             </summary>
             <remarks>
             See <see cref="T:SadRogue.Primitives.GridViews.IGridView`1" />. This interface serves the same purpose, but for cases when it is also
             necessary for an algorithm to be able to change the value at each location.
            
             Like IGridView, a number of implementations of this interface to cover common needs are provided.  For example,
             <see cref="T:SadRogue.Primitives.GridViews.ArrayView`1"/> defines the interface such that the data is retrieved from and set to an array, and
             <see cref="T:SadRogue.Primitives.GridViews.LambdaSettableGridView`1"/> defines the interface such that arbitrary callbacks are used to retrieve
             and set the data.
             </remarks>
             <typeparam name="T">The type of value being returned/set by the indexer functions.</typeparam>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.ISettableGridView`1.Item(System.Int32,System.Int32)">
            <summary>
            Given an X and Y value, returns/sets the "value" associated with that location.
            </summary>
            <remarks>
            Typically, this can be implemented via <see cref="P:SadRogue.Primitives.GridViews.ISettableGridView`1.Item(SadRogue.Primitives.Point)"/>.
            </remarks>
            <param name="x">X-value of location.</param>
            <param name="y">Y-value of location.</param>
            <returns>The "value" associated with that location.</returns>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.ISettableGridView`1.Item(SadRogue.Primitives.Point)">
            <summary>
            Given a position, returns/sets the "value" associated with that location.
            </summary>
            <param name="pos">Location to get/set the value for.</param>
            <returns>The "value" associated with the provided location.</returns>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.ISettableGridView`1.Item(System.Int32)">
            <summary>
            Given an 1-dimensional index, returns/sets the value associated with the corresponding position
            in the map view.
            </summary>
            <remarks>
            Typically, this may be implemented in terms of <see cref="P:SadRogue.Primitives.GridViews.ISettableGridView`1.Item(SadRogue.Primitives.Point)" /> by using
            <see cref="M:SadRogue.Primitives.Point.FromIndex(System.Int32,System.Int32)" /> to calculate the 2D position represented by that
            1D index, and passing that position to the <see cref="P:SadRogue.Primitives.GridViews.ISettableGridView`1.Item(SadRogue.Primitives.Point)" /> indexer to get/set
            the value associated with the position.
            </remarks>
            <param name="index1D">1D index of location to get/set the "value" for.</param>
            <returns>The "value" associated with the given location.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ISettableGridView`1.Fill(`0)">
            <summary>
            Sets every location within the grid view to the given value.
            </summary>
            <param name="value">Value to set to all locations in the grid view.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.ISettableGridView`1.Clear">
            <summary>
            Sets every location within the grid view to the default value for the type.
            </summary>
            <remarks>
            This function can sometimes be implemented more efficiently than Fill(default), so it is provided as an interface function to enable dispatching.
            
            Remember the default value of a non-nullable type is null for reference types; so use with caution if your element type is non-nullable!
            </remarks>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.LambdaGridView`1">
            <summary>
            Class implementing <see cref="T:SadRogue.Primitives.GridViews.IGridView`1"/>, by providing the "get" functionality via a function that is
            passed in at construction.  For a version that implements <see cref="T:SadRogue.Primitives.GridViews.ISettableGridView`1" />, see
            <see cref="T:SadRogue.Primitives.GridViews.LambdaSettableGridView`1" />.
            </summary>
            <typeparam name="T">The type of value being returned by the indexer functions.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.LambdaGridView`1.#ctor(System.Int32,System.Int32,System.Func{SadRogue.Primitives.Point,`0})">
            <summary>
            Constructor. Takes the width and height of the grid, and the function to use to retrieve
            the value for a location.
            </summary>
            <remarks>
            This constructor is useful if the width and height of the underlying representation do
            not change, so they can safely be passed in as constants.
            </remarks>
            <param name="width">The (constant) width of the map.</param>
            <param name="height">The (constant) height of the map.</param>
            <param name="valueGetter">
            A lambda/function that returns the value of type T associated with the location it is given.
            This function is called each time the grid view's indexers are called upon to retrieve a value
            from a location.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.LambdaGridView`1.#ctor(System.Func{System.Int32},System.Func{System.Int32},System.Func{SadRogue.Primitives.Point,`0})">
            <summary>
            Constructor. Takes functions that retrieve the width and height of the grid, and the
            function used to retrieve the value for a location.
            </summary>
            <remarks>
            This constructor is useful if the width and height of the grid being represented may
            change -- one can provide lambdas/functions that retrieve the width and height of the grid being
            represented, and these functions will be called any time the <see cref="P:SadRogue.Primitives.GridViews.LambdaGridView`1.Width" /> and <see cref="P:SadRogue.Primitives.GridViews.LambdaGridView`1.Height" />
            properties are retrieved.
            </remarks>
            <param name="widthGetter">
            A function/lambda that retrieves the width of the grid being represented.
            </param>
            <param name="heightGetter">
            A function/lambda that retrieves the height of the grid being represented.
            </param>
            <param name="valueGetter">
            A function/lambda that returns the value of type T associated with the location it is given.
            </param>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.LambdaGridView`1.Height">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.LambdaGridView`1.Width">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.LambdaGridView`1.Item(SadRogue.Primitives.Point)">
            <summary>
            Given a position, returns the "value" associated with that position, by calling the
            valueGetter function provided at construction.
            </summary>
            <param name="pos">Location to retrieve the value for.</param>
            <returns>
            The "value" associated with the provided location, according to the valueGetter function
            provided at construction.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.LambdaGridView`1.ToString">
            <summary>
            Returns a string representation of the grid view's values.
            </summary>
            <returns>A string representation of the map view.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.LambdaGridView`1.ToString(System.Func{`0,System.String})">
            <summary>
            Returns a string representation of the grid view's values, using <paramref name="elementStringifier" />
            to determine what string represents each value.
            </summary>
            <param name="elementStringifier">
            Function determining the string representation of each element.
            </param>
            <returns>A string representation of the grid view's values.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.LambdaGridView`1.ToString(System.Int32,System.Func{`0,System.String})">
            <summary>
            Returns a string representing the grid view's values, using the function specified to turn elements into
            strings, and using the "field length" specified.
            </summary>
            <remarks>
            Each element of type T will have spaces added to cause it to take up exactly
            <paramref name="fieldSize" /> characters, provided <paramref name="fieldSize" />
            is less than the length of the element's string representation.
            </remarks>
            <param name="fieldSize">
            The size of the field to give each value.  A positive-number
            right-aligns the text within the field, while a negative number left-aligns the text.
            </param>
            <param name="elementStringifier">
            Function to use to convert each element to a string. null defaults to the ToString
            function of type T.
            </param>
            <returns>A string representation of the grid view's values.</returns>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.LambdaSettableGridView`1">
            <summary>
            Class implementing <see cref="T:SadRogue.Primitives.GridViews.ISettableGridView`1"/>, by providing the "get" and "set" functionality via
            functions that are passed in at construction.  For a version that implements <see cref="T:SadRogue.Primitives.GridViews.IGridView`1" />, see
            <see cref="T:SadRogue.Primitives.GridViews.LambdaGridView`1" />.
            </summary>
            <typeparam name="T">The type of value being returned by the indexer functions.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.LambdaSettableGridView`1.#ctor(System.Int32,System.Int32,System.Func{SadRogue.Primitives.Point,`0},System.Action{SadRogue.Primitives.Point,`0})">
            <summary>
            Constructor. Takes the width and height of the grid, and the functions to use to
            retrieve/set the value for a location.
            </summary>
            <remarks>
            This constructor is useful if the width and height of the underlying representation do
            not change, so they can safely be passed in as constants.
            </remarks>
            <param name="width">The (constant) width of the map.</param>
            <param name="height">The (constant) height of the map.</param>
            <param name="valueGetter">
            A function/lambda that returns the value of type T associated with the location it is given.
            </param>
            <param name="valueSetter">
            A function/lambda that updates the underlying representation of the grid being represented accordingly,
            given a type T and position to which it was set.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.LambdaSettableGridView`1.#ctor(System.Func{System.Int32},System.Func{System.Int32},System.Func{SadRogue.Primitives.Point,`0},System.Action{SadRogue.Primitives.Point,`0})">
            <summary>
            Constructor. Takes functions that retrieve the width and height of the grid, and the
            functions used to retrieve/set the value for a location.
            </summary>
            <remarks>
            This constructor is useful if the width and height of the underlying representation may
            change -- one can provide functions that retrieve the width and height of the map being
            represented, and these functions will be called any time the <see cref="P:SadRogue.Primitives.GridViews.LambdaSettableGridView`1.Width" /> and <see cref="P:SadRogue.Primitives.GridViews.LambdaSettableGridView`1.Height" />
            properties are retrieved.
            </remarks>
            <param name="widthGetter">
            A function/lambda that retrieves the width of the grid being represented.
            </param>
            <param name="heightGetter">
            A function/lambda that retrieves the height of the grid being represented.
            </param>
            <param name="valueGetter">
            A function/lambda that returns the value of type T associated with the location it is given.
            </param>
            <param name="valueSetter">
            A function/lambda that updates the grid being represented accordingly, given a type T and
            position to which it was set.
            </param>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.LambdaSettableGridView`1.Height">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.LambdaSettableGridView`1.Width">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.LambdaSettableGridView`1.Item(SadRogue.Primitives.Point)">
            <summary>
            Given a position, returns/sets the "value" associated with that location, by calling the
            valueGetter/valueSetter functions provided at construction.
            </summary>
            <param name="pos">Location to retrieve/set the value for.</param>
            <returns>
            The "value" associated with the provided location, according to the valueGetter function
            provided at construction.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.LambdaSettableGridView`1.ToString">
            <summary>
            Returns a string representation of the grid values.
            </summary>
            <returns>A string representation of the grid values.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.LambdaSettableGridView`1.ToString(System.Func{`0,System.String})">
            <summary>
            Returns a string representation of the grid values, using <paramref name="elementStringifier" />
            to determine what string represents each value.
            </summary>
            <param name="elementStringifier">
            Function determining the string representation of each element.
            </param>
            <returns>A string representation of the grid values.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.LambdaSettableGridView`1.ToString(System.Int32,System.Func{`0,System.String})">
            <summary>
            Returns a string representation of the grid values, using the function specified to turn elements into
            strings, and using the "field length" specified.
            </summary>
            <remarks>
            Each element of type T will have spaces added to cause it to take up exactly
            <paramref name="fieldSize" /> characters, provided <paramref name="fieldSize" />
            is less than the length of the element's string representation.
            </remarks>
            <param name="fieldSize">
            The size of the field to give each value.  A positive-number
            right-aligns the text within the field, while a negative number left-aligns the text.
            </param>
            <param name="elementStringifier">
            Function to use to convert each element to a string. null defaults to the ToString
            function of type T.
            </param>
            <returns>A string representation of the grid values.</returns>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.LambdaSettableTranslationGridView`2">
            <summary>
            A simple <see cref="T:SadRogue.Primitives.GridViews.SettableTranslationGridView`2" /> implementation that allows you to provide
            functions/lambdas for the translation functions. For a version offering only "get" functionality,
            see <see cref="T:SadRogue.Primitives.GridViews.LambdaTranslationGridView`2" />.
            </summary>
            <typeparam name="T1">The type of your underlying data.</typeparam>
            <typeparam name="T2">The type of the data being exposed by the grid view.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.LambdaSettableTranslationGridView`2.#ctor(SadRogue.Primitives.GridViews.ISettableGridView{`0},System.Func{`0,`1},System.Func{`1,`0})">
            <summary>
            Constructor. Takes an existing grid view to create a view from, and getter/setter
            functions taking only a value from the underlying representation.
            </summary>
            <remarks>
            If a position is also needed to perform the translation, an overload is provided taking
            corresponding functions.
            </remarks>
            <param name="baseGrid">Your underlying grid data.</param>
            <param name="getter">The TranslateGet implementation.</param>
            <param name="setter">The TranslateSet implementation.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.LambdaSettableTranslationGridView`2.#ctor(SadRogue.Primitives.GridViews.ISettableGridView{`0},System.Func{SadRogue.Primitives.Point,`0,`1},System.Func{SadRogue.Primitives.Point,`1,`0})">
            <summary>
            Constructor. Takes an existing grid view to create a view from, and getter/setter
            functions taking a map value and its corresponding position.
            </summary>
            <param name="baseGrid">Your underlying grid data.</param>
            <param name="getter">The TranslateGet implementation.</param>
            <param name="setter">The TranslateSet implementation.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.LambdaSettableTranslationGridView`2.#ctor(SadRogue.Primitives.GridViews.ISettableGridView{`0},SadRogue.Primitives.GridViews.ISettableGridView{`1},System.Func{`0,`1},System.Func{`1,`0})">
            <summary>
            Constructor. Takes an existing grid view to create a view from and applies view data to it.
            </summary>
            <param name="baseGrid">Your underlying grid data.</param>
            <param name="overlay">
            The view data to apply to the underlying representation. Must have identical dimensions to
            <paramref name="baseGrid" />.
            </param>
            <param name="getter">The TranslateGet implementation.</param>
            <param name="setter">The TranslateSet implementation.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.LambdaSettableTranslationGridView`2.#ctor(SadRogue.Primitives.GridViews.ISettableGridView{`0},SadRogue.Primitives.GridViews.ISettableGridView{`1},System.Func{SadRogue.Primitives.Point,`0,`1},System.Func{SadRogue.Primitives.Point,`1,`0})">
            <summary>
            Constructor. Takes an existing grid view to create a view from and applies view data to it.
            </summary>
            <param name="baseGrid">Your underlying grid data.</param>
            <param name="overlay">
            The view data to apply to the underlying representation. Must have identical dimensions to
            <paramref name="baseGrid" />.
            </param>
            <param name="getter">The TranslateGet implementation.</param>
            <param name="setter">The TranslateSet implementation.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.LambdaSettableTranslationGridView`2.TranslateGet(SadRogue.Primitives.Point,`0)">
            <summary>
            Translates your grid data into the view type by calling the getter function specified in the
            class constructor.
            </summary>
            <param name="position">Position corresponding to given data value of your underlying representation.</param>
            <param name="value">The data value from your grid.</param>
            <returns>A value of the mapped data type (via the getter specified in the class constructor).</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.LambdaSettableTranslationGridView`2.TranslateSet(SadRogue.Primitives.Point,`1)">
            <summary>
            Translates the view type into the appropriate form for your grid data, by calling the
            setter function specified in the class constructor.
            </summary>
            <param name="position">Position corresponding to the given mapped data type.</param>
            <param name="value">A value of the mapped data type.</param>
            <returns>
            The value to apply to the underlying representation via the setter specified in the class constructor.
            </returns>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.LambdaTranslationGridView`2">
            <summary>
            A simple <see cref="T:SadRogue.Primitives.GridViews.TranslationGridView`2" /> implementation that allows you to provide a function/lambda
            at construction to use as the <see cref="M:SadRogue.Primitives.GridViews.TranslationGridView`2.TranslateGet(SadRogue.Primitives.Point,`0)" /> implementation.
            For a version offering "set" functionality, see <see cref="T:SadRogue.Primitives.GridViews.LambdaSettableTranslationGridView`2" />.
            </summary>
            <typeparam name="T1">The type of your underlying data.</typeparam>
            <typeparam name="T2">The type of the data being exposed by the grid view.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.LambdaTranslationGridView`2.#ctor(SadRogue.Primitives.GridViews.IGridView{`0},System.Func{`0,`1})">
            <summary>
            Constructor. Takes an existing grid view to create a view from and a getter function
            taking only a value of type T1.
            </summary>
            <remarks>
            If a position is also needed to perform the translation, an overload is provided taking a
            corresponding function.
            </remarks>
            <param name="baseGrid">Your underlying grid data.</param>
            <param name="getter">The TranslateGet implementation.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.LambdaTranslationGridView`2.#ctor(SadRogue.Primitives.GridViews.IGridView{`0},System.Func{SadRogue.Primitives.Point,`0,`1})">
            <summary>
            Constructor. Takes an existing grid view to create a view from and a getter function
            taking a value of type T1 and its corresponding position.
            </summary>
            <param name="baseGrid">Your underlying grid data.</param>
            <param name="getter">The TranslateGet implementation.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.LambdaTranslationGridView`2.TranslateGet(SadRogue.Primitives.Point,`0)">
            <summary>
            Translates your underlying data into the view type by calling the getter function specified in the
            class constructor.
            </summary>
            <param name="position">Position corresponding to given value from your underlying data.</param>
            <param name="value">The value from your underlying data.</param>
            <returns>A value of the mapped data type (via the getter specified in the class constructor).</returns>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.SettableGridView1DIndexBase`1">
            <summary>
            Exactly like <see cref="T:SadRogue.Primitives.GridViews.SettableGridViewBase`1"/>, except for the one indexer left to the user to implement
            is the one which takes a 1D array, and the position-based indexers are implemented off that.
            </summary>
            <remarks>
            This can be more convenient than <see cref="T:SadRogue.Primitives.GridViews.SettableGridViewBase`1"/> for use cases where 1D indices are easiest
            to work with, and is technically more efficient for cases such as wrapping a 1D array, where the backing data
            structure takes an index (although this should typically be considered a micro-optimization).
            </remarks>
            <typeparam name="T">The type of value being stored.</typeparam>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableGridView1DIndexBase`1.Height">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableGridView1DIndexBase`1.Width">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableGridView1DIndexBase`1.Count">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableGridView1DIndexBase`1.Item(SadRogue.Primitives.Point)">
            <inheritdoc cref="T:SadRogue.Primitives.GridViews.ISettableGridView`1"/>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableGridView1DIndexBase`1.Item(System.Int32,System.Int32)">
            <inheritdoc cref="T:SadRogue.Primitives.GridViews.ISettableGridView`1"/>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableGridView1DIndexBase`1.Item(System.Int32)">
            <inheritdoc cref="T:SadRogue.Primitives.GridViews.ISettableGridView`1"/>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.SettableGridView1DIndexBase`1.Fill(`0)">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.SettableGridView1DIndexBase`1.Clear">
            <inheritdoc/>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.SettableGridViewBase`1">
            <summary>
            A convenient base class to inherit from when implementing <see cref="T:SadRogue.Primitives.GridViews.ISettableGridView`1"/> that minimizes
            the number of items you must implement by implementing indexers in terms of a single indexer taking a Point.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableGridViewBase`1.Height">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableGridViewBase`1.Width">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableGridViewBase`1.Item(SadRogue.Primitives.Point)">
            <inheritdoc cref="T:SadRogue.Primitives.GridViews.ISettableGridView`1"/>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableGridViewBase`1.Count">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableGridViewBase`1.Item(System.Int32,System.Int32)">
            <inheritdoc cref="T:SadRogue.Primitives.GridViews.ISettableGridView`1"/>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableGridViewBase`1.Item(System.Int32)">
            <inheritdoc cref="T:SadRogue.Primitives.GridViews.ISettableGridView`1"/>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.SettableGridViewBase`1.Fill(`0)">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.SettableGridViewBase`1.Clear">
            <inheritdoc/>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.SettableTranslationGridView`2">
            <summary>
            Class implementing <see cref="T:SadRogue.Primitives.GridViews.ISettableGridView`1"/> by providing a functions that translate values from one
            grid view with complex data types, to a grid view with simple data types, and vice versa.  For a version that
            provides only "get" functionality, see <see cref="T:SadRogue.Primitives.GridViews.TranslationGridView`2" />.
            </summary>
            <remarks>
            See <see cref="T:SadRogue.Primitives.GridViews.TranslationGridView`2" />.  The use case is the same, except that this class
            implements <see cref="T:SadRogue.Primitives.GridViews.ISettableGridView`1" /> instead, and thus also allows you to specify
            set-translations via TranslateSet.
            </remarks>
            <typeparam name="T1">The type of your underlying data.</typeparam>
            <typeparam name="T2">The type of the data being exposed by the grid view.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.SettableTranslationGridView`2.#ctor(SadRogue.Primitives.GridViews.ISettableGridView{`0})">
            <summary>
            Constructor. Takes an existing grid view to create a view from.
            </summary>
            <param name="baseGrid">A grid view exposing your underlying map data.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.SettableTranslationGridView`2.#ctor(SadRogue.Primitives.GridViews.ISettableGridView{`0},SadRogue.Primitives.GridViews.ISettableGridView{`1})">
            <summary>
            Constructor. Takes an existing grid view to create a view from and applies view data to it.
            </summary>
            <remarks>
            Since this constructor must call TranslateSet to perform its function, do NOT
            call this constructor if the TranslateSet implementation depends on the derived
            class's constructor being completed to function properly.
            </remarks>
            <param name="baseGrid">Your underlying map data.</param>
            <param name="overlay">
            The view data to apply to the grid. Must have identical dimensions to <paramref name="baseGrid" />.
            </param>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableTranslationGridView`2.BaseGrid">
            <summary>
            The grid view exposing your underlying data.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableTranslationGridView`2.Height">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableTranslationGridView`2.Width">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableTranslationGridView`2.Item(SadRogue.Primitives.Point)">
            <summary>
            Given a position, translates and returns/sets the "value" associated with that position.
            </summary>
            <param name="pos">Location to get/set the value for.</param>
            <returns>The translated "value" associated with the provided location.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.SettableTranslationGridView`2.ToString">
            <summary>
            Returns a string representation of the grid values.
            </summary>
            <returns>A string representation of the grid values.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.SettableTranslationGridView`2.ToString(System.Func{`1,System.String})">
            <summary>
            Returns a string representation of the grid values, using <paramref name="elementStringifier" />
            to determine what string represents each value.
            </summary>
            <param name="elementStringifier">
            Function determining the string representation of each element.
            </param>
            <returns>A string representation of the grid view.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.SettableTranslationGridView`2.ToString(System.Int32,System.Func{`1,System.String})">
            <summary>
            Returns a string representation of the grid values, using the function specified to turn elements into
            strings, and using the "field length" specified.
            </summary>
            <remarks>
            Each element of type T will have spaces added to cause it to take up exactly
            <paramref name="fieldSize" /> characters, provided <paramref name="fieldSize" />
            is less than the length of the element's string representation.
            </remarks>
            <param name="fieldSize">
            The size of the field to give each value.  A positive-number
            right-aligns the text within the field, while a negative number left-aligns the text.
            </param>
            <param name="elementStringifier">
            Function to use to convert each element to a string. null defaults to the ToString
            function of type T.
            </param>
            <returns>A string representation of the grid values.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.SettableTranslationGridView`2.TranslateGet(`0)">
            <summary>
            Translates your underlying data into the view type. Takes only a value from the underlying data.
            If a position is also needed to perform the translation, use <see cref="M:SadRogue.Primitives.GridViews.SettableTranslationGridView`2.TranslateGet(SadRogue.Primitives.Point,`0)" />
            instead.
            </summary>
            <param name="value">The data value from your underlying data.</param>
            <returns>A value of the mapped data type.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.SettableTranslationGridView`2.TranslateGet(SadRogue.Primitives.Point,`0)">
            <summary>
            Translates your underlying data into the view type. Takes a value from the underlying data and
            the corresponding position for that value. If a position is not needed to perform the
            translation, use <see cref="M:SadRogue.Primitives.GridViews.SettableTranslationGridView`2.TranslateGet(`0)" /> instead.
            </summary>
            <param name="position">The position of the given data value from your underlying data structure.</param>
            <param name="value">The data value from your underlying structure.</param>
            <returns>A value of the mapped data type.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.SettableTranslationGridView`2.TranslateSet(`1)">
            <summary>
            Translates the view type into the appropriate form for your underlying data. Takes only a value
            from the grid view itself. If a position is also needed to perform the translation, use
            <see cref="M:SadRogue.Primitives.GridViews.SettableTranslationGridView`2.TranslateSet(SadRogue.Primitives.Point,`1)" /> instead.
            </summary>
            <param name="value">A value of the mapped data type.</param>
            <returns>The data value for your underlying representation.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.SettableTranslationGridView`2.TranslateSet(SadRogue.Primitives.Point,`1)">
            <summary>
            Translates the view type into the appropriate form for your underlying data. Takes a value from
            the underlying data, and it corresponding position. If a position is not needed to perform
            the translation, use <see cref="M:SadRogue.Primitives.GridViews.SettableTranslationGridView`2.TranslateSet(`1)" /> instead.
            </summary>
            <param name="position">The position of the given mapped data type.</param>
            <param name="value">A value of the mapped data type.</param>
            <returns>The data value for your underlying representation.</returns>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.SettableViewport`1">
            <summary>
            Similar to <see cref="T:SadRogue.Primitives.GridViews.Viewport`1" />, but implements <see cref="T:SadRogue.Primitives.GridViews.ISettableGridView`1" />and thus implements
            "set" functionality via relative coordinates.
            </summary>
            <typeparam name="T">Type being exposed by map view.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.SettableViewport`1.#ctor(SadRogue.Primitives.GridViews.ISettableGridView{`0},SadRogue.Primitives.Rectangle)">
            <summary>
            Constructor. Takes the parent map view, and the initial subsection of that map view to represent.
            </summary>
            <param name="gridView">The map view being represented.</param>
            <param name="viewArea">The initial subsection of that map to represent.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.SettableViewport`1.#ctor(SadRogue.Primitives.GridViews.ISettableGridView{`0})">
            <summary>
            Constructor. Takes the map view to represent. The viewport will represent the entire given map view.
            </summary>
            <param name="gridView">The map view to represent.</param>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableViewport`1.GridView">
            <summary>
            The map view that this viewport is exposing values from.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableViewport`1.Item(System.Int32)">
            <summary>
            Given a position in relative 1d-array-index style, returns/sets the "value" associated with that
            location in absolute coordinates.
            </summary>
            <param name="relativeIndex1D">
            Viewport-relative position of the location to retrieve/set the value for, as a 1D array index.
            </param>
            <returns>
            The "value" associated with the absolute location represented on the underlying map view.
            </returns>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableViewport`1.Item(SadRogue.Primitives.Point)">
            <summary>
            Given a position in relative coordinates, sets/returns the "value" associated with that
            location in absolute coordinates.
            </summary>
            <param name="relativePosition">
            Viewport-relative position of the location to retrieve/set the value for.
            </param>
            <returns>
            The "value" associated with the absolute location represented on the underlying map view.
            </returns>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.SettableViewport`1.Item(System.Int32,System.Int32)">
            <summary>
            Given an X and Y value in relative coordinates, sets/returns the "value" associated with
            that location in absolute coordinates.
            </summary>
            <param name="relativeX">Viewport-relative X-value of location.</param>
            <param name="relativeY">Viewport-relative Y-value of location.</param>
            <returns>
            The "value" associated with the absolute location represented on the underlying map view.
            </returns>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.TranslationGridView`2">
            <summary>
            Class implementing <see cref="T:SadRogue.Primitives.GridViews.IGridView`1"/> by providing a function that translates values from one grid view
            with complex data types, to a grid view with simple data types.  For a version that provides "set"
            functionality, see <see cref="T:SadRogue.Primitives.GridViews.SettableTranslationGridView`2" />.
            </summary>
            <remarks>
            This class is useful if the underlying representation of the data you are creating a grid view for is complex,
            and you simply need to map a complex data type to a simpler one.  For example, you might implement the
            <see cref="M:SadRogue.Primitives.GridViews.TranslationGridView`2.TranslateGet(SadRogue.Primitives.Point,`0)"/> function to extract a property from a more complex
            structure.  If your mapping is very simple, or you do not wish to create a subclass, see
            <see cref="T:SadRogue.Primitives.GridViews.LambdaTranslationGridView`2"/>.
            </remarks>
            <typeparam name="T1">The type of your underlying data.</typeparam>
            <typeparam name="T2">The type of the data being exposed by the grid view.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.TranslationGridView`2.#ctor(SadRogue.Primitives.GridViews.IGridView{`0})">
            <summary>
            Constructor. Takes an existing grid view to create a view from.
            </summary>
            <param name="baseGrid">A grid view exposing your underlying data.</param>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.TranslationGridView`2.BaseGrid">
            <summary>
            The underlying grid data, exposed as a grid view.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.TranslationGridView`2.Height">
            <summary>
            The height of the grid.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.TranslationGridView`2.Width">
            <summary>
            The width of the grid.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.TranslationGridView`2.Item(SadRogue.Primitives.Point)">
            <summary>
            Given a position, translates and returns the "value" associated with that position.
            </summary>
            <param name="pos">Location to get the value for.</param>
            <returns>The translated "value" associated with the provided location.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.TranslationGridView`2.ToString">
            <summary>
            Returns a string representation of the exposed grid values.
            </summary>
            <returns>A string representation of the exposed grid values.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.TranslationGridView`2.ToString(System.Func{`1,System.String})">
            <summary>
            Returns a string representation of the grid values, using <paramref name="elementStringifier" />
            to determine what string represents each value.
            </summary>
            <param name="elementStringifier">
            Function determining the string representation of each element.
            </param>
            <returns>A string representation of the grid values.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.TranslationGridView`2.ToString(System.Int32,System.Func{`1,System.String})">
            <summary>
            Returns a string representation of the grid values, using the function specified to turn elements into
            strings, and using the "field length" specified.
            </summary>
            <remarks>
            Each element of type T will have spaces added to cause it to take up exactly
            <paramref name="fieldSize" /> characters, provided <paramref name="fieldSize" />
            is less than the length of the element's string representation.
            </remarks>
            <param name="fieldSize">
            The size of the field to give each value.  A positive-number
            right-aligns the text within the field, while a negative number left-aligns the text.
            </param>
            <param name="elementStringifier">
            Function to use to convert each element to a string. null defaults to the ToString
            function of type T.
            </param>
            <returns>A string representation of the grid values.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.TranslationGridView`2.TranslateGet(`0)">
            <summary>
            Translates your actual data into the view type using just the data value itself. If you need
            the location as well to perform the translation, implement <see cref="M:SadRogue.Primitives.GridViews.TranslationGridView`2.TranslateGet(SadRogue.Primitives.Point,`0)" />
            instead.
            </summary>
            <param name="value">The data value from the base grid view.</param>
            <returns>A value of the mapped data type.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.TranslationGridView`2.TranslateGet(SadRogue.Primitives.Point,`0)">
            <summary>
            Translates your actual data into the view type using the position and the data value itself. If
            you need only the data value to perform the translation, implement <see cref="M:SadRogue.Primitives.GridViews.TranslationGridView`2.TranslateGet(`0)" />
            instead.
            </summary>
            <param name="position">The position of the given data value.</param>
            <param name="value">The data value from your underlying grid view.</param>
            <returns>A value of the mapped data type.</returns>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.UnboundedViewport`1">
            <summary>
            Similar to <see cref="T:SadRogue.Primitives.GridViews.Viewport`1"/>, except that the view area is in no way bounded to the edges of the
            underlying grid view.  Instead, if you access a position that cannot map to any valid position in the underlying
            grid view, a (specified) default value is returned.
            </summary>
            <typeparam name="T">The type being exposed by the UnboundedViewport.</typeparam>
        </member>
        <member name="F:SadRogue.Primitives.GridViews.UnboundedViewport`1.DefaultValue">
            <summary>
            The value to return if a position is accessed that is outside the actual underlying grid view.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.UnboundedViewport`1.#ctor(SadRogue.Primitives.GridViews.IGridView{`0},SadRogue.Primitives.Rectangle,`0)">
            <summary>
            Constructor. Takes the parent grid view, and the initial subsection of that grid view to represent.
            </summary>
            <param name="gridView">The grid view being represented.</param>
            <param name="viewArea">The initial subsection of that grid to represent.</param>
            <param name="defaultValue">
            The value to return if a position is accessed that is outside the actual underlying grid view.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.UnboundedViewport`1.#ctor(SadRogue.Primitives.GridViews.IGridView{`0},`0)">
            <summary>
            Constructor. Takes the grid view to represent. The viewport will represent the entire given grid view.
            </summary>
            <param name="gridView">The grid view to represent.</param>
            <param name="defaultValue">
            The value to return if a position is accessed that is outside the actual underlying grid view.
            </param>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.UnboundedViewport`1.GridView">
            <summary>
            The grid view that this UnboundedViewport is exposing values from.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.UnboundedViewport`1.ViewArea">
            <summary>
            The area of the base GridView that this Viewport is exposing. Although this property does
            not explicitly expose a set accessor, it is returning a reference and as such may be
            assigned to. This viewport is NOT bounded to base map edges -- for this functionality, see the
            <see cref="T:SadRogue.Primitives.GridViews.Viewport`1" /> class.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.UnboundedViewport`1.Height">
            <summary>
            The height of the area being represented.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.UnboundedViewport`1.Width">
            <summary>
            The width of the area being represented.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.UnboundedViewport`1.Item(SadRogue.Primitives.Point)">
            <summary>
            Given a position in relative coordinates, returns the "value" associated with that
            location in absolute coordinates.
            </summary>
            <param name="relativePosition">
            Viewport-relative position of the location to retrieve the value for.
            </param>
            <returns>
            The "value" associated with the absolute location represented on the underlying grid view,
            or <see cref="F:SadRogue.Primitives.GridViews.UnboundedViewport`1.DefaultValue" /> if the absolute position does not exist in the underlying grid view.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.UnboundedViewport`1.ToString">
            <summary>
            Returns a string representation of the grid values inside the viewport.
            </summary>
            <returns>A string representation of the grid values inside the viewport.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.UnboundedViewport`1.ToString(System.Func{`0,System.String})">
            <summary>
            Returns a string representation of the grid values inside the viewport, using
            <paramref name="elementStringifier" /> to determine what string represents each value.
            </summary>
            <param name="elementStringifier">
            Function determining the string representation of each element.
            </param>
            <returns>A string representation of the grid values inside the viewport.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.UnboundedViewport`1.ToString(System.Int32,System.Func{`0,System.String})">
            <summary>
            Returns a string representation of the grid values inside the viewport, using the function specified to turn
            elements into strings, and using the "field length" specified.
            </summary>
            <remarks>
            Each element of type T will have spaces added to cause it to take up exactly
            <paramref name="fieldSize" /> characters, provided <paramref name="fieldSize" />
            is less than the length of the element's string representation.
            </remarks>
            <param name="fieldSize">
            The size of the field to give each value.  A positive-number
            right-aligns the text within the field, while a negative number left-aligns the text.
            </param>
            <param name="elementStringifier">
            Function to use to convert each element to a string. null defaults to the ToString
            function of type T.
            </param>
            <returns>A string representation of the grid values inside the viewport.</returns>
        </member>
        <member name="T:SadRogue.Primitives.GridViews.Viewport`1">
            <summary>
            Implements <see cref="T:SadRogue.Primitives.GridViews.IGridView`1"/> to expose a "viewport", or sub-area, of another grid view.
            Its indexers perform relative to absolute coordinate translations based on the viewport size/location, and
            return the proper value of type T from the underlying view.
            </summary>
            <remarks>
            This implementation restricts the subsection of the view that is presented in such a way that no part
            of the viewport can be outside the boundary of its parent grid view.  The viewport cannot be bigger than
            the underlying grid view, and the viewport's position is "locked" to the edge so that it cannot be set in such a
            way that a portion of the viewport lies outside the bounds of the parent view.  If you would rather allow this
            and return a default value for locations outside the parent grid view, see <see cref="T:SadRogue.Primitives.GridViews.UnboundedViewport`1" />.
            </remarks>
            <typeparam name="T">The type being exposed by the Viewport.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.Viewport`1.#ctor(SadRogue.Primitives.GridViews.IGridView{`0},SadRogue.Primitives.Rectangle)">
            <summary>
            Constructor. Takes the parent grid view, and the initial subsection of that grid view to represent.
            </summary>
            <param name="gridView">The grid view being represented.</param>
            <param name="viewArea">The initial subsection of that grid view to represent.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.Viewport`1.#ctor(SadRogue.Primitives.GridViews.IGridView{`0})">
            <summary>
            Constructor. Takes the map view to represent. The viewport will represent the entire given map view.
            </summary>
            <param name="gridView">The map view to represent.</param>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.Viewport`1.GridView">
            <summary>
            The grid view that this Viewport is exposing values from.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.Viewport`1.ViewArea">
            <summary>
            The area of <see cref="P:SadRogue.Primitives.GridViews.Viewport`1.GridView" /> that this Viewport is exposing.  Use <see cref="M:SadRogue.Primitives.GridViews.Viewport`1.SetViewArea(SadRogue.Primitives.Rectangle)" />
            to set the viewing area.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.Viewport`1.Height">
            <summary>
            The height of the area being represented.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.Viewport`1.Width">
            <summary>
            The width of the area being represented.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.GridViews.Viewport`1.Item(SadRogue.Primitives.Point)">
            <summary>
            Given a position in relative coordinates, returns the "value" associated with that
            location in absolute coordinates.
            </summary>
            <param name="relativePosition">
            Viewport-relative position of the location to retrieve the value for.
            </param>
            <returns>
            The "value" associated with the absolute location represented on the underlying grid view.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.Viewport`1.SetViewArea(SadRogue.Primitives.Rectangle)">
            <summary>
            Sets the viewing area for the viewport to the value given.  The viewport will automatically be bounded as
            needed to ensure that it remains within the bounds of the underlying IGridView.
            </summary>
            <param name="viewArea">The new view area.</param>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.Viewport`1.ToString">
            <summary>
            Returns a string representation of the grid values inside the viewport.
            </summary>
            <returns>A string representation of the values inside the viewport.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.Viewport`1.ToString(System.Func{`0,System.String})">
            <summary>
            Returns a string representation of the grid values inside the viewport, using
            <paramref name="elementStringifier" /> to determine what string represents each value.
            </summary>
            <param name="elementStringifier">
            Function determining the string representation of each element.
            </param>
            <returns>A string representation of the grid values inside the viewport.</returns>
        </member>
        <member name="M:SadRogue.Primitives.GridViews.Viewport`1.ToString(System.Int32,System.Func{`0,System.String})">
            <summary>
            Returns a string representation of the grid values inside the viewport, using the function specified to
            turn elements into strings, and using the "field length" specified.
            </summary>
            <remarks>
            Each element of type T will have spaces added to cause it to take up exactly
            <paramref name="fieldSize" /> characters, provided <paramref name="fieldSize" />
            is less than the length of the element's string representation.
            </remarks>
            <param name="fieldSize">
            The size of the field to give each value.  A positive-number
            right-aligns the text within the field, while a negative number left-aligns the text.
            </param>
            <param name="elementStringifier">
            Function to use to convert each element to a string. null defaults to the ToString
            function of type T.
            </param>
            <returns>A string representation of the grid values inside the viewport.</returns>
        </member>
        <member name="T:SadRogue.Primitives.IDGenerator">
             <summary>
             Class designed as a helper for situations where you need to generate and assign a unique
             integer to each instance of a class, eg. for a class implementing <see cref="T:SadRogue.Primitives.IHasID" />.
             </summary>
             <remarks>
             This is one way to fulfill the requirement of assigning a persistent, unique ID to each instance of an object,
             which is a fairly common requirement when defining objects that exist on a grid.
            
             The class may be initialized with a starting unsigned integer -- if none is given, 0 is the default
             starting point. To assign an ID, call <see cref="M:SadRogue.Primitives.IDGenerator.UseID" />, and assign the value that it returns.
             This class is NOT thread-safe on its own -- if it needs to be, you can simply use a lock to wrap
             any calls to UseID.
             </remarks>
        </member>
        <member name="P:SadRogue.Primitives.IDGenerator.CurrentInteger">
            <summary>
            The integer ID that will be returned the next time <see cref="M:SadRogue.Primitives.IDGenerator.UseID"/> is called.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.IDGenerator.LastAssigned">
            <summary>
            If true, the ID generator has assigned the last ID in the uint range, and will throw an InvalidOperationException
            the next time UseID is called.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.IDGenerator.#ctor(System.UInt32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="startingInt">
            Unsigned integer to start at (one that will be returned first time <see cref="M:SadRogue.Primitives.IDGenerator.UseID" /> is called).
            Defaults to 0.
            </param>
            <param name="lastAssigned">
            Whether or not the last possible ID has been assigned.  If this is set to true, the
            <paramref name="startingInt"/> value must be uint.maxValue.  Generally, you should leave this parameter alone;
            it is designed primarily to facilitate serialization/deserialization.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.IDGenerator.UseID">
            <summary>
            Call every time you wish to "assign" an ID. The integer returned will never be returned
            again (each integer returned by this function will be unique).
            </summary>
            <returns>The ID that has been assigned.</returns>
        </member>
        <member name="M:SadRogue.Primitives.IDGenerator.Matches(SadRogue.Primitives.IDGenerator)">
            <summary>
            Compares the two <see cref="T:SadRogue.Primitives.IDGenerator"/> objects to see if they are in an identical state.
            </summary>
            <param name="other"/>
            <returns>True if the IDGenerator object specified is in the same state as the current one; false otherwise.</returns>
        </member>
        <member name="T:SadRogue.Primitives.IHasID">
             <summary>
             Interface for a class that has an integer ID value, typically used for items in a spatial map, or generally
             for purposes of hashing.
             </summary>
             <remarks>
             The ID assigned should be unique or close to unique over all instances of the class (to avoid hash collisions).
             A typical implementation could be simply randomly generating the ID value.  To assign completely unique IDs, an
             <see cref="T:SadRogue.Primitives.IDGenerator" /> can be used:
             <example>
                 <code>
             class SomeClass : IHasID
             {
                 // Static instance used to assign IDs to ANY new SomeClass instance
                 private static IDGenerator generator = new IDGenerator();
                 public uint ID { get; }
            
                 public SomeClass(...)
                 {
                     ID = generator.UseID();
                 }
             }
             </code>
             </example>
             </remarks>
        </member>
        <member name="P:SadRogue.Primitives.IHasID.ID">
            <summary>
            ID assigned to this object.
            </summary>
        </member>
        <member name="T:SadRogue.Primitives.IHasLayer">
            <summary>
            Interface for objects that reside on a "Z-index" or "layer".
            </summary>
            <remarks>
            The concept of a z-index is fairly common in rendering and representation of objects in a 2d grid.  This interface
            can be used by any code that wants to work with objects that have some sort of layer assigned to them; but
            the library's code primarily uses it as part of the <see cref="T:SadRogue.Primitives.SpatialMaps.LayeredSpatialMap`1" /> implementation.
            </remarks>
        </member>
        <member name="P:SadRogue.Primitives.IHasLayer.Layer">
            <summary>
            The layer on which the object should reside. Higher numbers indicate layers closer to the
            "top".
            </summary>
            <remarks>
            This value is typically assumed to remain constant while the object is within a data structure
            that uses this interface -- if it is modified, that data structure will become out of sync.
            </remarks>
        </member>
        <member name="T:SadRogue.Primitives.IMatchable`1">
            <summary>
            Interface implemented to define a form of checking value equality, without guarantees that it corresponds
            to GetHashCode.
            </summary>
            <typeparam name="T">Type of object being compared.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.IMatchable`1.Matches(`0)">
            <summary>
            Returns true if the given object is considered "equal" to the current one, based on the definition
            of equality for the object.
            </summary>
            <param name="other">Object to compare to.</param>
            <returns>True if the objects are considered equal, false, otherwise.</returns>
        </member>
        <member name="T:SadRogue.Primitives.IPositionable">
             <summary>
             An interface describing an object which has a position on a grid and can move around.
             </summary>
             <remarks>
             Objects which have a position can implement this interface, which can be useful to make such objects easily
             compatible with automatically syncing spatial map classes like <see cref="T:SadRogue.Primitives.SpatialMaps.AutoSyncMultiSpatialMap`1"/>.
            
             Other algorithms may be able to make use of this interface as well if all they need is an object with a position.
             </remarks>
        </member>
        <member name="P:SadRogue.Primitives.IPositionable.Position">
            <summary>
            The position of the object.
            </summary>
        </member>
        <member name="E:SadRogue.Primitives.IPositionable.PositionChanging">
            <summary>
            Event which should be fired right before the object's position changes.
            </summary>
        </member>
        <member name="E:SadRogue.Primitives.IPositionable.PositionChanged">
            <summary>
            Event which should be fired when the object's position changes.
            </summary>
        </member>
        <member name="T:SadRogue.Primitives.IReadOnlyArea">
            <summary>
            Read-only interface for an arbitrary 2D area.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.IReadOnlyArea.UseIndexEnumeration">
             <summary>
             Whether or not it is more efficient for this implementation to use enumeration by index,
             rather than generic IEnumerable, when iterating over positions using <see cref="T:SadRogue.Primitives.ReadOnlyAreaPositionsEnumerator"/>.
             </summary>
             <remarks>
             Set this to true if your indexer implementation scales well (constant time), and is relatively fast.  Implementations with
             more complex indexers should set this to false.
            
             The default interface implementation returns false, in order to preserve backwards compatibility with previous versions.
            
             If you set this to false, your IEnumerable.GetEnumerator() implementations must NOT call return a ReadOnlyAreaPositionsEnumerator,
             as this will create an infinite loop.
             </remarks>
        </member>
        <member name="P:SadRogue.Primitives.IReadOnlyArea.Bounds">
            <summary>
            Smallest possible rectangle that encompasses every position in the area.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.IReadOnlyArea.Count">
            <summary>
            Number of (unique) positions in the current area.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.IReadOnlyArea.Item(System.Int32)">
            <summary>
            Returns positions from the area in the same fashion you would via a list.
            </summary>
            <param name="index">Index of list to retrieve.</param>
        </member>
        <member name="M:SadRogue.Primitives.IReadOnlyArea.Contains(SadRogue.Primitives.IReadOnlyArea)">
            <summary>
            Returns whether or not the given area is completely contained within the current one.
            </summary>
            <param name="area">Area to check.</param>
            <returns>
            True if the given area is completely contained within the current one, false otherwise.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.IReadOnlyArea.Contains(SadRogue.Primitives.Point)">
            <summary>
            Determines whether or not the given position is considered within the area or not.
            </summary>
            <param name="position">The position to check.</param>
            <returns>True if the specified position is within the area, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.IReadOnlyArea.Contains(System.Int32,System.Int32)">
            <summary>
            Determines whether or not the given position is considered within the area or not.
            </summary>
            <param name="positionX">X-value of the position to check.</param>
            <param name="positionY">X-value of the position to check.</param>
            <returns>True if the specified position is within the area, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.IReadOnlyArea.Intersects(SadRogue.Primitives.IReadOnlyArea)">
            <summary>
            Returns whether or not the given map area intersects the current one. If you intend to
            determine/use the exact intersection based on this return value, it is best to instead
            call <see cref="M:SadRogue.Primitives.Area.GetIntersection(SadRogue.Primitives.IReadOnlyArea,SadRogue.Primitives.IReadOnlyArea,System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point})"/>, and check the number
            of positions in the result (0 if no intersection).
            </summary>
            <param name="area">The area to check.</param>
            <returns>True if the given area intersects the current one, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.IReadOnlyArea.GetEnumerator">
             <summary>
             Returns an enumerator which can be used to iterate over the positions in this area in the most efficient
             manner possible via a generic interface.
             </summary>
             <remarks>
             The enumerator returned will use the area's indexer to iterate over the positions (like you might a list),
             if the area's <see cref="P:SadRogue.Primitives.IReadOnlyArea.UseIndexEnumeration"/> is true.  Otherwise, it uses the typical IEnumerator
             implementation for that area.
            
             This may be significantly faster than the typical IEnumerable/IEnumerator usage for implementations which have
             <see cref="P:SadRogue.Primitives.IReadOnlyArea.UseIndexEnumeration"/> set to true; however it won't have much benefit otherwise.
            
             If you have a value of a concrete type rather than an interface, and the GetEnumerator implementation for that
             given type is particularly fast or a non-boxed type (like <see cref="T:SadRogue.Primitives.Area"/>, you will probably get faster performance
             out of that than by using this; however this will provide better performance if you are working with an interface
             and thus don't know the type of area.  Use cases for this function are generally for iteration via IReadOnlyArea.
            
             </remarks>
             <returns>A custom enumerator that iterates over the positions in the area in the most efficient manner possible via a generic interface.</returns>
        </member>
        <member name="T:SadRogue.Primitives.BresenhamEnumerator">
             <summary>
             A custom enumerator used to iterate over all positions on the on a line using the
             <see cref="F:SadRogue.Primitives.Lines.Algorithm.Bresenham"/> line algorithm efficiently.
            
             Generally, you should use <see cref="M:SadRogue.Primitives.Lines.GetBresenhamLine(SadRogue.Primitives.Point,SadRogue.Primitives.Point)"/>
             to get an instance of this, rather than creating one yourself.
             </summary>
             <remarks>
             This type is a struct, and as such is much more efficient when used in a foreach loop than a function returning
             IEnumerable&lt;Point&gt; by using "yield return".  This type does implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
             so you can pass it to functions which require one (for example, System.LINQ).  However, this will have reduced
             performance due to boxing of the iterator.
             </remarks>
        </member>
        <member name="P:SadRogue.Primitives.BresenhamEnumerator.Current">
            <summary>
            The current value for enumeration.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.BresenhamEnumerator.#ctor(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Creates an enumerator which iterates over all positions on the line.
            </summary>
            <param name="start">Starting point for the line.</param>
            <param name="end">Ending point for the line.</param>
        </member>
        <member name="M:SadRogue.Primitives.BresenhamEnumerator.MoveNext">
            <summary>
            Advances the iterator to the next position.
            </summary>
            <returns>True if the a new position on the line exists; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.BresenhamEnumerator.GetEnumerator">
            <summary>
            Returns this enumerator.
            </summary>
            <returns>This enumerator.</returns>
        </member>
        <member name="M:SadRogue.Primitives.BresenhamEnumerator.ToEnumerable">
            <summary>
            Obsolete.
            </summary>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.BresenhamEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
            This iterator does not support resetting.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="T:SadRogue.Primitives.DDAEnumerator">
             <summary>
             A custom enumerator used to iterate over all positions on the on a line using the
             <see cref="F:SadRogue.Primitives.Lines.Algorithm.DDA"/> line algorithm efficiently.
            
             Generally, you should use <see cref="M:SadRogue.Primitives.Lines.GetDDALine(SadRogue.Primitives.Point,SadRogue.Primitives.Point)"/>
             to get an instance of this, rather than creating one yourself.
             </summary>
             <remarks>
             This type is a struct, and as such is much more efficient when used in a foreach loop than a function returning
             IEnumerable&lt;Point&gt; by using "yield return".  This type does implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
             so you can pass it to functions which require one (for example, System.LINQ).  However, this will have reduced
             performance due to boxing of the iterator.
             </remarks>
        </member>
        <member name="P:SadRogue.Primitives.DDAEnumerator.Current">
            <summary>
            The current value for enumeration.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.DDAEnumerator.#ctor(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Creates an enumerator which iterates over all positions on the line.
            </summary>
            <param name="start">Starting point for the line.</param>
            <param name="end">Ending point for the line.</param>
        </member>
        <member name="M:SadRogue.Primitives.DDAEnumerator.MoveNext">
            <summary>
            Advances the iterator to the next position.
            </summary>
            <returns>True if the a new position on the line exists; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.DDAEnumerator.GetEnumerator">
            <summary>
            Returns this enumerator.
            </summary>
            <returns>This enumerator.</returns>
        </member>
        <member name="M:SadRogue.Primitives.DDAEnumerator.ToEnumerable">
            <summary>
            Obsolete.
            </summary>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.DDAEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
            This iterator does not support resetting.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="T:SadRogue.Primitives.OrthogonalEnumerator">
             <summary>
             A custom enumerator used to iterate over all positions on the on a line using the
             <see cref="F:SadRogue.Primitives.Lines.Algorithm.Orthogonal"/> line algorithm efficiently.
            
             Generally, you should use <see cref="M:SadRogue.Primitives.Lines.GetOrthogonalLine(SadRogue.Primitives.Point,SadRogue.Primitives.Point)"/>
             to get an instance of this, rather than creating one yourself.
             </summary>
             <remarks>
             This type is a struct, and as such is much more efficient when used in a foreach loop than a function returning
             IEnumerable&lt;Point&gt; by using "yield return".  This type does implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
             so you can pass it to functions which require one (for example, System.LINQ).  However, this will have reduced
             performance due to boxing of the iterator.
             </remarks>
        </member>
        <member name="P:SadRogue.Primitives.OrthogonalEnumerator.Current">
            <summary>
            The current value for enumeration.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.OrthogonalEnumerator.#ctor(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Creates an enumerator which iterates over all positions on the line.
            </summary>
            <param name="start">Starting point for the line.</param>
            <param name="end">Ending point for the line.</param>
        </member>
        <member name="M:SadRogue.Primitives.OrthogonalEnumerator.MoveNext">
            <summary>
            Advances the iterator to the next position.
            </summary>
            <returns>True if the a new position on the line exists; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.OrthogonalEnumerator.GetEnumerator">
            <summary>
            Returns this enumerator.
            </summary>
            <returns>This enumerator.</returns>
        </member>
        <member name="M:SadRogue.Primitives.OrthogonalEnumerator.ToEnumerable">
            <summary>
            Obsolete.
            </summary>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.OrthogonalEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
            This iterator does not support resetting.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="T:SadRogue.Primitives.Lines">
            <summary>
            Provides implementations of various line-drawing algorithms which are useful for generating lines on a 2D
            integer grid.
            </summary>
        </member>
        <member name="T:SadRogue.Primitives.Lines.Algorithm">
            <summary>
            Various supported line-drawing algorithms.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Lines.Algorithm.Bresenham">
            <summary>
            Bresenham line algorithm.  Points are guaranteed to be in order from start to finish.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Lines.Algorithm.DDA">
            <summary>
            Digital Differential Analyzer line algorithm.  It will produce slightly different lines compared to
            Bresenham, and it takes approximately the same time as Bresenham (very slightly slower) for most inputs.
            Points are guaranteed to be in order from start to finish.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Lines.Algorithm.Orthogonal">
            <summary>
            Line algorithm that takes only orthogonal steps (each grid location on the line
            returned is within one cardinal direction of the previous one). Potentially useful
            for LOS in games that use MANHATTAN distance. Based on the algorithm
            <a href="http://www.redblobgames.com/grids/line-drawing.html#stepping">here</a>.
            Points are guaranteed to be in order from start to finish.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.Lines.GetLine(SadRogue.Primitives.Point,SadRogue.Primitives.Point,SadRogue.Primitives.Lines.Algorithm)">
            <summary>
            Returns an IEnumerable of every point, in order, closest to a line between the two points
            specified, using the line drawing algorithm given. The start and end points will be included.
            Slower than functions such as <see cref="M:SadRogue.Primitives.Lines.GetBresenhamLine(SadRogue.Primitives.Point,SadRogue.Primitives.Point)"/>,
            <see cref="M:SadRogue.Primitives.Lines.GetDDALine(SadRogue.Primitives.Point,SadRogue.Primitives.Point)"/>, and
            <see cref="M:SadRogue.Primitives.Lines.GetOrthogonalLine(SadRogue.Primitives.Point,SadRogue.Primitives.Point)"/>.
            </summary>
            <remarks>
            You should only use this function if you need a single function which takes an arbitrary line algorithm,
            or you need an IEnumerable object specifically (for example, to use with LINQ).  If you know what line
            algorithm you want to use and you just need to iterate over the points in a foreach loop, you should use
            <see cref="M:SadRogue.Primitives.Lines.GetBresenhamLine(SadRogue.Primitives.Point,SadRogue.Primitives.Point)"/>,
            <see cref="M:SadRogue.Primitives.Lines.GetDDALine(SadRogue.Primitives.Point,SadRogue.Primitives.Point)"/>,
            and <see cref="M:SadRogue.Primitives.Lines.GetOrthogonalLine(SadRogue.Primitives.Point,SadRogue.Primitives.Point)"/> as applicable
            instead, since they offer significantly better performance.
            </remarks>
            <param name="start">The starting point of the line.</param>
            <param name="end">The ending point of the line.</param>
            <param name="type">The line-drawing algorithm to use to generate the line.</param>
            <returns>
            An IEnumerable of every point, in order, closest to a line between the two points
            specified (according to the algorithm given).
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Lines.GetLine(System.Int32,System.Int32,System.Int32,System.Int32,SadRogue.Primitives.Lines.Algorithm)">
            <summary>
            Returns an IEnumerable of every point, in order, closest to a line between the two points
            specified, using the line drawing algorithm given. The start and end points will be included.
            Slower than functions such as <see cref="M:SadRogue.Primitives.Lines.GetBresenhamLine(System.Int32,System.Int32,System.Int32,System.Int32)"/>,
            <see cref="M:SadRogue.Primitives.Lines.GetDDALine(System.Int32,System.Int32,System.Int32,System.Int32)"/>, and
            <see cref="M:SadRogue.Primitives.Lines.GetOrthogonalLine(System.Int32,System.Int32,System.Int32,System.Int32)"/>.
            </summary>
            <remarks>
            You should only use this function if you need a single function which takes an arbitrary line algorithm,
            or you need an IEnumerable object specifically (for example, to use with LINQ).  If you know what line
            algorithm you want to use and you just need to iterate over the points in a foreach loop, you should use
            <see cref="M:SadRogue.Primitives.Lines.GetBresenhamLine(System.Int32,System.Int32,System.Int32,System.Int32)"/>,
            <see cref="M:SadRogue.Primitives.Lines.GetDDALine(System.Int32,System.Int32,System.Int32,System.Int32)"/>,
            and <see cref="M:SadRogue.Primitives.Lines.GetOrthogonalLine(System.Int32,System.Int32,System.Int32,System.Int32)"/> as applicable
            instead, since they offer significantly better performance.
            </remarks>
            <param name="startX">X-coordinate of the starting point of the line.</param>
            <param name="startY">Y-coordinate of the starting point of the line.</param>
            <param name="endX">X-coordinate of the ending point of the line.</param>
            <param name="endY">Y-coordinate of the ending point of the line.</param>
            <param name="type">The line-drawing algorithm to use to generate the line.</param>
            <returns>
            An IEnumerable of every point, in order, closest to a line between the two points
            specified (according to the algorithm given).
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Lines.GetBresenhamLine(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
             <summary>
             Returns all points on the given line using the <see cref="F:SadRogue.Primitives.Lines.Algorithm.Bresenham"/> line algorithm.
             </summary>
             <remarks>
             This function returns a custom iterator which is very fast when used in a foreach loop.
             If you need an IEnumerable to use with LINQ or other code, the returned struct does implement that interface;
             however note that iterating over it this way will not perform as well as iterating directly over this object.
            
             If you need a single function which takes any of the supported line drawing algorithms as a parameter and
             uses that to draw, you should use <see cref="M:SadRogue.Primitives.Lines.GetLine(SadRogue.Primitives.Point,SadRogue.Primitives.Point,SadRogue.Primitives.Lines.Algorithm)"/>;
             however again this will be slower than using these functions directly.
             </remarks>
             <param name="start">The start point of the line.</param>
             <param name="end">The end point of the line.</param>
             <returns>
             Every point, in order, closest to a line between the two points specified (according to Bresenham's line algorithm).
             </returns>
        </member>
        <member name="M:SadRogue.Primitives.Lines.GetBresenhamLine(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Returns all points on the given line using the <see cref="F:SadRogue.Primitives.Lines.Algorithm.Bresenham"/> line algorithm.
             </summary>
             <remarks>
             This function returns a custom iterator which is very fast when used in a foreach loop.
             If you need an IEnumerable to use with LINQ or other code, the returned struct does implement that interface;
             however note that iterating over it this way will not perform as well as iterating directly over this object.
            
             If you need a single function which takes any of the supported line drawing algorithms as a parameter and
             uses that to draw, you should use <see cref="M:SadRogue.Primitives.Lines.GetLine(System.Int32,System.Int32,System.Int32,System.Int32,SadRogue.Primitives.Lines.Algorithm)"/>;
             however again this will be slower than using these functions directly.
             </remarks>
             <param name="startX">X-coordinate of the starting point of the line.</param>
             <param name="startY">Y-coordinate of the starting point of the line.</param>
             <param name="endX">X-coordinate of the ending point of the line.</param>
             <param name="endY">Y-coordinate of the ending point of the line.</param>
             <returns>
             Every point, in order, closest to a line between the two points specified (according to Bresenham's line algorithm).
             </returns>
        </member>
        <member name="M:SadRogue.Primitives.Lines.GetDDALine(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
             <summary>
             Returns all points on the given line using the <see cref="F:SadRogue.Primitives.Lines.Algorithm.DDA"/> line algorithm.
             </summary>
             <remarks>
             This function returns a custom iterator which is very fast when used in a foreach loop.
             If you need an IEnumerable to use with LINQ or other code, the returned struct does implement that interface;
             however note that iterating over it this way will not perform as well as iterating directly over this object.
            
             If you need a single function which takes any of the supported line drawing algorithms as a parameter and
             uses that to draw, you should use <see cref="M:SadRogue.Primitives.Lines.GetLine(SadRogue.Primitives.Point,SadRogue.Primitives.Point,SadRogue.Primitives.Lines.Algorithm)"/>;
             however again this will be slower than using these functions directly.
             </remarks>
             <param name="start">The start point of the line.</param>
             <param name="end">The end point of the line.</param>
             <returns>
             Every point, in order, closest to a line between the two points specified (according to the DDA line algorithm).
             </returns>
        </member>
        <member name="M:SadRogue.Primitives.Lines.GetDDALine(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Returns all points on the given line using the <see cref="F:SadRogue.Primitives.Lines.Algorithm.DDA"/> line algorithm.
             </summary>
             <remarks>
             This function returns a custom iterator which is very fast when used in a foreach loop.
             If you need an IEnumerable to use with LINQ or other code, the returned struct does implement that interface;
             however note that iterating over it this way will not perform as well as iterating directly over this object.
            
             If you need a single function which takes any of the supported line drawing algorithms as a parameter and
             uses that to draw, you should use <see cref="M:SadRogue.Primitives.Lines.GetLine(System.Int32,System.Int32,System.Int32,System.Int32,SadRogue.Primitives.Lines.Algorithm)"/>;
             however again this will be slower than using these functions directly.
             </remarks>
             <param name="startX">X-coordinate of the starting point of the line.</param>
             <param name="startY">Y-coordinate of the starting point of the line.</param>
             <param name="endX">X-coordinate of the ending point of the line.</param>
             <param name="endY">Y-coordinate of the ending point of the line.</param>
             <returns>
             Every point, in order, closest to a line between the two points specified (according to the DDA line algorithm).
             </returns>
        </member>
        <member name="M:SadRogue.Primitives.Lines.GetOrthogonalLine(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
             <summary>
             Returns all points on the given line using the <see cref="F:SadRogue.Primitives.Lines.Algorithm.Orthogonal"/> line algorithm.
             </summary>
             <remarks>
             This function returns a custom iterator which is very fast when used in a foreach loop.
             If you need an IEnumerable to use with LINQ or other code, the returned struct does implement that interface;
             however note that iterating over it this way will not perform as well as iterating directly over this object.
            
             If you need a single function which takes any of the supported line drawing algorithms as a parameter and
             uses that to draw, you should use <see cref="M:SadRogue.Primitives.Lines.GetLine(SadRogue.Primitives.Point,SadRogue.Primitives.Point,SadRogue.Primitives.Lines.Algorithm)"/>;
             however again this will be slower than using these functions directly.
             </remarks>
             <param name="start">The start point of the line.</param>
             <param name="end">The end point of the line.</param>
             <returns>
             Every point, in order, closest to a line between the two points specified (according to the "orthogonal" line algorithm).
             </returns>
        </member>
        <member name="M:SadRogue.Primitives.Lines.GetOrthogonalLine(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Returns all points on the given line using the <see cref="F:SadRogue.Primitives.Lines.Algorithm.Orthogonal"/> line algorithm.
             </summary>
             <remarks>
             This function returns a custom iterator which is very fast when used in a foreach loop.
             If you need an IEnumerable to use with LINQ or other code, the returned struct does implement that interface;
             however note that iterating over it this way will not perform as well as iterating directly over this object.
            
             If you need a single function which takes any of the supported line drawing algorithms as a parameter and
             uses that to draw, you should use <see cref="M:SadRogue.Primitives.Lines.GetLine(System.Int32,System.Int32,System.Int32,System.Int32,SadRogue.Primitives.Lines.Algorithm)"/>;
             however again this will be slower than using these functions directly.
             </remarks>
             <param name="startX">X-coordinate of the starting point of the line.</param>
             <param name="startY">Y-coordinate of the starting point of the line.</param>
             <param name="endX">X-coordinate of the ending point of the line.</param>
             <param name="endY">Y-coordinate of the ending point of the line.</param>
             <returns>
             Every point, in order, closest to a line between the two points specified (according to the "orthogonal" line algorithm).
             </returns>
        </member>
        <member name="T:SadRogue.Primitives.MathHelpers">
            <summary>
            Static class consisting of mathematical "helper" functions and constants that can be useful
            for performing operations on a 2D grid.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.MathHelpers.DegreePctOfCircle">
            <summary>
            Result of 1/360; represents in decimal form a percent of a circle that a degree constitutes.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.MathHelpers.DegreesToRadiansConstant">
            <summary>
            Pi / 180. Used to speed up calculations related to circles.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.MathHelpers.RadiansToDegreesConstant">
            <summary>
            180 / Pi. Used to speed up calculations related to circles.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.MathHelpers.ToDegree(System.Double)">
            <summary>
            Converts given angle from radians to degrees.
            </summary>
            <param name="radAngle">Angle in radians.</param>
            <returns>The given angle in degrees.</returns>
        </member>
        <member name="M:SadRogue.Primitives.MathHelpers.ToRadian(System.Double)">
            <summary>
            Converts given angle from degrees to radians.
            </summary>
            <param name="degAngle">Angle in degrees.</param>
            <returns>The given angle in radians.</returns>
        </member>
        <member name="M:SadRogue.Primitives.MathHelpers.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Restricts a value to a specified range.
            </summary>
            <param name="value">The value to restrict.</param>
            <param name="min">The minimum to clamp the value to.</param>
            <param name="max">The maximum to clamp the value to.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.MathHelpers.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Restricts a value to a specified range.
            </summary>
            <param name="value">The value to restrict.</param>
            <param name="min">The minimum to clamp the value to.</param>
            <param name="max">The maximum to clamp the value to.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.MathHelpers.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Restricts a value to a specified range.
            </summary>
            <param name="value">The value to restrict.</param>
            <param name="min">The minimum to clamp the value to.</param>
            <param name="max">The maximum to clamp the value to.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.MathHelpers.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Performs linear interpolation between two values.
            </summary>
            <param name="value1">Starting value.</param>
            <param name="value2">Ending value.</param>
            <param name="amount">The weight to apply to <paramref name="value2"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SadRogue.Primitives.MathHelpers.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Performs linear interpolation between two values.
            </summary>
            <param name="value1">Starting value.</param>
            <param name="value2">Ending value.</param>
            <param name="amount">The weight to apply to <paramref name="value2"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SadRogue.Primitives.MathHelpers.Wrap(System.Single,System.Single,System.Single)">
            <summary>
            Wraps a value around the min and max.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="min">The minimum value before it transforms into the maximum.</param>
            <param name="max">The maximum value before it transforms into the minimum.</param>
            <returns>A new value if it falls outside the min/max range otherwise, the same value.</returns>
        </member>
        <member name="T:SadRogue.Primitives.Palette">
            <summary>
            A palette of colors.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Palette.Length">
            <summary>
            How many colors the palette has.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Palette.Count">
            <summary>
            How many colors the palette has.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Palette.Item(System.Int32)">
            <summary>
            Gets or sets a color in the palette by index.
            </summary>
            <param name="index">Index of the color.</param>
            <returns>A color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Palette.#ctor(System.Int32)">
            <summary>
            Creates a new palette with the specified amount of colors.
            </summary>
            <param name="colors">The number of colors.</param>
        </member>
        <member name="M:SadRogue.Primitives.Palette.#ctor(System.Collections.Generic.IEnumerable{SadRogue.Primitives.Color})">
            <summary>
            Creates a new palette of colors from a list of existing colors.
            </summary>
            <param name="colors">The list of colors this palette is made from.</param>
        </member>
        <member name="M:SadRogue.Primitives.Palette.ShiftLeft">
            <summary>
            Shifts the entire palette once to the left.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.Palette.ShiftRight">
            <summary>
            Shifts the entire palette once to the right.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.Palette.ShiftLeft(System.Int32,System.Int32)">
            <summary>
            Shifts a range of colors in the palette once to the left.
            </summary>
            <param name="startingIndex">The starting index in the palette.</param>
            <param name="count">The amount of colors to shift from the starting index.</param>
        </member>
        <member name="M:SadRogue.Primitives.Palette.ShiftRight(System.Int32,System.Int32)">
            <summary>
            Shifts a range of colors in the palette once to the right.
            </summary>
            <param name="startingIndex">The starting index in the palette.</param>
            <param name="count">The amount of colors to shift from the starting index.</param>
        </member>
        <member name="M:SadRogue.Primitives.Palette.GetNearest(SadRogue.Primitives.Color)">
            <summary>
            Gets the closest color in the palette to the provided color.
            </summary>
            <param name="color">The color to find.</param>
            <returns>The closest matching color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Palette.GetNearestIndex(SadRogue.Primitives.Color)">
            <summary>
            Gets the index of the closest color in the palette to the provided color.
            </summary>
            <param name="color">The color to find.</param>
            <returns>The palette index of the closest color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Palette.GetEnumerator">
            <summary>
            Gets the list of colors in the palette.
            </summary>
            <returns>The colors in the palette.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Palette.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the list of colors in the palette.
            </summary>
            <returns>The colors in the palette.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Palette.Matches(SadRogue.Primitives.Palette)">
            <summary>
            Returns true if the two palettes hold identical colors in the same order.
            </summary>
            <param name="other"/>
            <returns>True if the two palettes hold identical colors in the same order; false otherwise.</returns>
        </member>
        <member name="T:SadRogue.Primitives.Point">
             <summary>
             A structure that represents a standard 2D point.  Provides numerous functions and operators that enable
             common grid/position-related math and operations.
             </summary>
             <remarks>
             Point instances can be created using the standard Point c = new Point(x, y) syntax.  In addition,
             you may create a point from a c# 7 tuple, like Point c = (x, y);.  As well, Point supports C#
             Deconstruction syntax.
            
             Point also provides operators and static helper functions that perform common grid math/operations,
             as well as interoperability with other grid-based classes like <see cref="T:SadRogue.Primitives.Direction"/>.
             </remarks>
        </member>
        <member name="F:SadRogue.Primitives.Point.None">
            <summary>
            Point value that represents None or no position (since Point is not a nullable type).
            You can use this constant instead of null if you wish to avoid the use of Point?.
            </summary>
            <remarks>
            This constant has (x, y) values (int.MinValue, int.MinValue), so a position with those
            x/y values is not considered a valid coordinate by many functions.
            </remarks>
        </member>
        <member name="F:SadRogue.Primitives.Point.Zero">
            <summary>
            Point value representing Zero (eg, (0, 0)).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Point.X">
            <summary>
            X-value of the position.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Point.Y">
            <summary>
            Y-value of the position.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X-value for the coordinate.</param>
            <param name="y">Y-value for the coordinate.</param>
        </member>
        <member name="M:SadRogue.Primitives.Point.BearingOfLine(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Calculates degree bearing of the line (start =&gt; end), where 0 points in the direction <see cref="F:SadRogue.Primitives.Direction.Up"/>.
            </summary>
            <param name="start">Position of line starting point.</param>
            <param name="end">Position of line ending point.</param>
            <returns>The degree bearing of the line specified by the two given points.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.BearingOfLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates degree bearing of the line (start =&gt; end), where 0 points in the direction <see cref="F:SadRogue.Primitives.Direction.Up"/>.
            </summary>
            <param name="startX">X-value of the position of line starting point.</param>
            <param name="startY">Y-value of the position of line starting point.</param>
            <param name="endX">X-value of the position of line ending point.</param>
            <param name="endY">X-value of the position of line ending point.</param>
            <returns>The degree bearing of the line specified by the two given points.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.BearingOfLine(SadRogue.Primitives.Point)">
            <summary>
            Calculates the degree bearing of a line with the given delta-x and delta-y values, where
            0 degrees points in the direction <see cref="F:SadRogue.Primitives.Direction.Up"/>.
            </summary>
            <param name="deltaChange">
            Vector, where deltaChange.X is the change in x-values across the line, and deltaChange.Y
            is the change in y-values across the line.
            </param>
            <returns>The degree bearing of the line with the given dx and dy values.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.BearingOfLine(System.Int32,System.Int32)">
            <summary>
            Calculates the degree bearing of a line with the given delta-x and delta-y values, where
            0 degrees points in the direction <see cref="F:SadRogue.Primitives.Direction.Up"/>.
            </summary>
            <param name="dx">Change in x-value across the line.</param>
            <param name="dy">Change in y-value across the line.</param>
            <returns>The degree bearing of the line with the given dx and dy values.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.EuclideanDistanceMagnitude(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Returns the result of the euclidean distance formula, without the square root -- eg.,
            (c2.X - c1.X) * (c2.X - c1.X) + (c2.Y - c1.Y) * (c2.Y - c1.Y). Use this if you only care
            about the magnitude of the distance -- eg., if you're trying to compare two distances.
            Omitting the square root provides a speed increase.
            </summary>
            <param name="c1">The first point.</param>
            <param name="c2">The second point.</param>
            <returns>
            The "magnitude" of the euclidean distance between the two points -- basically the
            distance formula without the square root.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.EuclideanDistanceMagnitude(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the result of the euclidean distance formula, without the square root -- eg.,
            (c2.X - c1.X) * (c2.X - c1.X) + (c2.Y - c1.Y) * (c2.Y - c1.Y). Use this if you only care
            about the magnitude of the distance -- eg., if you're trying to compare two distances.
            Omitting the square root provides a speed increase.
            </summary>
            <param name="firstX">X-value for the first point.</param>
            <param name="firstY">Y-value for the first point.</param>
            <param name="secondX">X-value for the second point.</param>
            <param name="secondY">Y-value for the second point.</param>
            <returns>
            The "magnitude" of the euclidean distance between the two points -- basically the
            distance formula without the square root.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.EuclideanDistanceMagnitude(SadRogue.Primitives.Point)">
            <summary>
            Returns the result of the euclidean distance formula, without the square root, given the
            dx and dy values between two points -- eg., (deltaChange.X * deltaChange.X) + (deltaChange.Y
            * deltaChange.Y). Use this if you only care about the magnitude of the distance -- eg., if
            you're trying to compare two distances. Omitting the square root provides a speed increase.
            </summary>
            <param name="deltaChange">
            Vector, where deltaChange.X is the change in x-values between the two points, and
            deltaChange.Y is the change in y-values between the two points.
            </param>
            <returns>
            The "magnitude" of the euclidean distance of two locations with the given dx and dy
            values -- basically the distance formula without the square root.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.EuclideanDistanceMagnitude(System.Int32,System.Int32)">
            <summary>
            Returns the result of the euclidean distance formula, without the square root, given the
            dx and dy values between two points -- eg., (deltaChange.X * deltaChange.X) + (deltaChange.Y
            * deltaChange.Y). Use this if you only care about the magnitude of the distance -- eg., if
            you're trying to compare two distances. Omitting the square root provides a speed increase.
            </summary>
            <param name="dx">Change in x-values between the two points.</param>
            <param name="dy">Change in y-values between the two points.</param>
            <returns>
            The "magnitude" of the euclidean distance of two locations with the given dx and dy
            values -- basically the distance formula without the square root.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.Matches(SadRogue.Primitives.Point)">
            <summary>
            True if the given coordinate has equal x and y values to the current one.
            </summary>
            <param name="other">Position to compare.</param>
            <returns>True if the two positions are equal, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.Midpoint(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Returns the midpoint between the two points.
            </summary>
            <param name="c1">The first point.</param>
            <param name="c2">The second point.</param>
            <returns>The midpoint between <paramref name="c1"/> and <paramref name="c2"/>.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.Midpoint(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the midpoint between the two points.
            </summary>
            <param name="firstX">X-value for the first point.</param>
            <param name="firstY">Y-value for the first point.</param>
            <param name="secondX">X-value for the second point.</param>
            <param name="secondY">Y-value for the second point.</param>
            <returns>The midpoint between the two points.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Subtraction(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Returns the coordinate (c1.X - c2.X, c1.Y - c2.Y).
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns>The coordinate(<paramref name="c1"/> - <paramref name="c2"/>).</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Subtraction(SadRogue.Primitives.Point,SadRogue.Primitives.Direction)">
            <summary>
            Returns the coordinate (point.X - direction.DeltaX, point.Y - direction.DeltaY).
            </summary>
            <param name="point"/>
            <param name="direction"/>
            <returns>The coordinate (point.X - direction.DeltaX, point.Y - direction.DeltaY).</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Subtraction(SadRogue.Primitives.Point,System.Int32)">
            <summary>
            Subtracts scalar <paramref name="i"/> from the x and y values of <paramref name="c"/>.
            </summary>
            <param name="c"></param>
            <param name="i"></param>
            <returns>The coordinate (c.X - <paramref name="i"/>, c.Y - <paramref name="i"/>).</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Inequality(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            True if either the x-values or y-values are not equal.
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns>
            True if either the x-values or y-values are not equal, false if they are both equal.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Multiply(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Multiplies the x and y values of the points together.
            </summary>
            <param name="c1"/>
            <param name="c2"/>
            <returns>Position (c1.X * c2.X, c1.Y * c2.Y)</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Multiply(SadRogue.Primitives.Point,System.Int32)">
            <summary>
            Multiplies the x and y of <paramref name="c"/> by <paramref name="i"/>.
            </summary>
            <param name="c"></param>
            <param name="i"></param>
            <returns>Coordinate (c.X * <paramref name="i"/>, c.Y * <paramref name="i"/>)</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Multiply(SadRogue.Primitives.Point,System.Double)">
            <summary>
            Multiplies the x and y value of <paramref name="c"/> by <paramref name="i"/>, rounding
            the result to the nearest integer.
            </summary>
            <param name="c"></param>
            <param name="i"></param>
            <returns>
            Position (c.X * <paramref name="i"/>, c.Y * <paramref name="i"/>), with the resulting values
            rounded to nearest integer.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Division(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Divides the x/y components of <paramref name="c1"/> by the x/y components of <paramref name="c2"/>, rounding each resulting
            value to the nearest integer.
            </summary>
            <param name="c1"/>
            <param name="c2"/>
            <returns>Position (c1.X / c2.X, c1.Y / c2.Y), with each value rounded to the nearest integer.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Division(SadRogue.Primitives.Point,System.Double)">
            <summary>
            Divides the x and y of <paramref name="c"/> by <paramref name="i"/>, rounding resulting values
            to the nearest integer.
            </summary>
            <param name="c"></param>
            <param name="i"></param>
            <returns>(c.X / <paramref name="i"/>, c.Y / <paramref name="i"/>), with the resulting values rounded to the nearest integer.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Addition(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Returns the position (c1.X + c2.X, c1.Y + c2.Y).
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns>The position (c1.X + c2.X, c1.Y + c2.Y)</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Addition(SadRogue.Primitives.Point,System.Int32)">
            <summary>
            Adds scalar i to the x and y values of <paramref name="c"/>.
            </summary>
            <param name="c"></param>
            <param name="i"></param>
            <returns>Position (c.X + <paramref name="i"/>, c.Y + <paramref name="i"/>.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Addition(SadRogue.Primitives.Point,SadRogue.Primitives.Direction)">
            <summary>
            Translates the given position by one unit in the given direction.
            </summary>
            <param name="c"></param>
            <param name="d"></param>
            <returns>
            Position (c.X + d.DeltaX, c.Y + d.DeltaY)
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Equality(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            True if c1.X == c2.X and c1.Y == c2.Y.
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns>True if the two positions are equal, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.FromIndex(System.Int32,System.Int32)">
            <summary>
            Reverses the ToIndex functions, returning the position represented by a given index.
            </summary>
            <param name="index">The index in 1D form.</param>
            <param name="width">The width of the 2D array.</param>
            <returns>The position represented by the 1D index given.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.ToIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns <paramref name="y"/> * <paramref name="width"/> + <paramref name="x"/>.
            </summary>
            <param name="x">X-value of the coordinate.</param>
            <param name="y">Y-value of the coordinate.</param>
            <param name="width">The width of the 2D array, used to do the math to calculate index.</param>
            <returns>The 1D index of the position specified.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.ToXValue(System.Int32,System.Int32)">
            <summary>
            Reverses the ToIndex functions, returning only the X-value for the given index.
            </summary>
            <param name="index">The index in 1D form.</param>
            <param name="width">The width of the 2D array.</param>
            <returns>The X-value for the location represented by the given index.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.ToYValue(System.Int32,System.Int32)">
            <summary>
            Reverses the ToIndex functions, returning only the Y-value for the given index.
            </summary>
            <param name="index">The index in 1D form.</param>
            <param name="width">The width of the 2D array.</param>
            <returns>The Y-value for the location represented by the given index.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.Equals(System.Object)">
            <summary>
            Same as operator == in this case; returns false if <paramref name="obj"/> is not a Point.
            </summary>
            <param name="obj">The object to compare the current Point to.</param>
            <returns>
            True if <paramref name="obj"/> is a Point instance, and the two positions are equal, false otherwise.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.GetHashCode">
             <summary>
             Returns a hash code for the Point. It should provide very good performance when points
             are used in Dictionary or HashSet, because it's very fast and produces a fairly low collision rate.
             </summary>
             <remarks>
             This hashing algorithm is a very simple algorithm that is quite fast.  Its rate of collisions will be
             fairly low for most traditional coordinate ranges.  In particular, most sensible positive coordinate ranges
             (at least everything in the range (0, 0) -> (8192, 8192)) produce no collisions.  Including coordinates with
             negative values increases the likelihood that collisions will occur; but the range (-4096, -4096) -> (4096, 4096)
             produces only 8,192 collisions and no single hash value has more than a single collision.
            
             Particularly since Dictionary and HashSet implements prime modulus rather than simple bit masks or shifts,
             this collision rate should virtually never impact performance over these ranges (or even higher ranges, likely).
             Since the algorithm is also fast, this makes it a good fit for a general-case hashing algorithm in C#.
             </remarks>
             <returns>The hash-code for the Point.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.ToIndex(System.Int32)">
            <summary>
            Returns a value that can be used to uniquely index this location 1D array.
            </summary>
            <param name="width">The width of the 2D map/array this location is referring to --
            used to do the math to calculate index.</param>
            <returns>The 1D index of this Point.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.ToString">
            <summary>
            Returns representation (X, Y).
            </summary>
            <returns>String (X, Y)</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.Translate(SadRogue.Primitives.Point)">
            <summary>
            Returns the position resulting from adding dx to the X-value of the position, and dy
            to the Y-value of the position.
            </summary>
            <param name="deltaChange">
            Vector where deltaChange.X represents the delta-x value and deltaChange.Y represents the
            delta-y value.
            </param>
            <returns>The position (<see cref="F:SadRogue.Primitives.Point.X"/> + deltaChange.X, <see cref="F:SadRogue.Primitives.Point.Y"/> + deltaChange.Y)</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.Translate(System.Int32,System.Int32)">
            <summary>
            Returns the position resulting from adding dx to the X-value of the position, and dy
            to the Y-value of the position.
            </summary>
            <param name="dx">Change in x-value to apply.</param>
            <param name="dy">Change in y-value to apply.</param>
            <returns>The position (<see cref="F:SadRogue.Primitives.Point.X"/> + dx, <see cref="F:SadRogue.Primitives.Point.Y"/> + dy)</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.WithX(System.Int32)">
            <summary>
            Creates a new Point with its X value moved to the given one.
            </summary>
            <param name="x">X-value for the new Point.</param>
            <returns>A new Point, with its X value changed to the given one.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.WithY(System.Int32)">
            <summary>
            Creates a new Point with its Y value moved to the given one.
            </summary>
            <param name="y">Y-value for the new Point.</param>
            <returns>A new Point, with its Y value changed to the given one.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.Equals(SadRogue.Primitives.Point)">
            <summary>
            True if the given coordinate has equal x and y values to the current one.
            </summary>
            <param name="other">Position to compare.</param>
            <returns>True if the two positions are equal, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.Deconstruct(System.Int32@,System.Int32@)">
            <summary>
            Adds support for C# Deconstruction syntax.
            </summary>
            <param name="x" />
            <param name="y" />
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Implicit(SadRogue.Primitives.Point)~System.ValueTuple{System.Int32,System.Int32}">
            <summary>
            Implicitly converts a Point to an equivalent tuple of two integers.
            </summary>
            <param name="c" />
            <returns />
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Implicit(System.ValueTuple{System.Int32,System.Int32})~SadRogue.Primitives.Point">
            <summary>
            Implicitly converts a tuple of two integers to an equivalent Point.
            </summary>
            <param name="tuple" />
            <returns />
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Addition(System.ValueTuple{System.Int32,System.Int32},SadRogue.Primitives.Point)">
            <summary>
            Adds the x and y values of a Point to the corresponding values of a tuple of two integers.
            </summary>
            <param name="tuple" />
            <param name="c" />
            <returns>A tuple (tuple.x + c.X, tuple.y + c.Y).</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Addition(SadRogue.Primitives.Point,System.ValueTuple{System.Int32,System.Int32})">
            <summary>
            Adds the x and y values of a tuple of two integers to a Point.
            </summary>
            <param name="c" />
            <param name="tuple" />
            <returns>Position (c.X + tuple.x, c.Y + tuple.y).</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Subtraction(System.ValueTuple{System.Int32,System.Int32},SadRogue.Primitives.Point)">
            <summary>
            Subtracts the x and y values of a Point from a tuple of two integers.
            </summary>
            <param name="tuple" />
            <param name="c" />
            <returns>A tuple (tuple.x - c.X, tuple.y - c.Y).</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Subtraction(SadRogue.Primitives.Point,System.ValueTuple{System.Int32,System.Int32})">
            <summary>
            Subtracts the x and y values of a tuple of two integers from a Point.
            </summary>
            <param name="c" />
            <param name="tuple" />
            <returns>Position (c.X - tuple.x, c.Y - tuple.y).</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Multiply(System.ValueTuple{System.Int32,System.Int32},SadRogue.Primitives.Point)">
            <summary>
            Multiples the x and y values of a tuple of two integers by the x and y values of a Point.
            </summary>
            <param name="tuple"/>
            <param name="c"/>
            <returns>Position (tuple.x * c.X, tuple.y * c.Y).</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Multiply(SadRogue.Primitives.Point,System.ValueTuple{System.Int32,System.Int32})">
            <summary>
            Multiples the x and y values of a Point by the x and y values of a tuple of two integers.
            </summary>
            <param name="c"/>
            <param name="tuple"/>
            <returns>Position (c.X * tuple.x, c.Y * tuple.y).</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Division(System.ValueTuple{System.Int32,System.Int32},SadRogue.Primitives.Point)">
            <summary>
            Divides the x/y values of a tuple of two integers by the x/y values of a Point, rounding to the nearest integer.
            </summary>
            <param name="tuple"/>
            <param name="c"/>
            <returns>Position (tuple.x / c.X, tuple.y / c.Y), with each value rounded to the nearest integer.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Division(SadRogue.Primitives.Point,System.ValueTuple{System.Int32,System.Int32})">
            <summary>
            Divides the x/y values of a Point by the x/y values of a tuple of two integers, rounding to the nearest integer.
            </summary>
            <param name="tuple"/>
            <param name="c"/>
            <returns>Position (c.X / tuple.x, c.Y / tuple.y), with each value rounded to the nearest integer.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Equality(SadRogue.Primitives.Point,System.ValueTuple{System.Int32,System.Int32})">
            <summary>
            True if the two point's x and y values are equal.
            </summary>
            <param name="c"></param>
            <param name="tuple"></param>
            <returns>True if the two positions are equal, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Inequality(SadRogue.Primitives.Point,System.ValueTuple{System.Int32,System.Int32})">
            <summary>
            True if either the x-values or y-values are not equal.
            </summary>
            <param name="c"></param>
            <param name="tuple"></param>
            <returns>
            True if either the x-values or y-values are not equal, false if they are both equal.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Equality(System.ValueTuple{System.Int32,System.Int32},SadRogue.Primitives.Point)">
            <summary>
            True if the two point's x and y values are equal.
            </summary>
            <param name="tuple"></param>
            <param name="c"></param>
            <returns>True if the two positions are equal, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Inequality(System.ValueTuple{System.Int32,System.Int32},SadRogue.Primitives.Point)">
            <summary>
            True if either the x-values or y-values are not equal.
            </summary>
            <param name="tuple"></param>
            <param name="c"></param>
            <returns>
            True if either the x-values or y-values are not equal, false if they are both equal.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.Equals(System.ValueTuple{System.Int32,System.Int32})">
            <summary>
            True if the given position has equal x and y values to the current one.
            </summary>
            <param name="other">Tuple to compare.</param>
            <returns>True if the two positions are equal, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.Matches(System.ValueTuple{System.Int32,System.Int32})">
            <summary>
            True if the given position has equal x and y values to the current one.
            </summary>
            <param name="other">Point to compare.</param>
            <returns>True if the two positions are equal, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.op_Implicit(SadRogue.Primitives.Point)~SadRogue.Primitives.PolarCoordinate">
            <summary>
            Implicitly converts a Point to its equivalent polar coordinate.
            </summary>
            <param name="pos">Point to convert.</param>
            <returns>A <see cref="T:SadRogue.Primitives.PolarCoordinate"/> equivalent to this cartesian point.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.ToPolarCoordinate">
            <summary>
            Returns a Polar Coordinate that is equivalent to this (Cartesian) Coordinate
            </summary>
            <returns>The Equivalent Polar Coordinate</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.Rotate(System.Double)">
            <summary>
            Rotates a single point around the origin (0, 0).
            </summary>
            <param name="degrees">The amount of Degrees to rotate this point clockwise</param>
            <returns>The equivalent point after a rotation</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.Rotate(System.Double,SadRogue.Primitives.Point)">
            <summary>
            Rotates a single point around the origin point.
            </summary>
            <param name="degrees">The amount of Degrees to rotate this point</param>
            <param name="origin">The Point around which to rotate</param>
            <returns>The equivalent point after a rotation</returns>
        </member>
        <member name="M:SadRogue.Primitives.Point.Rotate(System.Double,System.Int32,System.Int32)">
            <summary>
            Rotates a single point around the origin point.
            </summary>
            <param name="degrees">The amount of Degrees to rotate this point</param>
            <param name="originX">X-value of the location around which to rotate</param>
            <param name="originY">Y-value of the location around which to rotate</param>
            <returns>The equivalent point after a rotation</returns>
        </member>
        <member name="T:SadRogue.Primitives.PointExtensions">
            <summary>
            Contains set of operators that match ones defined by other packages for interoperability,
            so syntax may be uniform.  Functionality is similar to the corresponding actual operators for Point.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.PointExtensions.Add(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Adds the given Point's x/y values to the current Point's x/y values.
            </summary>
            <param name="self"/>
            <param name="other"/>
            <returns>Position (self.X + other.X, self.Y + other.Y).</returns>
        </member>
        <member name="M:SadRogue.Primitives.PointExtensions.Add(SadRogue.Primitives.Point,System.Int32)">
            <summary>
            Adds the given scalar to the current Point's x/y values.
            </summary>
            <param name="self"/>
            <param name="i"/>
            <returns>Position (self.X + i, self.Y + i).</returns>
        </member>
        <member name="M:SadRogue.Primitives.PointExtensions.Add(SadRogue.Primitives.Point,SadRogue.Primitives.Direction)">
            <summary>
            Translates the current position by one unit in the given direction.
            </summary>
            <param name="self"/>
            <param name="dir"/>
            <returns>Position (self.X + dir.DeltaX, self.Y + dir.DeltaY)</returns>
        </member>
        <member name="M:SadRogue.Primitives.PointExtensions.Subtract(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Subtracts the given Point's x/y values from the current Point's x/y values.
            </summary>
            <param name="self"/>
            <param name="other"/>
            <returns>Position (self.X - other.X, self.Y - other.Y).</returns>
        </member>
        <member name="M:SadRogue.Primitives.PointExtensions.Subtract(SadRogue.Primitives.Point,System.Int32)">
            <summary>
            Subtracts the given scalar from the current Point's x/y values.
            </summary>
            <param name="self"/>
            <param name="i"/>
            <returns>Position (self.X - i, self.Y - i).</returns>
        </member>
        <member name="M:SadRogue.Primitives.PointExtensions.Subtract(SadRogue.Primitives.Point,SadRogue.Primitives.Direction)">
            <summary>
            Translates the current position by one unit in the opposite of the given direction.
            </summary>
            <param name="self"/>
            <param name="dir"/>
            <returns>Position (self.X - dir.DeltaX, self.Y - dir.DeltaY)</returns>
        </member>
        <member name="M:SadRogue.Primitives.PointExtensions.Multiply(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Multiplies the current Point's x/y values by the given Point's x/y values.
            </summary>
            <param name="self"/>
            <param name="other"/>
            <returns>Position (self.X * other.X, self.Y * other.Y).</returns>
        </member>
        <member name="M:SadRogue.Primitives.PointExtensions.Multiply(SadRogue.Primitives.Point,System.Int32)">
            <summary>
            Multiplies the current Point's x/y values by the given scalar.
            </summary>
            <param name="self"/>
            <param name="i"/>
            <returns>Position (self.X * i, self.Y * i).</returns>
        </member>
        <member name="M:SadRogue.Primitives.PointExtensions.Multiply(SadRogue.Primitives.Point,System.Double)">
            <summary>
            Multiplies the current Point's x/y values by the given scalar, rounding to the nearest integer.
            </summary>
            <param name="self"/>
            <param name="d"/>
            <returns>Position (self.X * d, self.Y * d), with each value rounded to the nearest integer.</returns>
        </member>
        <member name="M:SadRogue.Primitives.PointExtensions.Divide(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Divides the current Point's x/y values by the given Point's x/y values, rounding to the nearest integer.
            </summary>
            <param name="self"/>
            <param name="other"/>
            <returns>Position (self.X / other.X, self.Y / other.Y), with each value rounded to the nearest integer.</returns>
        </member>
        <member name="M:SadRogue.Primitives.PointExtensions.Divide(SadRogue.Primitives.Point,System.Int32)">
            <summary>
            Divides the current Point's x/y values by the given scalar, rounding to the nearest integer.
            </summary>
            <param name="self"/>
            <param name="i"/>
            <returns>Position(self.X / i, self.Y / i), with each value rounded to the nearest integer.</returns>
        </member>
        <member name="M:SadRogue.Primitives.PointExtensions.Divide(SadRogue.Primitives.Point,System.Double)">
            <summary>
            Divides the current Point's x/y values by the given scalar, rounding to the nearest integer.
            </summary>
            <param name="self"/>
            <param name="d"/>
            <returns>Position(self.X / d, self.Y / d), with each value rounded to the nearest integer.</returns>
        </member>
        <member name="M:SadRogue.Primitives.PointExtensions.Matches(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Compares the two points for equality; equivalent to <see cref="M:SadRogue.Primitives.Point.Matches(SadRogue.Primitives.Point)"/>.
            </summary>
            <param name="self"/>
            <param name="other"/>
            <returns>True if the two points are equal; false otherwise.</returns>
        </member>
        <member name="T:SadRogue.Primitives.PointHashers.KnownRangeHasher">
             <summary>
             NON-GENERALIZED hashing algorithm for <see cref="T:SadRogue.Primitives.Point"/> instances that calculates a hash, assuming a known
             minimum and maximum extent of the Points being hashed.
             </summary>
             <remarks>
             This is NOT an efficient generalized hashing algorithm; it generates a hash code using the assumption
             of a "maximum range" of x/y values in which all the points given to it to hash fall.  It simply normalizes
             the points to a range of (0, 0), to (x_1, y_1), then hashes them via a simple call to
             <see cref="M:SadRogue.Primitives.Point.ToIndex(System.Int32)"/>. The algorithm WILL still function on points outside of the min/max extents;
             however it will start to generate more collisions.
            
             This algorithm is nonetheless useful in some cases; the assumption that points will fall from
             (minX, minY) to some known max width/height is fairly common (as it could apply to any fixed-size grid).
             Since this algorithm can be significantly faster to compute than fully generalized algorithms, it can be
             useful for these cases.
             </remarks>
        </member>
        <member name="F:SadRogue.Primitives.PointHashers.KnownRangeHasher.MinExtent">
            <summary>
            Minimum x/y values that will generally occur in points hashed by this instance.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.PointHashers.KnownRangeHasher.BoundsWidth">
            <summary>
            Width of the area which encompasses points which will generally be hashed by this algorithm, starting at
            <see cref="F:SadRogue.Primitives.PointHashers.KnownRangeHasher.MinExtent"/>.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.PointHashers.KnownRangeHasher.#ctor(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Creates a new instance of the comparison/hashing algorithm implementation.
            </summary>
            <param name="minExtent">
            Point whose x and y values constitute the minimum x/y values that will
            generally be encountered in Point instances that are hashed by this algorithm.
            </param>
            <param name="maxExtent">
            Point whose x and y values constitute the maximum x/y values that will
            generally be encountered in Point instances that are hashed by this algorithm.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.PointHashers.KnownRangeHasher.#ctor(SadRogue.Primitives.Rectangle)">
            <summary>
            Creates a new instance of the comparison/hashing algorithm implementation.
            </summary>
            <param name="bounds">
            Bounds encompassing the area which points generally hashed by this algorithm will reside within.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.PointHashers.KnownRangeHasher.#ctor(SadRogue.Primitives.Point,System.Int32)">
            <summary>
            Creates a new instance of the comparison/hashing algorithm implementation.
            </summary>
            <param name="minExtent">
            Point whose x and y values constitute the minimum x/y values that will
            generally be encountered in Point instances that are hashed by this algorithm.
            </param>
            <param name="boundsWidth">
            Width of the bounds that will generally encompass Points hashed by this hashing algorithm.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.PointHashers.KnownRangeHasher.Equals(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.PointHashers.KnownRangeHasher.GetHashCode(SadRogue.Primitives.Point)">
            <inheritdoc/>
        </member>
        <member name="T:SadRogue.Primitives.PointHashers.KnownSizeHasher">
             <summary>
             NON-GENERALIZED hashing algorithm for <see cref="T:SadRogue.Primitives.Point"/> instances that calculates a hash, assuming points will
             fall between (0, 0) and some known maximum width.
             </summary>
             <remarks>
             This is NOT an efficient generalized hashing algorithm; it generates a hash code using the assumption
             that any points given to it fall between (0, 0) and the (width - 1, arbitrary_y).  It simply uses the
             <see cref="M:SadRogue.Primitives.Point.ToIndex(System.Int32)"/> function to generate a hash.  The algorithm WILL still function on points
             outside of the assumed bounds; however it will simply start to generate collisions.
            
             This algorithm is nonetheless useful in some cases; the assumption that points will fall from
             (0, 0) to some known max x-value is fairly common (as it could apply to any fixed-size grid).  Since this
             algorithm can be significantly faster to compute than fully generalized algorithms, it can be useful for these
             cases.
             </remarks>
        </member>
        <member name="F:SadRogue.Primitives.PointHashers.KnownSizeHasher.BoundsWidth">
            <summary>
            The width of the area points are assumed to fall in.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.PointHashers.KnownSizeHasher.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the comparison/hashing algorithm implementation.
            </summary>
            <param name="boundsWidth">
            The width of the area points are assumed to fall in.  Points are assumed to fall between (0, 0)
            and (boundsWidth - 1).  It WILL hash points outside this range, however doing so may generate
            collisions.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.PointHashers.KnownSizeHasher.Equals(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.PointHashers.KnownSizeHasher.GetHashCode(SadRogue.Primitives.Point)">
            <inheritdoc/>
        </member>
        <member name="T:SadRogue.Primitives.PolarCoordinate">
            <summary>
            A Polar Coordinate.
            </summary>
            <remarks>
            See wikipedia: https://en.wikipedia.org/wiki/Polar_coordinate_system
            Polar Coordinates are very, very slow and should not be used often
            </remarks>
        </member>
        <member name="F:SadRogue.Primitives.PolarCoordinate.Radius">
            <summary>
            The distance away from the Origin (0,0) of this Polar Coordinate
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.PolarCoordinate.Theta">
            <summary>
            The angle of rotation, clockwise, in radians
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new Polar Coordinate with the given Radius and Theta
            </summary>
            <param name="radius">Radius of the Polar Coordinate</param>
            <param name="theta">Degree of rotation (clockwise) of the Polar Coordinate</param>
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.ToString">
            <summary>
            Override ToString to help you debug
            </summary>
            <returns>A short representation of the Polar Coordinate</returns>
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.op_Equality(SadRogue.Primitives.PolarCoordinate,SadRogue.Primitives.PolarCoordinate)">
            <summary>
            Compares two polar Coordinates
            </summary>
            <param name="left">The first polar coordinate to analyze</param>
            <param name="right">The Second polar coordinate to analyze</param>
            <returns>Whether or not these two Polar Coordinates are similar enough to be considered "Equal"</returns>
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.op_Inequality(SadRogue.Primitives.PolarCoordinate,SadRogue.Primitives.PolarCoordinate)">
            <summary>
            Compares two PolarCoordinates
            </summary>
            <param name="left">The first polar coordinate to analyze</param>
            <param name="right">The second PolarCoordinate to analyze</param>
            <returns>Whether these polar coordinates are dissimilar enough to not be equal</returns>
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.GetHashCode">
            <summary>
            Gets the Object's Hash Code
            </summary>
            <returns>A Hash code.</returns>
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.Equals(SadRogue.Primitives.PolarCoordinate)">
            <summary>
            Performs comparison between this PolarCoordinate and an other
            </summary>
            <param name="other">The other Polar Coordinate to analyze</param>
            <returns>Whether these two PolarCoordinates are equal</returns>
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.Equals(System.Object)">
            <summary>
            Compares the equality of this Polar Coordinate to another object
            </summary>
            <param name="obj">The object against which to compare</param>
            <returns>Whether or not these objects are equal</returns>
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.Matches(SadRogue.Primitives.PolarCoordinate)">
            <summary>
            Performs comparison between this PolarCoordinate and an other
            </summary>
            <param name="other">The other Polar Coordinate to analyze</param>
            <returns>Whether these two PolarCoordinates are equal</returns>
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.op_Implicit(SadRogue.Primitives.PolarCoordinate)~SadRogue.Primitives.Point">
            <summary>
            Implicitly converts the polar coordinate to its cartesian plane equivalent.
            </summary>
            <param name="pos">Polar coordinate to convert.</param>
            <returns>The equivalent cartesian coordinate.</returns>
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.ToCartesian">
            <summary>
            Returns the Cartesian Equivalent of this Polar Coordinate
            </summary>
            <returns>A Cartesian Coordinate that points at the same spot on the map as the Polar Coordinate</returns>
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.FromCartesian(SadRogue.Primitives.Point)">
            <summary>
            Returns a new PolarCoordinate that is equivalent to the Cartesian point provided.
            </summary>
            <param name="cartesian">The cartesian point to analyze</param>
            <returns>An Equivalent Polar Coordinate</returns>
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.FromCartesian(System.Int32,System.Int32)">
            <summary>
            Returns a new PolarCoordinate that is equivalent to the Cartesian point provided.
            </summary>
            <param name="cartesianX">X-value of the cartesian point to analyze.</param>
            <param name="cartesianY">Y-value of the cartesian point to analyze.</param>
            <returns>An Equivalent Polar Coordinate</returns>
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.Deconstruct(System.Double@,System.Double@)">
            <summary>
            Adds support for C# Deconstruction syntax.
            </summary>
            <param name="radius" />
            <param name="theta" />
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.op_Implicit(SadRogue.Primitives.PolarCoordinate)~System.ValueTuple{System.Double,System.Double}">
            <summary>
            Implicitly converts a PolarCoordinate to an equivalent tuple of two doubles.
            </summary>
            <param name="c" />
            <returns />
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.op_Implicit(System.ValueTuple{System.Double,System.Double})~SadRogue.Primitives.PolarCoordinate">
            <summary>
            Implicitly converts a tuple of two doubles to an equivalent PolarCoordinate.
            </summary>
            <param name="tuple" />
            <returns />
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.Equals(System.ValueTuple{System.Double,System.Double})">
            <summary>
            Compares the values in this polar coordinate to the specified values.
            </summary>
            <param name="other"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.Matches(System.ValueTuple{System.Double,System.Double})">
            <summary>
            Compares the values in this polar coordinate to the specified values.
            </summary>
            <param name="other"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.op_Equality(SadRogue.Primitives.PolarCoordinate,System.ValueTuple{System.Double,System.Double})">
            <summary>
            True if the two polar coordinates' radius and theta values are close enough to equal.
            </summary>
            <param name="c"></param>
            <param name="tuple"></param>
            <returns>True if the two polar coordinates are equivalent, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.op_Inequality(SadRogue.Primitives.PolarCoordinate,System.ValueTuple{System.Double,System.Double})">
            <summary>
            True if either the radius or theta values aren't equivalent.
            </summary>
            <param name="c"></param>
            <param name="tuple"></param>
            <returns>
            True if either the radius or theta values are not equal, false if they are both equal.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.op_Equality(System.ValueTuple{System.Double,System.Double},SadRogue.Primitives.PolarCoordinate)">
            <summary>
            True if the two polar coordinate's values are equivalent.
            </summary>
            <param name="tuple"></param>
            <param name="c"></param>
            <returns>True if the two polar coordinates are equal, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.PolarCoordinate.op_Inequality(System.ValueTuple{System.Double,System.Double},SadRogue.Primitives.PolarCoordinate)">
            <summary>
            True if either the radius or theta values are not equal.
            </summary>
            <param name="tuple"></param>
            <param name="c"></param>
            <returns>
            True if either the radius or theta values are not equal, false if they are both equal.
            </returns>
        </member>
        <member name="P:SadRogue.Primitives.PolarCoordinate.Functions">
             <summary>
             A handy list of example polar functions for you.
             </summary>
             <remarks>
             This list contains several examples of Polar Coordinates you can use.
             Add more by calling `PolarFunctions.Add((theta) => { Return new PolarCoordinate(radius, theta);});`
            
             Each function accepts a parameter of Theta, which is the angle of rotation around the center.
             They return a Point that can be used on the map.
             Polar functions are very slow. Use them seldom, for things like spirographs
             As the radius gets larger, there will be increased likelihood of functions producing gaps in output.
             You've been warned.
             </remarks>
        </member>
        <member name="T:SadRogue.Primitives.Pooling.IListPool`1">
            <summary>
            A basic interface for classes which act as a pool of <see cref="T:System.Collections.Generic.List`1"/> structures.  It provides functions to
            rent lists from the pool, return them, and limit the number of lists kept in the pool.
            </summary>
            <remarks>
            The API for this interface is generally inspired by <see cref="T:System.Buffers.ArrayPool`1"/>, and serves a similar
            purpose, except for lists.  Note that, at the current time, the API is more limited and the implementation less
            efficient than ArrayPool.  The biggest difference is that this pool effectively assumes lists are blank, and
            doesn't have any way to take into account list capacity when requesting a list.
            </remarks>
            <typeparam name="T">Type of items being stored in the list.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.Pooling.IListPool`1.Rent">
            <summary>
            Retrieve a list from the pool, or allocate a new one if there are no lists available.
            </summary>
            <returns>A list from the pool, or a new list if no lists are available in the pool.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Pooling.IListPool`1.Return(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            Returns the given list to the pool.
            </summary>
            <param name="list">The list to return.</param>
            <param name="clear">
            Whether or not to clear the list given before adding it to the pool.  Should be set to true unless you are
            absolutely sure the list is cleared via other means before passing it.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.Pooling.IListPool`1.Clear">
            <summary>
            Clears the pool of all lists.
            </summary>
        </member>
        <member name="T:SadRogue.Primitives.Pooling.ListPool`1">
            <summary>
            A basic implementation of <see cref="T:SadRogue.Primitives.Pooling.IListPool`1"/> which uses a simple List of lists to store the pool.
            </summary>
            <typeparam name="T">Type of items being stored in the list.</typeparam>
        </member>
        <member name="P:SadRogue.Primitives.Pooling.ListPool`1.MaxLists">
            <summary>
            Maximum number of lists that are allowed to be in the pool at any given time.  Any lists beyond this number
            which are returned, are allowed to be GCed.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Pooling.ListPool`1.MaxCapacity">
            <summary>
            The maximum <see cref="P:System.Collections.Generic.List`1.Capacity"/> allowed for lists that are returned via <see cref="M:SadRogue.Primitives.Pooling.ListPool`1.Return(System.Collections.Generic.List{`0},System.Boolean)"/>.
            Any lists with capacities over this value are shrunk to this value when they are returned.
            </summary>
            <remarks>
            This value, in combination with <see cref="P:SadRogue.Primitives.Pooling.ListPool`1.MaxLists"/>, ensures that a hard limit can be imposed on the memory usage
            for a pool.  However, if this value is small relative to the actual capacity of lists being returned, it will
            result in lists that are constantly shrunk then sized back up when they are used; and as such it will reduce
            the effectiveness of the pool.
            </remarks>
        </member>
        <member name="M:SadRogue.Primitives.Pooling.ListPool`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new pool with the given parameters.
            </summary>
            <param name="maxLists">
            Maximum number of lists that are allowed to be in the pool at any given time.  Any lists beyond this number
            which are returned, are allowed to be GCed.
            </param>
            <param name="maxCapacity">
            The maximum <see cref="P:System.Collections.Generic.List`1.Capacity"/> allowed for lists that are returned via <see cref="M:SadRogue.Primitives.Pooling.ListPool`1.Return(System.Collections.Generic.List{`0},System.Boolean)"/>.
            Any lists with capacities over this value are shrunk to this value when they are returned.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.Pooling.ListPool`1.Rent">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.Pooling.ListPool`1.Return(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            Returns the given list to the pool.  The list will be discarded (and allowed to be queued for GC) if
            there are already at least <see cref="P:SadRogue.Primitives.Pooling.ListPool`1.MaxLists"/> unused lists in the pool.
            </summary>
            <param name="list">The list to return.</param>
            <param name="clear">
            Whether or not to clear the list given before adding it to the pool.  Should be set to true unless you are
            absolutely sure the list is cleared via other means before passing it.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.Pooling.ListPool`1.Clear">
            <inheritdoc/>
        </member>
        <member name="T:SadRogue.Primitives.Pooling.NoPoolingListPool`1">
            <summary>
            A pseudo-implementation of the IListPool interface which doesn't actually do any pooling; eg. its functions
            simply return a new list or discard the one they receive.  Useful for specifying "don't pool" to a function
            or algorithm which takes a list pool.
            </summary>
            <typeparam name="T">Type of items in the list.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.Pooling.NoPoolingListPool`1.Rent">
            <summary>
            Creates a new list and returns it.
            </summary>
            <returns>A newly allocated list.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Pooling.NoPoolingListPool`1.Return(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            Does nothing, simply allowing the given list to be GCed.
            </summary>
            <param name="list">List to "return".</param>
            <param name="clear">Ignored.</param>
        </member>
        <member name="M:SadRogue.Primitives.Pooling.NoPoolingListPool`1.Clear">
            <summary>
            Does nothing, since this list pool implementation does not maintain a pool.
            </summary>
        </member>
        <member name="T:SadRogue.Primitives.ValueChangedEventArgs`1">
             <summary>
             Event arguments for an event fired when an object's properties are changed.  Often used with
             <see cref="M:SadRogue.Primitives.PropertyChangedEventHelpers.SafelySetProperty``2(``0,``1@,``1,System.EventHandler{SadRogue.Primitives.ValueChangedEventArgs{``1}})"/>
             and other overloads of that function.
             </summary>
             <remarks>
             It is fairly common to have an event that is fired when a property is changed; a common use case relative to
             2D grids is objects that have a position and fire an event when that position changes. This class encapsulates a
             generic event argument for such occurrences.
            
             In addition to implementing basic functionality for handling value changes, it also has the appropriate flags for
             implementing the concept of "handling" an event; if supported by the event, this allows one event handler to
             mark the event as "handled" and stop other event handlers from being run.
             </remarks>
             <typeparam name="TProperty">Type of the property changed.</typeparam>
        </member>
        <member name="F:SadRogue.Primitives.ValueChangedEventArgs`1.OldValue">
            <summary>
            Previous value of property.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ValueChangedEventArgs`1.NewValue">
            <summary>
            New value of property.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.ValueChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Constructor.
            </summary>
            <param name="oldValue">Previous value of property.</param>
            <param name="newValue">New value of property.</param>
        </member>
        <member name="T:SadRogue.Primitives.PropertyChangedEventHelpers">
            <summary>
            Helper functions useful for implementing events using <see cref="T:SadRogue.Primitives.ValueChangedEventArgs`1"/> as their parameter.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.PropertyChangedEventHelpers.SafelySetProperty``2(``0,``1@,``1,System.EventHandler{SadRogue.Primitives.ValueChangedEventArgs{``1}})">
             <summary>
             Sets the given field to the new value, and fires the corresponding event just after the value has been changed.
             The value will be properly reverted to the old value if the event handler throws InvalidOperationException.
             </summary>
             <remarks>
             It is fairly common to have an object with a property, such that when the property changes, an event is fired.
             <see cref="T:SadRogue.Primitives.IPositionable"/> represents one such interface that is common when dealing with a 2D grid.
            
             Although the implementation of such a property is relatively trivial, there are a few subtle issues that
             can occur:
             - The event might be fired even if the property was set to the same value it is currently
             - If a handler throws something like InvalidOperationException, the value may not be reverted properly.
            
             This function represents a convenient way to implement such a property.  An implementation using this property
             might look like the example below.
            
             Note that this function can work for properties of any type; you could just as easily implement <see cref="T:SadRogue.Primitives.IPositionable"/>
             via this interface, for example.
            
             <example>
             <code>
             class MyClass
             {
                 private int _myProperty;
                 public int MyProperty
                 {
                     get => _myProperty;
                     set => this.SafelySetProperty(ref _myProperty, value, MyPropertyChanged);
                 }
                 public event EventHandler&lt;ValueChangedEventArgs&lt;int&gt;&gt;? MyPropertyChanged;
             }
             </code>
            </example>
             </remarks>
             <param name="self" />
             <param name="propertyField">Field to set.</param>
             <param name="newValue">New value to set to given field.</param>
             <param name="changedEvent">Event to fire when change occurs.</param>
             <typeparam name="TObject">Type of the object the property resides on.</typeparam>
             <typeparam name="TProperty">Type of the property.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.PropertyChangedEventHelpers.SafelySetProperty``2(``0,``1@,``1,System.EventHandler{SadRogue.Primitives.ValueChangedEventArgs{``1}},System.EventHandler{SadRogue.Primitives.ValueChangedEventArgs{``1}})">
            <summary>
            Sets the given field to the new value, and fires the corresponding events.  The value will be properly
            reverted to the old value if the Changed event handler throws InvalidOperationException.  The "changing"
            event will be fired just _before_ the value actually changes; the "changed" event will be fired just after.
            </summary>
            <param name="self" />
            <param name="propertyField">Field to set.</param>
            <param name="newValue">New value to set to given field.</param>
            <param name="changingEvent">Event to fire when change is about to occur.</param>
            <param name="changedEvent">Event to fire after change occurs.</param>
            <typeparam name="TObject">Type of the object the property resides on.</typeparam>
            <typeparam name="TProperty">Type of the property.</typeparam>
        </member>
        <member name="T:SadRogue.Primitives.Radius">
            <summary>
            Structure representing different shapes that define the concept of a radius on a grid. You cannot
            create instances of this class using a constructor -- instead, this class contains static instances
            representing the various radius shapes.
            </summary>
            <remarks>
            Contains utility functions to work with radius shapes.  Instances of Radius are also implicitly
            convertible to both <see cref="T:SadRogue.Primitives.Distance"/> and <see cref="T:SadRogue.Primitives.AdjacencyRule"/> (since both a method
            of determining adjacent locations and a method of calculating distance are implied by a radius
            shape).
            </remarks>
        </member>
        <member name="F:SadRogue.Primitives.Radius.Circle">
            <summary>
            Radius is a circle around the center point. CIRCLE would represent movement radius in
            an 8-way movement scheme with a ~1.41 cost multiplier for diagonal movement.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Radius.Diamond">
            <summary>
            Radius is a diamond around the center point. DIAMOND would represent movement radius
            in a 4-way movement scheme.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Radius.Square">
            <summary>
            Radius is a square around the center point. SQUARE would represent movement radius in
            an 8-way movement scheme, where all 8 squares around an item are considered equal distance
            away.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Radius.Type">
            <summary>
            Enum value representing the radius shape -- useful for using Radius types in switch
            statements.
            </summary>
        </member>
        <member name="T:SadRogue.Primitives.Radius.Types">
            <summary>
            Enum representing Radius types. Each Radius instance has a <see cref="F:SadRogue.Primitives.Radius.Type"/> field
            which contains the corresponding value from this enum.  Useful for easy mapping of Radius
            types to a primitive type (for cases like a switch statement).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Radius.Types.Square">
            <summary>
            Type for Radius.SQUARE.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Radius.Types.Diamond">
            <summary>
            Type for Radius.DIAMOND.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Radius.Types.Circle">
            <summary>
            Type for Radius.CIRCLE.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.Radius.PositionsInRadius(SadRogue.Primitives.Point,System.Int32,SadRogue.Primitives.Rectangle)">
             <summary>
             Returns an IEnumerable of all positions in a radius of the current shape defined by the given parameters.
             </summary>
             <remarks>
             If you are getting positions for a radius of the same size frequently, it may be more performance-savvy to instead
             construct a <see cref="T:SadRogue.Primitives.RadiusLocationContext"/> to represent it, and pass that to
             <see cref="M:SadRogue.Primitives.Radius.PositionsInRadius(SadRogue.Primitives.RadiusLocationContext)"/>.
            
             The positions returned are all guaranteed to be within the <paramref name="bounds"/> specified.  As well,
             they are guaranteed to be in order from least distance from center to most distance if either
             <see cref="F:SadRogue.Primitives.Radius.Diamond"/> or <see cref="F:SadRogue.Primitives.Radius.Square"/> is being used.
             </remarks>
             <param name="center">Center-point of the radius.</param>
             <param name="radius">Length of the radius.</param>
             <param name="bounds">Bounds to restrict the returned values by.</param>
             <returns>All points in the radius shape defined by the given parameters, in order from least distance to greatest
             if <see cref="F:SadRogue.Primitives.Radius.Diamond"/> or <see cref="F:SadRogue.Primitives.Radius.Square"/> is being used.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Radius.PositionsInRadius(System.Int32,System.Int32,System.Int32,SadRogue.Primitives.Rectangle)">
             <summary>
             Returns an IEnumerable of all positions in a radius of the current shape defined by the given parameters.
             </summary>
             <remarks>
             If you are getting positions for a radius of the same size frequently, it may be more performance-savvy to instead
             construct a <see cref="T:SadRogue.Primitives.RadiusLocationContext"/> to represent it, and pass that to
             <see cref="M:SadRogue.Primitives.Radius.PositionsInRadius(SadRogue.Primitives.RadiusLocationContext)"/>.
            
             The positions returned are all guaranteed to be within the <paramref name="bounds"/> specified.  As well,
             they are guaranteed to be in order from least distance from center to most distance if either
             <see cref="F:SadRogue.Primitives.Radius.Diamond"/> or <see cref="F:SadRogue.Primitives.Radius.Square"/> is being used.
             </remarks>
             <param name="centerX">X-value of the center-point of the radius.</param>
             <param name="centerY">Y-value of the center-point of the radius.</param>
             <param name="radius">Length of the radius.</param>
             <param name="bounds">Bounds to restrict the returned values by.</param>
             <returns>All points in the radius shape defined by the given parameters, in order from least distance to greatest
             if <see cref="F:SadRogue.Primitives.Radius.Diamond"/> or <see cref="F:SadRogue.Primitives.Radius.Square"/> is being used.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Radius.PositionsInRadius(SadRogue.Primitives.Point,System.Int32)">
             <summary>
             Returns an IEnumerable of all positions in a radius of the current shape defined by the given parameters.
             </summary>
             <remarks>
             If you are getting positions for a radius of the same size frequently, it may be more performance-savvy to instead
             construct a <see cref="T:SadRogue.Primitives.RadiusLocationContext"/> to represent it, and pass that to
             <see cref="M:SadRogue.Primitives.Radius.PositionsInRadius(SadRogue.Primitives.RadiusLocationContext)"/>.
            
             The positions returned are guaranteed to be in order from least distance from center to most distance if either
             <see cref="F:SadRogue.Primitives.Radius.Diamond"/> or <see cref="F:SadRogue.Primitives.Radius.Square"/> is being used.
             </remarks>
             <param name="center">Center-point of the radius.</param>
             <param name="radius">Length of the radius.</param>
             <returns>All points in the radius shape defined by the given parameters, in order from least distance to greatest
             if <see cref="F:SadRogue.Primitives.Radius.Diamond"/> or <see cref="F:SadRogue.Primitives.Radius.Square"/> is being used.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Radius.PositionsInRadius(System.Int32,System.Int32,System.Int32)">
             <summary>
             Returns an IEnumerable of all positions in a radius of the current shape defined by the given parameters.
             </summary>
             <remarks>
             If you are getting positions for a radius of the same size frequently, it may be more performance-savvy to instead
             construct a <see cref="T:SadRogue.Primitives.RadiusLocationContext"/> to represent it, and pass that to
             <see cref="M:SadRogue.Primitives.Radius.PositionsInRadius(SadRogue.Primitives.RadiusLocationContext)"/>.
            
             The positions returned are guaranteed to be in order from least distance from center to most distance if either
             <see cref="F:SadRogue.Primitives.Radius.Diamond"/> or <see cref="F:SadRogue.Primitives.Radius.Square"/> is being used.
             </remarks>
             <param name="centerX">X-value of the center-point of the radius.</param>
             <param name="centerY">Y-value of the center-point of the radius.</param>
             <param name="radius">Length of the radius.</param>
             <returns>All points in the radius shape defined by the given parameters, in order from least distance to greatest
             if <see cref="F:SadRogue.Primitives.Radius.Diamond"/> or <see cref="F:SadRogue.Primitives.Radius.Square"/> is being used.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Radius.PositionsInRadius(SadRogue.Primitives.RadiusLocationContext)">
             <summary>
             Returns an IEnumerable of all positions in a radius of the current shape defined by the given context.  Creating
             a context to store, and using this function instead of another overload may be more performance-savvy when you plan to get
             the positions for a radius of the same size multiple times, even if the shape/position are changing.
             </summary>
             <remarks>
             The positions returned are all guaranteed to be within the <see cref="F:SadRogue.Primitives.RadiusLocationContext.Bounds"/> specified in the context, unless
             the bounds are unspecified, in which case no bound restriction results.
            
             As well, they are guaranteed to be in order from least distance from center to most distance if either
             <see cref="F:SadRogue.Primitives.Radius.Diamond"/> or <see cref="F:SadRogue.Primitives.Radius.Square"/> is being used.
             </remarks>
             <param name="context">Context defining radius parameters.</param>
             <returns>All points in the radius shape defined by the given context, in order from least distance to greatest
             if <see cref="F:SadRogue.Primitives.Radius.Diamond"/> or <see cref="F:SadRogue.Primitives.Radius.Square"/> is being used.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Radius.Equals(SadRogue.Primitives.Radius)">
            <summary>
            True if the given Radius has the same Type the current one.
            </summary>
            <param name="other">Radius to compare.</param>
            <returns>True if the two radius shapes are the same, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Radius.Equals(System.Object)">
            <summary>
            Same as operator == in this case; returns false if <paramref name="obj"/> is not a Radius.
            </summary>
            <param name="obj">The object to compare the current Radius to.</param>
            <returns>
            True if <paramref name="obj"/> is a Radius, and the two radius shapes are equal, false otherwise.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Radius.GetHashCode">
            <summary>
            Returns a hash-map value for the current object.
            </summary>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.Radius.Matches(SadRogue.Primitives.Radius)">
            <summary>
            True if the given Radius has the same Type the current one.
            </summary>
            <param name="other">Radius to compare.</param>
            <returns>True if the two radius shapes are the same, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Radius.op_Equality(SadRogue.Primitives.Radius,SadRogue.Primitives.Radius)">
            <summary>
            True if the two radius shapes have the same Type.
            </summary>
            <param name="lhs"/>
            <param name="rhs"/>
            <returns>True if the two radius shapes are equal, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Radius.op_Inequality(SadRogue.Primitives.Radius,SadRogue.Primitives.Radius)">
            <summary>
            True if the types are not equal.
            </summary>
            <param name="lhs"/>
            <param name="rhs"/>
            <returns>
            True if the types are not equal, false if they are both equal.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Radius.op_Implicit(SadRogue.Primitives.Radius)~SadRogue.Primitives.AdjacencyRule">
            <summary>
            Allows implicit casting to the <see cref="T:SadRogue.Primitives.AdjacencyRule"/> type.
            </summary>
            <remarks>
            The rule corresponding to the proper definition of distance that creates the
            radius shape given will be returned.
            </remarks>
            <param name="radius">Radius type being given.</param>
        </member>
        <member name="M:SadRogue.Primitives.Radius.op_Implicit(SadRogue.Primitives.Radius)~SadRogue.Primitives.Distance">
            <summary>
            Allows implicit casting to the <see cref="T:SadRogue.Primitives.Distance"/> type.
            </summary>
            <remarks>
            The <see cref="T:SadRogue.Primitives.Distance"/> instance corresponding to the proper definition of
            distance that creates the radius shape given will be returned.
            </remarks>
            <param name="radius">Radius type being given.</param>
        </member>
        <member name="M:SadRogue.Primitives.Radius.op_Implicit(SadRogue.Primitives.Radius)~SadRogue.Primitives.Radius.Types">
            <summary>
            Implicitly converts a Radius to its corresponding <see cref="F:SadRogue.Primitives.Radius.Type"/>.
            </summary>
            <param name="radius"/>
        </member>
        <member name="M:SadRogue.Primitives.Radius.op_Implicit(SadRogue.Primitives.Radius.Types)~SadRogue.Primitives.Radius">
            <summary>
            Implicitly converts an <see cref="T:SadRogue.Primitives.Radius.Types"/> enum value to its corresponding Radius.
            </summary>
            <param name="type"/>
        </member>
        <member name="M:SadRogue.Primitives.Radius.ToString">
            <summary>
            Returns a string representation of the Radius.
            </summary>
            <returns>A string representation of the Radius.</returns>
        </member>
        <member name="T:SadRogue.Primitives.RadiusLocationContext">
            <summary>
            A context representing information necessary to get all the positions in a radius via functions like
            <see cref="M:SadRogue.Primitives.Radius.PositionsInRadius(SadRogue.Primitives.RadiusLocationContext)"/>.  Storing a context and re-using it may be
            more performance-savvy in cases where you're getting the positions in a radius of the same size many times,
            even if the location center point or shape of the radius is changing.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.RadiusLocationContext.Radius">
            <summary>
            The length of the radius represented.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.RadiusLocationContext.Center">
            <summary>
            The center-point of the radius represented.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.RadiusLocationContext.Bounds">
            <summary>
            Represents the bounds that restrict the valid positions that are considered
            inside the radius.  Any positions inside the radius but outside the bounds
            will be ignored and considered outside the radius.Set to <see cref="F:SadRogue.Primitives.Rectangle.Empty"/>
            to indicate no bounds.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.RadiusLocationContext.#ctor(SadRogue.Primitives.Point,System.Int32,SadRogue.Primitives.Rectangle)">
            <summary>
            Constructor.
            </summary>
            <param name="center">The starting center-point of the radius.</param>
            <param name="radius">The starting length of the radius.</param>
            <param name="bounds">The bounds to restrict the radius to.  Any positions inside the radius but outside
            the bounds will be ignored and considered outside the radius.</param>
        </member>
        <member name="M:SadRogue.Primitives.RadiusLocationContext.#ctor(System.Int32,System.Int32,System.Int32,SadRogue.Primitives.Rectangle)">
            <summary>
            Constructor.
            </summary>
            <param name="centerX">X-value of the starting center-point of the radius.</param>
            <param name="centerY">Y-value of the starting center-point of the radius.</param>
            <param name="radius">The starting length of the radius.</param>
            <param name="bounds">The bounds to restrict the radius to.  Any positions inside the radius but outside
            the bounds will be ignored and considered outside the radius.</param>
        </member>
        <member name="M:SadRogue.Primitives.RadiusLocationContext.#ctor(SadRogue.Primitives.Point,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="center">The starting center-point of the radius.</param>
            <param name="radius">The starting length of the radius.</param>
        </member>
        <member name="M:SadRogue.Primitives.RadiusLocationContext.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="centerX">X-value of the starting center-point of the radius.</param>
            <param name="centerY">Y-value of the starting center-point of the radius.</param>
            <param name="radius">The starting length of the radius.</param>
        </member>
        <member name="T:SadRogue.Primitives.ReadOnlyAreaExtensions">
            <summary>
            Extension methods for IReadOnlyArea.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.ReadOnlyAreaExtensions.FastEnumerator(SadRogue.Primitives.IReadOnlyArea)">
            <summary>
            Obsolete.
            </summary>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.ReadOnlyAreaExtensions.PerimeterPositions(SadRogue.Primitives.IReadOnlyArea,SadRogue.Primitives.AdjacencyRule)">
             <summary>
             Returns all points that are on the border of the area, assuming the specified adjacency rule is used to determine adjacent cells
             for the sake of determining border.
             </summary>
             <remarks>
             Typically, you will want to use AdjacencyRule.EightWay as the rule; however AdjacencyRule.Cardinals is faster if you don't want
             border cells adjacent to a wall ONLY diagonally to be considered border cells.
            
             <example>
             Using AdjacencyRule.Cardinals, if "." and "x" are cells within the area and "#" are cells that are not within, X will NOT be considered
             a border:
             <code>
             # # # # # # # #
             # . . . . . # #
             # . . . . X . #
             # . . . . . . #
             # . . . . . . #
             # . . . . . . #
             # . . . . . . #
             # # # # # # # #
             </code>
             </example>
            
             <example>
             Using AdjacencyRule.EightWay, if "." and "x" are cells within the area and "#" are cells that are not within, X WILL be considered
             a border:
             <code>
             # # # # # # # #
             # . . . . . # #
             # . . . . X . #
             # . . . . . . #
             # . . . . . . #
             # . . . . . . #
             # . . . . . . #
             # # # # # # # #
             </code>
             </example>
             </remarks>
            
             <param name="area"/>
             <param name="rule">The AdjacencyRule to use for determining adjacency to cells which are outside of the area.</param>
             <returns>An enumerable of every point which is on the outer edge of the area specified.</returns>
        </member>
        <member name="T:SadRogue.Primitives.ReadOnlyAreaPositionsEnumerator">
             <summary>
             A custom enumerator used to iterate over all positions within an area with a foreach loop efficiently.
             </summary>
             <remarks>
             This type is a struct, and will either use an indexer-based enumeration method, or a standard IEnumerator, depending on
             the area's <see cref="P:SadRogue.Primitives.IReadOnlyArea.UseIndexEnumeration"/> value.  Therefore, it will provide the quickest way of iterating
             over positions in an area with a for-each loop.
            
             If you have a value of a concrete type rather than an interface, and the GetEnumerator implementation for that
             given type is particularly fast or a non-boxed type (like <see cref="T:SadRogue.Primitives.Area"/>, you will probably get faster performance
             out of that than by using this; however this will provide better performance if you are working with an interface
             and thus don't know the type of area.  Use cases for this class are generally for iteration via IReadOnlyArea.
             </remarks>
        </member>
        <member name="P:SadRogue.Primitives.ReadOnlyAreaPositionsEnumerator.Current">
            <summary>
            The current value for enumeration.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.ReadOnlyAreaPositionsEnumerator.#ctor(SadRogue.Primitives.IReadOnlyArea)">
            <summary>
            Creates an enumerator which iterates over all positions in the given area.
            </summary>
            <param name="area">A read-only area containing the positions to iterate over.</param>
        </member>
        <member name="M:SadRogue.Primitives.ReadOnlyAreaPositionsEnumerator.MoveNext">
            <summary>
            Advances the iterator to the next position.
            </summary>
            <returns>True if the a position within the area was found; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ReadOnlyAreaPositionsEnumerator.GetEnumerator">
            <summary>
            Returns this enumerator.
            </summary>
            <returns>This enumerator.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ReadOnlyAreaPositionsEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
            This iterator does not support resetting.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="T:SadRogue.Primitives.BisectionResultEnumerator">
            <summary>
            A custom enumerator used to iterate over all rectangles in the given bisection result efficiently.  Generally,
            you should simply use a <see cref="T:SadRogue.Primitives.BisectionResult"/> in a foreach loop, rather than creating one of these
            manually.
            </summary>
            <remarks>
            This type is a struct, and as such is much more efficient when used in a foreach loop than a function returning
            IEnumerable&lt;Point&gt; by using "yield return".
            </remarks>
        </member>
        <member name="P:SadRogue.Primitives.BisectionResultEnumerator.Current">
            <summary>
            The current value for enumeration.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.BisectionResultEnumerator.#ctor(SadRogue.Primitives.BisectionResult)">
            <summary>
            Creates an enumerator which iterates over all rectangles in the given bisection result.
            </summary>
            <param name="result">The bisection result to enumerate.</param>
        </member>
        <member name="M:SadRogue.Primitives.BisectionResultEnumerator.MoveNext">
            <summary>
            Advances the iterator to the next position.
            </summary>
            <returns>True if there is a new Rectangle; false otherwise.</returns>
        </member>
        <member name="T:SadRogue.Primitives.BisectionResult">
            <summary>
            Structure representing the result of a rectangle bisection.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.BisectionResult.Rect1">
            <summary>
            The first rectangle.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.BisectionResult.Rect2">
            <summary>
            The second rectangle.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.BisectionResult.#ctor(SadRogue.Primitives.Rectangle,SadRogue.Primitives.Rectangle)">
            <summary>
            Constructor
            </summary>
            <param name="rect1">The first rectangle.</param>
            <param name="rect2">The second rectangle.</param>
        </member>
        <member name="M:SadRogue.Primitives.BisectionResult.Deconstruct(SadRogue.Primitives.Rectangle@,SadRogue.Primitives.Rectangle@)">
            <summary>
            Supports C# Deconstruction syntax.
            </summary>
            <param name="rect1"/>
            <param name="rect2"/>
        </member>
        <member name="M:SadRogue.Primitives.BisectionResult.op_Implicit(SadRogue.Primitives.BisectionResult)~System.ValueTuple{SadRogue.Primitives.Rectangle,SadRogue.Primitives.Rectangle}">
            <summary>
            Implicit conversion to an equivalent tuple.
            </summary>
            <param name="result">The BisectionResult to convert to a tuple.</param>
        </member>
        <member name="M:SadRogue.Primitives.BisectionResult.op_Implicit(System.ValueTuple{SadRogue.Primitives.Rectangle,SadRogue.Primitives.Rectangle})~SadRogue.Primitives.BisectionResult">
            <summary>
            Implicit conversion from a tuple to the equivalent bisection result.
            </summary>
            <param name="tuple">The tuple to convert to a BisectionResult.</param>
        </member>
        <member name="M:SadRogue.Primitives.BisectionResult.ToTuple">
            <summary>
            Converts the pair to an equivalent tuple.
            </summary>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.BisectionResult.FromTuple(System.ValueTuple{SadRogue.Primitives.Rectangle,SadRogue.Primitives.Rectangle})">
            <summary>
            Converts the tuple to an equivalent BisectionResult.
            </summary>
            <param name="tuple"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.BisectionResult.Equals(SadRogue.Primitives.BisectionResult)">
            <summary>
            True if the given bisection result contains equivalent rectangles; false otherwise.
            </summary>
            <param name="other"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.BisectionResult.Matches(SadRogue.Primitives.BisectionResult)">
            <summary>
            True if the given bisection result contains equivalent rectangles; false otherwise.
            </summary>
            <param name="other"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.BisectionResult.Equals(System.Object)">
            <summary>
            True if the given object is a BisectionResult and contains equivalent rectangles; false otherwise.
            </summary>
            <param name="obj"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.BisectionResult.GetHashCode">
            <summary>
            Returns a hash code based on all of the rectangle's fields.
            </summary>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.BisectionResult.op_Equality(SadRogue.Primitives.BisectionResult,SadRogue.Primitives.BisectionResult)">
            <summary>
            True if the given results contain equivalent rectangles; false otherwise.
            </summary>
            <param name="left"/>
            <param name="right"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.BisectionResult.op_Inequality(SadRogue.Primitives.BisectionResult,SadRogue.Primitives.BisectionResult)">
            <summary>
            True if the given results contain different rectangles; false otherwise.
            </summary>
            <param name="left"/>
            <param name="right"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.BisectionResult.GetEnumerator">
            <summary>
            Gets an enumerator that iterates over the rectangles in this result; first Rect1, then Rect2.
            </summary>
            <returns>An enumerator that iterates over the rectangles in this result; first Rect1, then Rect2</returns>
        </member>
        <member name="M:SadRogue.Primitives.BisectionResult.ToEnumerable">
            <summary>
            Obsolete.
            </summary>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.Rectangle">
            <summary>
            Represents a 2D rectangle. Provides numerous static functions that enable creation and common operations
            involving rectangles.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Rectangle.Empty">
            <summary>
            The empty rectangle. Has origin of (0, 0) with 0 width and height.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="x">Minimum x coordinate that is inside the rectangle.</param>
            <param name="y">Minimum y coordinate that is inside the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.#ctor(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Constructor.
            </summary>
            <param name="minExtent">Minimum x and y values that are considered inside the rectangle.</param>
            <param name="maxExtent">Maximum x and y values that are considered inside the rectangle.</param>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.#ctor(SadRogue.Primitives.Point,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="center">The center point of the rectangle.</param>
            <param name="horizontalRadius">
            Number of units to the left and right of the center point that are included within the rectangle.
            </param>
            <param name="verticalRadius">
            Number of units to the top and bottom of the center point that are included within the rectangle.
            </param>
        </member>
        <member name="P:SadRogue.Primitives.Rectangle.Area">
            <summary>
            Calculates the area of the rectangle.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Rectangle.Center">
            <summary>
            The center coordinate of the rectangle, rounded up if the exact center is between two
            positions. The center of a rectangle with width/height 1 is its <see cref="P:SadRogue.Primitives.Rectangle.Position"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Rectangle.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Rectangle.IsEmpty">
            <summary>
            Whether or not this rectangle contains no locations (eg. has width or height of 0).
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Rectangle.MaxExtent">
            <summary>
            The maximum X and Y coordinates that are included in the rectangle.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Rectangle.MaxExtentX">
            <summary>
            The maximum X-coordinate that is included in the rectangle.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Rectangle.MaxExtentY">
            <summary>
            The maximum Y-coordinate that is included in the rectangle.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Rectangle.MinExtent">
            <summary>
            Minimum extent of the rectangle (minimum x and y values that are included within it).
            Identical to <see cref="P:SadRogue.Primitives.Rectangle.Position"/> because we define the rectangle's position by its
            minimum extent.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Rectangle.MinExtentX">
            <summary>
            X-value of the minimum extent of the rectangle (minimum x value that is included within
            it). Identical to the <see cref="F:SadRogue.Primitives.Rectangle.X"/> value because we define the rectangle's position
            by its minimum extent.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Rectangle.MinExtentY">
            <summary>
            Y-value of the minimum extent of the rectangle (minimum y value that is included within
            it). Identical to the <see cref="F:SadRogue.Primitives.Rectangle.Y"/> value because we define the rectangle's position
            by its minimum extent.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Rectangle.Position">
            <summary>
            Coordinate representing the position (min x- and y-values) of the rectangle.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.Rectangle.Size">
            <summary>
            Returns a coordinate (Width, Height), which represents the size of the rectangle.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Rectangle.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Rectangle.X">
            <summary>
            X-coordinate of position of the rectangle.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.Rectangle.Y">
            <summary>
            Y-coordinate of position of the rectangle.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.WithExtents(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Creates a rectangle with the given minimum and maximum extents. Effectively a
            constructor, but with extra overloads not possible to provide in constructors alone.
            </summary>
            <param name="minExtent">Minimum (x, y) coordinates that are inside the rectangle.</param>
            <param name="maxExtent">Maximum (x, y) coordinates that are inside the rectangle.</param>
            <returns>A new Rectangle with the given minimum and maximum extents.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.WithRadius(SadRogue.Primitives.Point,System.Int32,System.Int32)">
            <summary>
            Creates a rectangle centered on the given position, with the given horizontal and
            vertical radius values. Effectively a constructor, but with extra overloads not possible
            to provide in constructors alone.
            </summary>
            <param name="center">Center of the rectangle.</param>
            <param name="horizontalRadius">
            Number of units to the left and right of the center point that are included within the rectangle.
            </param>
            <param name="verticalRadius">
            Number of units to the top and bottom of the center point that are included within the rectangle.
            </param>
            <returns>A new rectangle with the given center point and radius values.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.WithPositionAndSize(SadRogue.Primitives.Point,System.Int32,System.Int32)">
            <summary>
            Creates a rectangle with the given position and size. Effectively a constructor, but with
            extra overloads not possible to provide in constructors alone.
            </summary>
            <param name="position">Minimum x/y coordinate that is inside the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <returns>A new rectangle at the given position with the given width and height.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.WithPositionAndSize(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Creates a rectangle with the given position and size. Effectively a constructor, but with
            extra overloads not possible to provide in constructors alone.
            </summary>
            <param name="position">Minimum (x, y) values that are inside the resulting rectangle.</param>
            <param name="size">The size of the rectangle, in form (width, height).</param>
            <returns>A new rectangle at the given position with the given size.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.GetDifference(SadRogue.Primitives.Rectangle,SadRogue.Primitives.Rectangle)">
            <summary>
            Gets an <see cref="T:SadRogue.Primitives.Area"/> representing every location in <paramref name="rect1"/> that
            is NOT in <paramref name="rect2"/>.
            </summary>
            <param name="rect1"/>
            <param name="rect2"/>
            <returns>A <see cref="T:SadRogue.Primitives.Area"/> representing every location in <paramref name="rect1"/> that
            is NOT in <paramref name="rect2"/>.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.GetExactUnion(SadRogue.Primitives.Rectangle,SadRogue.Primitives.Rectangle)">
            <summary>
            Gets a <see cref="T:SadRogue.Primitives.Area"/> representing the exact union of the specified rectangles, eg.
            an area containing all locations from either rectangle.
            </summary>
            <param name="r1"/>
            <param name="r2"/>
            <returns>A <see cref="T:SadRogue.Primitives.Area"/> containing every position in either rectangle.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.GetIntersection(SadRogue.Primitives.Rectangle,SadRogue.Primitives.Rectangle)">
            <summary>
            Returns the rectangle that represents the intersection of the two rectangles specified,
            or the empty rectangle if the specified rectangles do not intersect.
            </summary>
            <param name="r1"/>
            <param name="r2"/>
            <returns>
            Rectangle representing the intersection of <paramref name="r1"/> and <paramref name="r2"/>, or
            the empty rectangle if the two rectangles do not intersect.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.GetUnion(SadRogue.Primitives.Rectangle,SadRogue.Primitives.Rectangle)">
            <summary>
            Gets the smallest possible rectangle that includes the entire area of both <paramref name="r1"/> and
            <paramref name="r2"/>.
            </summary>
            <param name="r1"/>
            <param name="r2"/>
            <returns>
            The smallest possible rectangle that includes the entire area of both <paramref name="r1"/> and
            <paramref name="r2"/>.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.op_Inequality(SadRogue.Primitives.Rectangle,SadRogue.Primitives.Rectangle)">
            <summary>
            Returns whether or not the rectangles differ in either their positions or extents.
            </summary>
            <param name="r1"/>
            <param name="r2"/>
            <returns>true if the rectangles do NOT encompass the same area, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.op_Equality(SadRogue.Primitives.Rectangle,SadRogue.Primitives.Rectangle)">
            <summary>
            Returns whether or not the rectangles have the same position and extents.
            </summary>
            <param name="r1"/>
            <param name="r2"/>
            <returns>
            true if the area of the two rectangles encompass the exact same area, false otherwise.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.WithCenter(SadRogue.Primitives.Point)">
            <summary>
            Creates and returns a new rectangle that is the same size as the current one, but with
            the center moved to the given position.
            </summary>
            <param name="center">The center-point for the new rectangle.</param>
            <returns>
            A new rectangle that is the same size as the current one, but with the center moved to
            the given location.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.ChangeHeight(System.Int32)">
            <summary>
            Creates and returns a new rectangle whose position is the same as the current one, but
            has its height changed by the given delta-change value.
            </summary>
            <param name="deltaHeight">Delta-change for the height of the new rectangle.</param>
            <returns>A new rectangle whose height is modified by the given delta-change value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.ChangeSize(SadRogue.Primitives.Point)">
            <summary>
            Creates and returns a new rectangle whose position is the same as the current one, but
            has its width and height changed by the given delta-change values.
            </summary>
            <param name="deltaChange">
            Vector (deltaWidth, deltaHeight) specifying the delta-change values for the width/height
            of the new Rectangle.
            </param>
            <returns>
            A new rectangle whose width/height are modified by the given delta-change values.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.ChangeWidth(System.Int32)">
            <summary>
            Creates and returns a new rectangle whose position is the same as the current one, but
            has its width changed by the given delta-change value.
            </summary>
            <param name="deltaWidth">Delta-change for the width of the new rectangle.</param>
            <returns>A new rectangle whose width is modified by the given delta-change value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.ChangePosition(SadRogue.Primitives.Direction)">
            <summary>
            Creates and returns a new rectangle that has its position moved in the given direction.
            </summary>
            <param name="direction">The direction to move the new rectangle in.</param>
            <returns>A new rectangle that has its position moved in the given direction.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.ChangePosition(SadRogue.Primitives.Point)">
            <summary>
            Creates and returns a new rectangle whose position has been moved by the given
            delta-change values.
            </summary>
            <param name="deltaChange">Delta-x and delta-y values by which to move the new rectangle.</param>
            <returns>
            A new rectangle, whose position has been moved by the given delta-change values.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.ChangeX(System.Int32)">
            <summary>
            Creates and returns a new rectangle whose x-position has been moved by the given delta value.
            </summary>
            <param name="dx">Value by which to move the new rectangle's x-position.</param>
            <returns>A new rectangle, whose x-position has been moved by the given delta-x value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.ChangeY(System.Int32)">
            <summary>
            Creates and returns a new rectangle whose y-position has been moved by the given delta value.
            </summary>
            <param name="dy">Value by which to move the new rectangle's y-position.</param>
            <returns>A new rectangle, whose y-position has been moved by the given delta-y value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.Contains(SadRogue.Primitives.Point)">
            <summary>
            Returns whether or not the specified point is considered within the rectangle.
            </summary>
            <param name="position">The position to check.</param>
            <returns>Whether or not the specified point is considered within the rectangle.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.Contains(SadRogue.Primitives.Rectangle)">
            <summary>
            Returns whether or not the specified rectangle is considered completely contained within
            the current one.
            </summary>
            <param name="other">The rectangle to check.</param>
            <returns>
            True if the given rectangle is completely contained within the current one, false otherwise.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.Equals(SadRogue.Primitives.Rectangle)">
            <summary>
            Compares based upon whether or not the areas contained within the rectangle are identical
            in both position and extents.
            </summary>
            <param name="other"/>
            <returns>
            true if the area of the two rectangles encompass the exact same area, false otherwise.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.Equals(System.Object)">
            <summary>
            Compares to an arbitrary object.
            </summary>
            <param name="obj"/>
            <returns>
            true if the object specified is a rectangle instance and encompasses the same area, false otherwise.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.Expand(System.Int32,System.Int32)">
            <summary>
            Returns a new rectangle, expanded on each side by the given amounts.  Negative change values
            can be used to shrink the rectangle on each side.
            </summary>
            <param name="horizontalChange">
            Number of additional columns to include on the left and right of the rectangle.
            </param>
            <param name="verticalChange">
            Number of additional rows to include on the top and bottom of the rectangle.
            </param>
            <returns>A new rectangle, expanded appropriately.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.GetHashCode">
            <summary>
            Simple hashing.
            </summary>
            <returns>Hash code for rectangle.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.Intersects(SadRogue.Primitives.Rectangle)">
            <summary>
            Returns whether or not the given rectangle intersects the current one.
            </summary>
            <param name="other">The rectangle to check.</param>
            <returns>True if the given rectangle intersects with the current one, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.Matches(SadRogue.Primitives.Rectangle)">
            <summary>
            Compares based upon whether or not the areas contained within the rectangle are identical
            in both position and extents.
            </summary>
            <param name="other"/>
            <returns>
            true if the area of the two rectangles encompass the exact same area, false otherwise.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.WithPosition(SadRogue.Primitives.Point)">
            <summary>
            Creates and returns a new rectangle that has its <see cref="P:SadRogue.Primitives.Rectangle.Position"/> moved to the given position.
            </summary>
            <param name="position">The position for the new rectangle.</param>
            <returns>A new rectangle that has its position changed to the given value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.Translate(SadRogue.Primitives.Direction)">
            <summary>
            Creates and returns a new rectangle that has its position moved in the given direction.
            </summary>
            <param name="direction">The direction to move the new rectangle in.</param>
            <returns>A new rectangle that has its position moved in the given direction.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.WithX(System.Int32)">
            <summary>
            Creates and returns a new rectangle that has its X value moved to the given x-coordinate.
            </summary>
            <param name="x">The X value for the new rectangle.</param>
            <returns>A new rectangle with X changed to the given value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.WithY(System.Int32)">
            <summary>
            Creates and returns a new rectangle that has its Y value moved to the given y-coordinate.
            </summary>
            <param name="y">The Y value for the new rectangle.</param>
            <returns>A new rectangle with Y changed to the given value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.Positions">
            <summary>
            Returns all positions in the rectangle.
            </summary>
            <returns>All positions in the rectangle.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.WithHeight(System.Int32)">
            <summary>
            Creates and returns a new rectangle that has the same position and width as the current
            one, but with the height changed to the given value.
            </summary>
            <param name="height">The height for the new rectangle.</param>
            <returns>A new rectangle with its height changed to the given value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.WithMaxExtent(SadRogue.Primitives.Point)">
            <summary>
            Creates and returns a new rectangle that has been shrunk/expanded as necessary, such that
            the maximum extent is the specified value.
            </summary>
            <param name="maxExtent">The maximum extent of the new rectangle.</param>
            <returns>A new rectangle that has its maximum extent adjusted to the specified value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.WithMaxExtentX(System.Int32)">
            <summary>
            Creates and returns a new rectangle that has been shrunk/expanded as necessary, such that
            the x-value of maximum extent is changed to the specified value.
            </summary>
            <param name="x">The x-coordinate for the maximum extent of the new rectangle.</param>
            <returns>A new rectangle, with its <see cref="P:SadRogue.Primitives.Rectangle.MaxExtentX"/> adjusted to the specified value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.WithMaxExtentY(System.Int32)">
            <summary>
            Creates and returns a new rectangle that has been shrunk/expanded as necessary, such that
            the y-value of maximum extent is changed to the specified value.
            </summary>
            <param name="y">The y-coordinate for the maximum extent of the new rectangle.</param>
            <returns>A new rectangle, with its <see cref="P:SadRogue.Primitives.Rectangle.MaxExtentY"/> adjusted to the specified value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.WithMinExtent(SadRogue.Primitives.Point)">
            <summary>
            Creates and returns a new rectangle that has been shrunk/expanded as necessary, such that
            the minimum extent is the specified value.
            </summary>
            <param name="minExtent">The minimum extent of the new rectangle.</param>
            <returns>A new rectangle that has its minimum extent adjusted to the specified value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.WithMinExtentX(System.Int32)">
            <summary>
            Creates and returns a new rectangle that has been shrunk/expanded as necessary, such that
            the x-value of minimum extent is changed to the specified value.
            </summary>
            <param name="x">The x-coordinate for the minimum extent of the new rectangle.</param>
            <returns>A new rectangle, with its <see cref="P:SadRogue.Primitives.Rectangle.MinExtentX"/> adjusted to the specified value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.WithMinExtentY(System.Int32)">
            <summary>
            Creates and returns a new rectangle that has been shrunk/expanded as necessary, such that
            the y-value of minimum extent is changed to the specified value.
            </summary>
            <param name="y">The y-coordinate for the minimum extent of the new rectangle.</param>
            <returns>A new rectangle, with its <see cref="P:SadRogue.Primitives.Rectangle.MinExtentY"/> adjusted to the specified value.</returns>
            &gt;
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.WithSize(System.Int32,System.Int32)">
            <summary>
            Creates and returns a new rectangle whose position is the same as the current one, but
            has the specified width and height.
            </summary>
            <param name="width">The width for the new rectangle.</param>
            <param name="height">The height for the new rectangle.</param>
            <returns>A new rectangle with the given width and height.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.WithSize(SadRogue.Primitives.Point)">
            <summary>
            Creates and returns a new rectangle whose position is the same as the current one, but
            has the specified width and height.
            </summary>
            <param name="size">Vector (width, height) specifying the width/height of the new rectangle.</param>
            <returns>A new rectangle with the given width and height.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.WithWidth(System.Int32)">
            <summary>
            Creates and returns a new rectangle that is exactly the same as the current one, but with
            the width changed to the given value.
            </summary>
            <param name="width">The width for the new rectangle.</param>
            <returns>A new rectangle with its <see cref="F:SadRogue.Primitives.Rectangle.Width"/> changed to the given value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.ToString">
            <summary>
            Returns a string representing the rectangle, formatted as
            (<see cref="F:SadRogue.Primitives.Rectangle.X"/>, <see cref="F:SadRogue.Primitives.Rectangle.Y"/>) -&gt; (<see cref="P:SadRogue.Primitives.Rectangle.MaxExtentX"/>, <see cref="P:SadRogue.Primitives.Rectangle.MaxExtentY"/>)
            </summary>
            <returns>String formatted as above.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.Translate(SadRogue.Primitives.Point)">
            <summary>
            Creates and returns a new rectangle whose position has been moved by the given
            delta-change values.
            </summary>
            <param name="deltaChange">Delta-x and delta-y values by which to move the new rectangle.</param>
            <returns>
            A new rectangle, whose position has been moved by the given delta-change values.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.TranslateX(System.Int32)">
            <summary>
            Creates and returns a new rectangle whose x-position has been moved by the given delta value.
            </summary>
            <param name="dx">Value by which to move the new rectangle's x-position.</param>
            <returns>A new rectangle, whose x-position has been moved by the given delta-x value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.TranslateY(System.Int32)">
            <summary>
            Creates and returns a new rectangle whose y-position has been moved by the given delta value.
            </summary>
            <param name="dy">Value by which to move the new rectangle's y-position.</param>
            <returns>A new rectangle, whose y-position has been moved by the given delta-y value.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.op_Implicit(SadRogue.Primitives.Rectangle)~System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}">
            <summary>
            Implicitly converts a GoRogue Rectangle to an equivalent tuple of 4 integers (x, y, width, height).
            </summary>
            <param name="rect" />
            <returns />
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.op_Implicit(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})~SadRogue.Primitives.Rectangle">
            <summary>
            Implicitly converts a tuple of 4 integers (x, y, width, height) to an equivalent GoRogue Rectangle.
            </summary>
            <param name="tuple" />
            <returns />
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.Deconstruct(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Adds support for C# Deconstruction syntax.
            </summary>
            <param name="x" />
            <param name="y" />
            <param name="width" />
            <param name="height" />
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.op_Equality(SadRogue.Primitives.Rectangle,System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})">
            <summary>
            True if the two rectangles represent the same area.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns>True if the two rectangles are equal, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.op_Inequality(SadRogue.Primitives.Rectangle,System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})">
            <summary>
            True if any of the rectangles' x/y/width/height values are not equal.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns>
            True if any of the x/y/width/height values are not equal, false if they are all equal.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.op_Equality(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32},SadRogue.Primitives.Rectangle)">
            <summary>
            True if the two rectangles represent the same area.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns>True if the two rectangles are equal, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.op_Inequality(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32},SadRogue.Primitives.Rectangle)">
            <summary>
            True if any of the rectangles' x/y/width/height values are not equal.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns>
            True if any of the x/y/width/height values are not equal, false if they are all equal.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.Equals(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})">
            <summary>
            True if the given position has equal x and y values to the current one.
            </summary>
            <param name="other">Point to compare.</param>
            <returns>True if the two positions are equal, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.Matches(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})">
            <summary>
            True if the given position has equal x and y values to the current one.
            </summary>
            <param name="other">Point to compare.</param>
            <returns>True if the two positions are equal, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.op_Implicit(SadRogue.Primitives.Rectangle)~System.ValueTuple{SadRogue.Primitives.Point,SadRogue.Primitives.Point}">
            <summary>
            Implicitly converts a GoRogue Rectangle to an equivalent tuple of 2 Points (minExtent, maxExtent).
            </summary>
            <param name="rect" />
            <returns />
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.op_Implicit(System.ValueTuple{SadRogue.Primitives.Point,SadRogue.Primitives.Point})~SadRogue.Primitives.Rectangle">
            <summary>
            Implicitly converts a tuple of 2 Points (minExtent, maxExtent) to an equivalent GoRogue Rectangle.
            </summary>
            <param name="tuple" />
            <returns />
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.Deconstruct(SadRogue.Primitives.Point@,SadRogue.Primitives.Point@)">
            <summary>
            Adds support for C# Deconstruction syntax.
            </summary>
            <param name="minExtent" />
            <param name="maxExtent" />
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.op_Equality(SadRogue.Primitives.Rectangle,System.ValueTuple{SadRogue.Primitives.Point,SadRogue.Primitives.Point})">
            <summary>
            True if the two rectangles represent the same area.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns>True if the two rectangles are equal, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.op_Inequality(SadRogue.Primitives.Rectangle,System.ValueTuple{SadRogue.Primitives.Point,SadRogue.Primitives.Point})">
            <summary>
            True if any of the rectangles' x/y/width/height values are not equal.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns>
            True if any of the x/y/width/height values are not equal, false if they are all equal.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.op_Equality(System.ValueTuple{SadRogue.Primitives.Point,SadRogue.Primitives.Point},SadRogue.Primitives.Rectangle)">
            <summary>
            True if the two rectangles represent the same area.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns>True if the two rectangles are equal, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.op_Inequality(System.ValueTuple{SadRogue.Primitives.Point,SadRogue.Primitives.Point},SadRogue.Primitives.Rectangle)">
            <summary>
            True if any of the rectangles' x/y/width/height values are not equal.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns>
            True if any of the x/y/width/height values are not equal, false if they are all equal.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.Equals(System.ValueTuple{SadRogue.Primitives.Point,SadRogue.Primitives.Point})">
            <summary>
            True if the given position has equal x and y values to the current one.
            </summary>
            <param name="other">Point to compare.</param>
            <returns>True if the two positions are equal, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.Matches(System.ValueTuple{SadRogue.Primitives.Point,SadRogue.Primitives.Point})">
            <summary>
            True if the given position has equal x and y values to the current one.
            </summary>
            <param name="other">Point to compare.</param>
            <returns>True if the two positions are equal, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.PerimeterPositions">
            <summary>
            Gets all positions that reside on the inner perimeter of the rectangle.
            </summary>
            <returns>IEnumerable of all positions that reside on the inner perimeter of the rectangle.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.IsOnSide(SadRogue.Primitives.Point,SadRogue.Primitives.Direction)">
            <summary>
            Returns whether or not the given position lines on the given edge of the rectangle.
            </summary>
            <param name="point"/>
            <param name="side"/>
            <returns>True if the given position lies along the given edge of the rectangle, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.MinYPositions">
            <summary>
            Gets all positions that reside on the min-y line of the rectangle.
            </summary>
            <returns>IEnumerable of all positions that lie on the min-y line of the rectangle.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.MaxYPositions">
            <summary>
            Gets all positions that reside on the max-y line of the rectangle.
            </summary>
            <returns>IEnumerable of all positions that lie on the max-y line of the rectangle.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.MinXPositions">
            <summary>
            Gets all positions that reside on the min-x line of the rectangle.
            </summary>
            <returns>IEnumerable of all positions that lie on the min-x line of the rectangle.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.MaxXPositions">
            <summary>
            Gets all positions that reside on the max-x line of the rectangle.
            </summary>
            <returns>IEnumerable of all positions that lie on the max-x line of the rectangle.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.PositionsOnSide(SadRogue.Primitives.Direction)">
            <summary>
            Gets an IEnumerable of all positions that line on the inner perimeter of the rectangle,
            on the given side of the rectangle.
            </summary>
            <param name="side">Side to get positions for.</param>
            <returns>IEnumerable of all positions that line on the inner perimeter of the rectangle on the given side.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.BisectRecursive(System.Int32)">
            <summary>
            Recursively divides this rectangle in half until the small rectangles are between minimumDimension and 2 * minimumDimension.
            </summary>
            <param name="minimumDimension">The smallest allowable dimension for a rectangle to be.</param>
            <returns>A list of all rectangles that add up to the original rectangle</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.Bisect">
            <summary>
            Bisects the rectangle into two halves along its longest axis.
            </summary>
            <returns>
            A BisectionResult of either Top and Bottom halves, or Left and Right halves.
            </returns>
            <remarks>
            Cuts the rectangle by reducing it's longest dimension by half. For example, a
            rectangle that extends from (3, 3) to (18, 7) that calls DivideInHalf will
            return an IEnumerable with two rectangles. The rectangle at index 0
            starts at (3, 3) and extends to (9, 7), and the rectangle at index 1 extends from
            (10, 3) to (18, 7)
            </remarks>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.BisectHorizontally">
            <summary>
            Bisects the rectangle into top and bottom halves.
            </summary>
            <returns>A BisectionResult with Top and Bottom Rectangles.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.BisectVertically">
            <summary>
            Divides the rectangle into a left and right half.
            </summary>
            <returns>
            A BisectionResult with the Left and Right rectangles.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.Rectangle.Divide(SadRogue.Primitives.Rectangle)">
            <summary>
            Divides this rectangle by another, and returns an IEnumerable of divisor-sized rectangles that fit
            within the dividend.
            </summary>
            <param name="divisor">The rectangle by which to divide</param>
            <returns>
            IEnumerable of Rectangles the size of divisor, that fit within this rectangle.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the width or height of the divisor is 0 or less</exception>
        </member>
        <member name="T:SadRogue.Primitives.RectangleExtensions">
            <summary>
            Contains set of operators that match ones defined by other packages for interoperability,
            so syntax may be uniform.  Functionality is similar to the corresponding actual operators for Color.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.RectangleExtensions.Matches(SadRogue.Primitives.Rectangle,SadRogue.Primitives.Rectangle)">
            <summary>
            Compares a two rectangles for equality.
            </summary>
            <param name="self"/>
            <param name="other"/>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.RectanglePerimeterPositionsEnumerator">
             <summary>
             A custom enumerator used to iterate over all positions on the outside edges of a rectangle efficiently.
            
             Generally, you should use <see cref="M:SadRogue.Primitives.Rectangle.PerimeterPositions"/> to get an instance of this, rather than creating one
             yourself.
             </summary>
             <remarks>
             This type is a struct, and as such is much more efficient when used in a foreach loop than a function returning
             IEnumerable&lt;Point&gt; by using "yield return".  This type does implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
             so you can pass it to functions which require one (for example, System.LINQ).  However, this will have reduced
             performance due to boxing of the iterator.
             </remarks>
        </member>
        <member name="P:SadRogue.Primitives.RectanglePerimeterPositionsEnumerator.Current">
            <summary>
            The current value for enumeration.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.RectanglePerimeterPositionsEnumerator.#ctor(SadRogue.Primitives.Rectangle)">
            <summary>
            Creates an enumerator which iterates over all positions on the outside edges of the given rectangle.
            </summary>
            <param name="rectangle">A rectangle defining the area to iterate over perimeter for.</param>
        </member>
        <member name="M:SadRogue.Primitives.RectanglePerimeterPositionsEnumerator.MoveNext">
            <summary>
            Advances the iterator to the next position.
            </summary>
            <returns>True if the a new position on the outside of the rectangle was found; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.RectanglePerimeterPositionsEnumerator.GetEnumerator">
            <summary>
            Returns this enumerator.
            </summary>
            <returns>This enumerator.</returns>
        </member>
        <member name="T:SadRogue.Primitives.RectanglePositionsEnumerator">
            <summary>
            A custom enumerator used to iterate over all positions within a rectangle efficiently.
            </summary>
            <remarks>
            This type is a struct, and as such is much more efficient when used in a foreach loop than a function returning
            IEnumerable&lt;Point&gt; by using "yield return".  This type does contain implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
            so you can pass it to functions which require one (for example, System.LINQ).  However, this will have reduced
            performance due to boxing of the iterator.
            </remarks>
        </member>
        <member name="P:SadRogue.Primitives.RectanglePositionsEnumerator.Current">
            <summary>
            The current value for enumeration.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.RectanglePositionsEnumerator.#ctor(SadRogue.Primitives.Rectangle)">
            <summary>
            Creates an enumerator which iterates over all positions in the given rectangle.
            </summary>
            <param name="positions">A rectangle containing the positions to iterate over.</param>
        </member>
        <member name="M:SadRogue.Primitives.RectanglePositionsEnumerator.MoveNext">
            <summary>
            Advances the iterator to the next position.
            </summary>
            <returns>True if the a position within the rectangle was found; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.RectanglePositionsEnumerator.GetEnumerator">
            <summary>
            Returns this enumerator.
            </summary>
            <returns>This enumerator.</returns>
        </member>
        <member name="M:SadRogue.Primitives.RectanglePositionsEnumerator.ToEnumerable">
            <summary>
            Obsolete.
            </summary>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.SerializedTypes.AreaSerialized">
            <summary>
            Serializable (pure-data) object representing an <see cref="T:SadRogue.Primitives.Area"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.AreaSerialized.Positions">
            <summary>
            Positions in the area.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.AreaSerialized.PointHasher">
            <summary>
            The hashing algorithm to use for storing Points added to the area.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.AreaSerialized.op_Implicit(SadRogue.Primitives.SerializedTypes.AreaSerialized)~SadRogue.Primitives.Area">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.SerializedTypes.AreaSerialized"/> to <see cref="T:SadRogue.Primitives.Area"/>.
            </summary>
            <param name="serialized"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.AreaSerialized.op_Implicit(SadRogue.Primitives.Area)~SadRogue.Primitives.SerializedTypes.AreaSerialized">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.Area"/> to <see cref="T:SadRogue.Primitives.SerializedTypes.AreaSerialized"/>.
            </summary>
            <param name="area"/>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.SerializedTypes.BoundedRectangleSerialized">
            <summary>
            Serializable (pure-data) object representing a <see cref="T:SadRogue.Primitives.BoundedRectangle"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.BoundedRectangleSerialized.Area">
            <summary>
            Area the rectangle encompasses.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.BoundedRectangleSerialized.Bounds">
            <summary>
            Bounds the area is restricted to.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.BoundedRectangleSerialized.op_Implicit(SadRogue.Primitives.BoundedRectangle)~SadRogue.Primitives.SerializedTypes.BoundedRectangleSerialized">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.BoundedRectangle"/> to <see cref="T:SadRogue.Primitives.SerializedTypes.BoundedRectangleSerialized"/>.
            </summary>
            <param name="rect"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.BoundedRectangleSerialized.op_Implicit(SadRogue.Primitives.SerializedTypes.BoundedRectangleSerialized)~SadRogue.Primitives.BoundedRectangle">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.SerializedTypes.BoundedRectangleSerialized"/> to <see cref="T:SadRogue.Primitives.BoundedRectangle"/>.
            </summary>
            <param name="rect"/>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.SerializedTypes.ColorSerialized">
            <summary>
            Serializable (pure-data) object representing a <see cref="T:SadRogue.Primitives.Color"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.ColorSerialized.R">
            <summary>
            "R" value for the color.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.ColorSerialized.G">
            <summary>
            "G" value for the color.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.ColorSerialized.B">
            <summary>
            "B" value for the color.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.ColorSerialized.A">
            <summary>
            Alpha-value for the color.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.ColorSerialized.op_Implicit(SadRogue.Primitives.Color)~SadRogue.Primitives.SerializedTypes.ColorSerialized">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.Color"/> to <see cref="T:SadRogue.Primitives.SerializedTypes.ColorSerialized"/>.
            </summary>
            <param name="color"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.ColorSerialized.op_Implicit(SadRogue.Primitives.SerializedTypes.ColorSerialized)~SadRogue.Primitives.Color">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.SerializedTypes.ColorSerialized"/> to <see cref="T:SadRogue.Primitives.Color"/>.
            </summary>
            <param name="color"/>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.SerializedTypes.GradientStopSerialized">
            <summary>
            Serializable (pure-data) object representing a <see cref="T:SadRogue.Primitives.GradientStop"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.GradientStopSerialized.Color">
            <summary>
            Color of the stop.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.GradientStopSerialized.Stop">
            <summary>
            Location where the stop is used.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.GradientStopSerialized.op_Implicit(SadRogue.Primitives.SerializedTypes.GradientStopSerialized)~SadRogue.Primitives.GradientStop">
            <summary>
            Converts from <see cref="T:SadRogue.Primitives.SerializedTypes.GradientStopSerialized"/> to <see cref="T:SadRogue.Primitives.GradientStop"/>.
            </summary>
            <param name="serialized"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.GradientStopSerialized.op_Implicit(SadRogue.Primitives.GradientStop)~SadRogue.Primitives.SerializedTypes.GradientStopSerialized">
            <summary>
            Converts from <see cref="T:SadRogue.Primitives.GradientStop"/> to <see cref="T:SadRogue.Primitives.SerializedTypes.GradientStopSerialized"/>.
            </summary>
            <param name="stop"/>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.SerializedTypes.GradientSerialized">
            <summary>
            Serializable (pure-data) object representing a <see cref="T:SadRogue.Primitives.Gradient"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.GradientSerialized.Stops">
            <summary>
            Colors/stop locations that describe the gradient.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.GradientSerialized.op_Implicit(SadRogue.Primitives.SerializedTypes.GradientSerialized)~SadRogue.Primitives.Gradient">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.SerializedTypes.GradientSerialized"/> to <see cref="T:SadRogue.Primitives.Gradient"/>.
            </summary>
            <param name="serialized"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.GradientSerialized.op_Implicit(SadRogue.Primitives.Gradient)~SadRogue.Primitives.SerializedTypes.GradientSerialized">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.Gradient"/> to <see cref="T:SadRogue.Primitives.SerializedTypes.GradientSerialized"/>.
            </summary>
            <param name="gradient"/>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.SerializedTypes.GridViews.ArrayViewSerialized`1">
            <summary>
            Serializable (pure-data) object representing an <see cref="T:SadRogue.Primitives.GridViews.ArrayView`1"/>.
            </summary>
            <typeparam name="T">Type of value being exposed via the grid view.</typeparam>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.GridViews.ArrayViewSerialized`1.Width">
            <summary>
            Width of the array view.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.GridViews.ArrayViewSerialized`1.Data">
            <summary>
            The data from the array view.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.GridViews.ArrayViewSerialized`1.op_Implicit(SadRogue.Primitives.GridViews.ArrayView{`0})~SadRogue.Primitives.SerializedTypes.GridViews.ArrayViewSerialized{`0}">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.GridViews.ArrayView`1"/> to <see cref="T:SadRogue.Primitives.SerializedTypes.GridViews.ArrayViewSerialized`1"/>.
            </summary>
            <param name="arrayView"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.GridViews.ArrayViewSerialized`1.op_Implicit(SadRogue.Primitives.SerializedTypes.GridViews.ArrayViewSerialized{`0})~SadRogue.Primitives.GridViews.ArrayView{`0}">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.SerializedTypes.GridViews.ArrayViewSerialized`1"/> to <see cref="T:SadRogue.Primitives.GridViews.ArrayView`1"/>.
            </summary>
            <param name="arrayView"/>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.SerializedTypes.GridViews.DiffSerialized`1">
            <summary>
            Serializable (pure-data) object representing a <see cref="T:SadRogue.Primitives.GridViews.Diff`1"/>.
            </summary>
            <typeparam name="T">Type of value being changed.</typeparam>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.GridViews.DiffSerialized`1.Changes">
            <summary>
            Changes recorded in this diff.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.GridViews.DiffSerialized`1.op_Implicit(SadRogue.Primitives.GridViews.Diff{`0})~SadRogue.Primitives.SerializedTypes.GridViews.DiffSerialized{`0}">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.GridViews.Diff`1"/> to <see cref="T:SadRogue.Primitives.SerializedTypes.GridViews.DiffSerialized`1"/>.
            </summary>
            <param name="diff"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.GridViews.DiffSerialized`1.op_Implicit(SadRogue.Primitives.SerializedTypes.GridViews.DiffSerialized{`0})~SadRogue.Primitives.GridViews.Diff{`0}">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.SerializedTypes.GridViews.DiffSerialized`1"/> to <see cref="T:SadRogue.Primitives.GridViews.Diff`1"/>.
            </summary>
            <param name="diff"/>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.SerializedTypes.GridViews.ValueChangeSerialized`1">
            <summary>
            Serializable (pure-data) object representing a <see cref="T:SadRogue.Primitives.GridViews.ValueChange`1"/>.
            </summary>
            <typeparam name="T">Type of value being changed.</typeparam>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.GridViews.ValueChangeSerialized`1.Position">
            <summary>
            Position whose value was changed.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.GridViews.ValueChangeSerialized`1.OldValue">
            <summary>
            Original value that was changed.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.GridViews.ValueChangeSerialized`1.NewValue">
            <summary>
            New value that was set.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.GridViews.ValueChangeSerialized`1.op_Implicit(SadRogue.Primitives.GridViews.ValueChange{`0})~SadRogue.Primitives.SerializedTypes.GridViews.ValueChangeSerialized{`0}">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.GridViews.ValueChange`1"/> to <see cref="T:SadRogue.Primitives.SerializedTypes.GridViews.ValueChangeSerialized`1"/>.
            </summary>
            <param name="valueChange"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.GridViews.ValueChangeSerialized`1.op_Implicit(SadRogue.Primitives.SerializedTypes.GridViews.ValueChangeSerialized{`0})~SadRogue.Primitives.GridViews.ValueChange{`0}">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.SerializedTypes.GridViews.ValueChangeSerialized`1"/> to <see cref="T:SadRogue.Primitives.GridViews.ValueChange`1"/>.
            </summary>
            <param name="valueChange"/>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.SerializedTypes.GridViews.DiffAwareGridViewSerialized`1">
            <summary>
            Serializable (pure-data) object representing a <see cref="T:SadRogue.Primitives.GridViews.DiffAwareGridView`1"/>.
            </summary>
            <typeparam name="T">Type of value being changed.</typeparam>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.GridViews.DiffAwareGridViewSerialized`1.BaseGrid">
            <summary>
            The grid view whose changes are being recorded in diffs.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.GridViews.DiffAwareGridViewSerialized`1.CurrentDiffIndex">
            <summary>
            The index of the diff whose ending state is currently reflected in <see cref="F:SadRogue.Primitives.SerializedTypes.GridViews.DiffAwareGridViewSerialized`1.BaseGrid"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.GridViews.DiffAwareGridViewSerialized`1.Diffs">
            <summary>
            All diffs recorded for the current grid view, and their changes.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.GridViews.DiffAwareGridViewSerialized`1.AutoCompress">
            <summary>
            Whether or not to automatically compress diffs when the currently applied diff is changed.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.GridViews.DiffAwareGridViewSerialized`1.op_Implicit(SadRogue.Primitives.GridViews.DiffAwareGridView{`0})~SadRogue.Primitives.SerializedTypes.GridViews.DiffAwareGridViewSerialized{`0}">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.GridViews.DiffAwareGridView`1"/> to <see cref="T:SadRogue.Primitives.SerializedTypes.GridViews.DiffAwareGridViewSerialized`1"/>.
            </summary>
            <param name="view"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.GridViews.DiffAwareGridViewSerialized`1.op_Implicit(SadRogue.Primitives.SerializedTypes.GridViews.DiffAwareGridViewSerialized{`0})~SadRogue.Primitives.GridViews.DiffAwareGridView{`0}">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.SerializedTypes.GridViews.DiffAwareGridViewSerialized`1"/> to <see cref="T:SadRogue.Primitives.GridViews.DiffAwareGridView`1"/>.
            </summary>
            <param name="view"/>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.SerializedTypes.PaletteSerialized">
            <summary>
            Serializable (pure-data) object representing a <see cref="T:SadRogue.Primitives.Palette"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.PaletteSerialized.Colors">
            <summary>
            Colors in the palette.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.PaletteSerialized.op_Implicit(SadRogue.Primitives.SerializedTypes.PaletteSerialized)~SadRogue.Primitives.Palette">
            <summary>
            Converts from <see cref="T:SadRogue.Primitives.SerializedTypes.PaletteSerialized"/> to <see cref="T:SadRogue.Primitives.Palette"/>.
            </summary>
            <param name="serialized"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.PaletteSerialized.op_Implicit(SadRogue.Primitives.Palette)~SadRogue.Primitives.SerializedTypes.PaletteSerialized">
            <summary>
            Converts from <see cref="T:SadRogue.Primitives.Palette"/> to <see cref="T:SadRogue.Primitives.SerializedTypes.PaletteSerialized"/>.
            </summary>
            <param name="palette"/>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.SerializedTypes.PointSerialized">
            <summary>
            Serializable (pure-data) object representing a <see cref="T:SadRogue.Primitives.Point"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.PointSerialized.X">
            <summary>
            X-coordinate of the point.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.PointSerialized.Y">
            <summary>
            Y-coordinate of the point.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.PointSerialized.op_Implicit(SadRogue.Primitives.Point)~SadRogue.Primitives.SerializedTypes.PointSerialized">
            <summary>
            Converts from <see cref="T:SadRogue.Primitives.Point"/> to <see cref="T:SadRogue.Primitives.SerializedTypes.PointSerialized"/>.
            </summary>
            <param name="point"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.PointSerialized.op_Implicit(SadRogue.Primitives.SerializedTypes.PointSerialized)~SadRogue.Primitives.Point">
            <summary>
            Converts from <see cref="T:SadRogue.Primitives.SerializedTypes.PointSerialized"/> to <see cref="T:SadRogue.Primitives.Point"/>.
            </summary>
            <param name="serialized"/>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.SerializedTypes.PointHashers.KnownRangeHasherSerialized">
            <summary>
            Serializable (pure-data) object representing a <see cref="T:SadRogue.Primitives.PointHashers.KnownRangeHasher"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.PointHashers.KnownRangeHasherSerialized.MinExtent">
            <summary>
            Minimum x/y values that will generally occur in points hashed by this instance.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.PointHashers.KnownRangeHasherSerialized.BoundsWidth">
            <summary>
            Width of the bounds of points hashed by this instance.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.PointHashers.KnownRangeHasherSerialized.op_Implicit(SadRogue.Primitives.SerializedTypes.PointHashers.KnownRangeHasherSerialized)~SadRogue.Primitives.PointHashers.KnownRangeHasher">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.SerializedTypes.PointHashers.KnownRangeHasherSerialized"/> to <see cref="T:SadRogue.Primitives.PointHashers.KnownRangeHasher"/>.
            </summary>
            <param name="serialized"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.PointHashers.KnownRangeHasherSerialized.op_Implicit(SadRogue.Primitives.PointHashers.KnownRangeHasher)~SadRogue.Primitives.SerializedTypes.PointHashers.KnownRangeHasherSerialized">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.PointHashers.KnownRangeHasher"/> to <see cref="T:SadRogue.Primitives.SerializedTypes.PointHashers.KnownRangeHasherSerialized"/>.
            </summary>
            <param name="rangeHasher"/>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.SerializedTypes.PointHashers.KnownSizeHasherSerialized">
            <summary>
            Serializable (pure-data) object representing a <see cref="T:SadRogue.Primitives.PointHashers.KnownSizeHasher"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.PointHashers.KnownSizeHasherSerialized.BoundsWidth">
            <summary>
            The Width given to the KnownSizeHasher.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.PointHashers.KnownSizeHasherSerialized.op_Implicit(SadRogue.Primitives.SerializedTypes.PointHashers.KnownSizeHasherSerialized)~SadRogue.Primitives.PointHashers.KnownSizeHasher">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.SerializedTypes.PointHashers.KnownSizeHasherSerialized"/> to <see cref="T:SadRogue.Primitives.PointHashers.KnownSizeHasher"/>.
            </summary>
            <param name="serialized"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.PointHashers.KnownSizeHasherSerialized.op_Implicit(SadRogue.Primitives.PointHashers.KnownSizeHasher)~SadRogue.Primitives.SerializedTypes.PointHashers.KnownSizeHasherSerialized">
            <summary>
            Converts <see cref="T:SadRogue.Primitives.PointHashers.KnownSizeHasher"/> to <see cref="T:SadRogue.Primitives.SerializedTypes.PointHashers.KnownSizeHasherSerialized"/>.
            </summary>
            <param name="sizeHasher"/>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.SerializedTypes.PolarCoordinateSerialized">
            <summary>
            Serializable (pure-data) object representing a <see cref="T:SadRogue.Primitives.PolarCoordinate"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.PolarCoordinateSerialized.Radius">
            <summary>
            The distance away from the Origin (0,0) of this Polar Coordinate
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.PolarCoordinateSerialized.Theta">
            <summary>
            The angle of rotation, clockwise, in radians
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.PolarCoordinateSerialized.op_Implicit(SadRogue.Primitives.PolarCoordinate)~SadRogue.Primitives.SerializedTypes.PolarCoordinateSerialized">
            <summary>
            Converts from <see cref="T:SadRogue.Primitives.PolarCoordinate"/> to <see cref="T:SadRogue.Primitives.SerializedTypes.PolarCoordinateSerialized"/>.
            </summary>
            <param name="point"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.PolarCoordinateSerialized.op_Implicit(SadRogue.Primitives.SerializedTypes.PolarCoordinateSerialized)~SadRogue.Primitives.PolarCoordinate">
            <summary>
            Converts from <see cref="T:SadRogue.Primitives.SerializedTypes.PolarCoordinateSerialized"/> to <see cref="T:SadRogue.Primitives.PolarCoordinate"/>.
            </summary>
            <param name="serialized"/>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.SerializedTypes.BisectionResultSerialized">
            <summary>
            Serializable (pure-data) object representing a <see cref="T:SadRogue.Primitives.BisectionResult"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.BisectionResultSerialized.Rect1">
            <summary>
            The first rectangle.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.BisectionResultSerialized.Rect2">
            <summary>
            The second rectangle.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.BisectionResultSerialized.op_Implicit(SadRogue.Primitives.BisectionResult)~SadRogue.Primitives.SerializedTypes.BisectionResultSerialized">
            <summary>
            Converts from <see cref="T:SadRogue.Primitives.BisectionResult"/> to <see cref="T:SadRogue.Primitives.SerializedTypes.BisectionResultSerialized"/>.
            </summary>
            <param name="result"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.BisectionResultSerialized.op_Implicit(SadRogue.Primitives.SerializedTypes.BisectionResultSerialized)~SadRogue.Primitives.BisectionResult">
            <summary>
            Converts from <see cref="T:SadRogue.Primitives.SerializedTypes.BisectionResultSerialized"/> to <see cref="T:SadRogue.Primitives.BisectionResult"/>.
            </summary>
            <param name="result"/>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.SerializedTypes.RectangleSerialized">
            <summary>
            Serializable (pure-data) object representing a <see cref="T:SadRogue.Primitives.Rectangle"/>.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.RectangleSerialized.X">
            <summary>
            X-coordinate of the minimum extent of the rectangle.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.RectangleSerialized.Y">
            <summary>
            Y-coordinate of the minimum extent of the rectangle.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.RectangleSerialized.Width">
            <summary>
            Width of the rectangle.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SerializedTypes.RectangleSerialized.Height">
            <summary>
            Height of the rectangle.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.RectangleSerialized.op_Implicit(SadRogue.Primitives.Rectangle)~SadRogue.Primitives.SerializedTypes.RectangleSerialized">
            <summary>
            Converts from <see cref="T:SadRogue.Primitives.Rectangle"/> to <see cref="T:SadRogue.Primitives.SerializedTypes.RectangleSerialized"/>.
            </summary>
            <param name="rect"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SerializedTypes.RectangleSerialized.op_Implicit(SadRogue.Primitives.SerializedTypes.RectangleSerialized)~SadRogue.Primitives.Rectangle">
            <summary>
            Converts from <see cref="T:SadRogue.Primitives.SerializedTypes.RectangleSerialized"/> to <see cref="T:SadRogue.Primitives.Rectangle"/>.
            </summary>
            <param name="rect"/>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.CirclePositionsEnumerator">
             <summary>
             A custom enumerator used to iterate over all positions on the outside of a circle efficiently.
            
             Generally, you should use <see cref="M:SadRogue.Primitives.Shapes.GetCircle(SadRogue.Primitives.Point,System.Int32)"/> to get an instance of this, rather than creating one
             yourself.
             </summary>
             <remarks>
             This type is a struct, and as such is much more efficient when used in a foreach loop than a function returning
             IEnumerable&lt;Point&gt; by using "yield return".  This type does implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
             so you can pass it to functions which require one (for example, System.LINQ).  However, this will have reduced
             performance due to boxing of the iterator.
             </remarks>
        </member>
        <member name="P:SadRogue.Primitives.CirclePositionsEnumerator.Current">
            <summary>
            The current value for enumeration.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.CirclePositionsEnumerator.#ctor(SadRogue.Primitives.Point,System.Int32)">
            <summary>
            Creates an enumerator which iterates over all positions on the outside of the given circle.
            </summary>
            <param name="center">Center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
        </member>
        <member name="M:SadRogue.Primitives.CirclePositionsEnumerator.MoveNext">
            <summary>
            Advances the iterator to the next position.
            </summary>
            <returns>True if the a new position on the outside of the circle exists; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.CirclePositionsEnumerator.GetEnumerator">
            <summary>
            Returns this enumerator.
            </summary>
            <returns>This enumerator.</returns>
        </member>
        <member name="M:SadRogue.Primitives.CirclePositionsEnumerator.ToEnumerable">
            <summary>
            Obsolete.
            </summary>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.CirclePositionsEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
            This iterator does not support resetting.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="T:SadRogue.Primitives.EllipsePositionsEnumerator">
             <summary>
             A custom enumerator used to iterate over all positions on the outside of an ellipse efficiently.
            
             Generally, you should use <see cref="M:SadRogue.Primitives.Shapes.GetEllipse(SadRogue.Primitives.Point,SadRogue.Primitives.Point)"/> to get an instance of this, rather than creating one
             yourself.
             </summary>
             <remarks>
             This type is a struct, and as such is much more efficient when used in a foreach loop than a function returning
             IEnumerable&lt;Point&gt; by using "yield return".  This type does implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
             so you can pass it to functions which require one (for example, System.LINQ).  However, this will have reduced
             performance due to boxing of the iterator.
             </remarks>
        </member>
        <member name="P:SadRogue.Primitives.EllipsePositionsEnumerator.Current">
            <summary>
            The current value for enumeration.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.EllipsePositionsEnumerator.#ctor(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Creates an enumerator which iterates over all positions on the outside of the given ellipse.
            </summary>
            <param name="f1">The first focus point of the ellipse.</param>
            <param name="f2">The second focus point of the ellipse.</param>
        </member>
        <member name="M:SadRogue.Primitives.EllipsePositionsEnumerator.MoveNext">
            <summary>
            Advances the iterator to the next position.
            </summary>
            <returns>True if the a new position on the outside of the ellipse exists; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.EllipsePositionsEnumerator.GetEnumerator">
            <summary>
            Returns this enumerator.
            </summary>
            <returns>This enumerator.</returns>
        </member>
        <member name="M:SadRogue.Primitives.EllipsePositionsEnumerator.ToEnumerable">
            <summary>
            Obsolete.
            </summary>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.EllipsePositionsEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
            This iterator does not support resetting.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="T:SadRogue.Primitives.Shapes">
            <summary>
            Provides implementations of various shape algorithms which are useful for for generating points representing
            shapes on a 2D integer grid.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.Shapes.GetCircle(SadRogue.Primitives.Point,System.Int32)">
            <summary>
            Gets the points on the outside of a circle.
            </summary>
            <remarks>
            This function returns a custom iterator which is very fast when used in a foreach loop.
            If you need an IEnumerable to use with LINQ or other code, the returned struct does implement that interface;
            however note that iterating over it this way will not perform as well as iterating directly over this object.
            </remarks>
            <param name="center">Center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <returns>Every point on the outer edges of the circle specified.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Shapes.GetEllipse(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Gets the points on the outside of an ellipse.
            </summary>
            <remarks>
            This function returns a custom iterator which is very fast when used in a foreach loop.
            If you need an IEnumerable to use with LINQ or other code, the returned struct does implement that interface;
            however note that iterating over it this way will not perform as well as iterating directly over this object.
            </remarks>
            <param name="f1">The first focus point of the ellipse.</param>
            <param name="f2">The second focus point of the ellipse.</param>
            <returns>Every point on the outer edges of the ellipse specified.</returns>
        </member>
        <member name="M:SadRogue.Primitives.Shapes.GetBox(SadRogue.Primitives.Rectangle)">
            <summary>
            Gets the points on the outside of a box defined by the outer edges of the given rectangle.
            </summary>
            <remarks>
            This function returns a custom iterator which is very fast when used in a foreach loop.
            If you need an IEnumerable to use with LINQ or other code, the returned struct does implement that interface;
            however note that iterating over it this way will not perform as well as iterating directly over this object.
            </remarks>
            <param name="rectangle">A rectangle whose outer edges define the box to iterate over.</param>
            <returns>Every point on the outer edges of the box specified.</returns>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1">
             <summary>
             A version of <see cref="T:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1"/> which takes items that implement <see cref="T:SadRogue.Primitives.IPositionable"/>,
             and uses that interface's properties/events to automatically ensure items are recorded at the proper positions
             in the spatial map when they move and that the position fields are updated if the spatial map's move functions
             are used.
             </summary>
             <remarks>
             This class automatically keeps the spatial map position of each object synced up with their
             <see cref="P:SadRogue.Primitives.IPositionable.Position"/> property; you may either use the Move functions of the spatial map,
             in which case the Position fields of the objects are updated as appropriate, or you may change the Position
             field, in which case the spatial map position is updated to match.
            
             If you want to manually control the positions of items in the spatial map, you should use
             <see cref="T:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1"/> instead.
             </remarks>
             <typeparam name="T">The type of object that will be contained by this spatial map.</typeparam>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.Count">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.Items">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.Positions">
            <inheritdoc />
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.ItemAdded">
            <inheritdoc />
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.ItemMoved">
            <inheritdoc />
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.ItemRemoved">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.LayerMasker">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.Layers">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.NumberOfLayers">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.StartingLayer">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Func{System.Int32,SadRogue.Primitives.Pooling.IListPool{`0}},System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point},System.Int32,System.UInt32)">
            <summary>
            Constructor.
            </summary>
            <param name="itemComparer">
            Equality comparer to use for comparison and hashing of type T. Be especially mindful of the
            efficiency of its GetHashCode function, as it will determine the efficiency of
            many AdvancedLayeredSpatialMap functions.
            </param>
            <param name="numberOfLayers">Number of layers to include.</param>
            <param name="customListPoolCreator">
            A function used to determine the list pool implementation used for the spatial maps which support multiple
            items in a location (if any).  The function takes the layer it is creating the pool for as a parameter.
            If no custom creator is specified, a ListPool is used.
            </param>
            <param name="pointComparer">
            Equality comparer to use for comparison and hashing of points, as object are added to/removed from/moved
            around the spatial map.  Be especially mindful of the efficiency of its GetHashCode function, as it will
            determine the efficiency of many AdvancedLayeredSpatialMap functions.  Defaults to the default equality
            comparer for Point, which uses a fairly efficient generalized hashing algorithm.
            </param>
            <param name="startingLayer">Index to use for the first layer.</param>
            <param name="layersSupportingMultipleItems">
            A layer mask indicating which layers should support multiple items residing at the same
            location on that layer. Defaults to no layers.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.GetEnumerator">
            <summary>
            Used by foreach loop, so that the class will give ISpatialTuple objects when used in a
            foreach loop. Generally should never be called explicitly.
            </summary>
            <returns>An enumerator for the spatial map</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Generic iterator used internally by foreach loops.
            </summary>
            <returns>Enumerator to ISpatialTuple instances.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.AsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.CanAdd(`0)">
            <summary>
            Returns true if the given item can be added at its current position, eg. it is on a layer in the spatial map and its
            layer will accept it; false otherwise.
            </summary>
            <param name="newItem">Item to add.</param>
            <returns>True if the item can be successfully added at its current position; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.CanAdd(`0,SadRogue.Primitives.Point)">
            <summary>
            Returns true if the given item can be added at the given position, eg. it is on a layer in the spatial map and its
            layer will accept it; false otherwise.
            </summary>
            <param name="newItem">Item to add.</param>
            <param name="position">Position to add item to.</param>
            <returns>True if the item can be successfully added at the position given; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.CanAdd(`0,System.Int32,System.Int32)">
            <summary>
            Returns true if the given item can be added at the given position, eg. it is on a layer in the spatial map and its
            layer will accept it; false otherwise.
            </summary>
            <param name="newItem">Item to add.</param>
            <param name="x">X-value of the position to add item to.</param>
            <param name="y">Y-value of the position to add item to.</param>
            <returns>True if the item can be successfully added at the position given; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.Add(`0)">
            <summary>
            Adds the given item at its position on the correct layer.  ArgumentException is thrown if the layer is
            invalid or the item otherwise cannot be added to its layer.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.Add(`0,SadRogue.Primitives.Point)">
            <summary>
            Changes the position field of the given item to the given value, and then adds it to the spatial map on the
            correct layer.  ArgumentException is thrown if the layer is invalid or the item otherwise cannot be added to
            its layer.
            </summary>
            <param name="item">Item to add.</param>
            <param name="position">Position to add item at.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.Add(`0,System.Int32,System.Int32)">
            <summary>
            Changes the position field of the given item to the given value, and then adds it to the spatial map on the
            correct layer.  ArgumentException is thrown if the layer is invalid or the item otherwise cannot be added to
            its layer.
            </summary>
            <param name="item">Item to add.</param>
            <param name="x">X-value of position to add item at.</param>
            <param name="y">Y-value of position to add item at.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.TryAdd(`0)">
            <summary>
            Adds the given item at its position on the correct layer.  Returns false if the layer is
            invalid or the item otherwise cannot be added to its layer.
            </summary>
            <param name="item">The item to add.</param>
            <returns>True if the item was successfully added; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.TryAdd(`0,SadRogue.Primitives.Point)">
            <summary>
            Changes the position field of the given item to the given value, and then adds it to the spatial map on the
            correct layer.  If the layer is invalid or the item otherwise cannot be added to its layer, does nothing and
            returns false.
            </summary>
            <param name="item">Item to add.</param>
            <param name="position">Position to add item at.</param>
            <returns>True if the item was added, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.TryAdd(`0,System.Int32,System.Int32)">
            <summary>
            Changes the position field of the given item to the given value, and then adds it to the spatial map on the
            correct layer.  If the layer is invalid or the item otherwise cannot be added to its layer, does nothing and
            returns false.
            </summary>
            <param name="item">Item to add.</param>
            <param name="x">X-value of position to add item at.</param>
            <param name="y">Y-value of position to add item at.</param>
            <returns>True if the item was added, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.CanMove(`0,SadRogue.Primitives.Point)">
            <summary>
            Returns true if the given item can be moved from its current location to the specified one, eg. it is in the spatial
            map and its layer will accept it at the new position; false otherwise.
            </summary>
            <param name="item">Item to move.</param>
            <param name="target">Location to move item to.</param>
            <returns>true if the given item can be moved to the given position; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.CanMove(`0,System.Int32,System.Int32)">
            <summary>
            Returns true if the given item can be moved from its current location to the specified one, eg. it is in the spatial
            map and its layer will
            accept it at the new position; false otherwise.
            </summary>
            <param name="item">Item to move.</param>
            <param name="targetX">X-value of the location to move item to.</param>
            <param name="targetY">Y-value of the location to move item to.</param>
            <returns>true if the given item can be moved to the given position; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.CanMoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.CanMoveAll(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#IReadOnlySpatialMap{T}#CanMoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#IReadOnlySpatialMap{T}#CanMoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.Move(`0,SadRogue.Primitives.Point)">
            <summary>
            Moves the item specified to the position specified, updating its <see cref="P:SadRogue.Primitives.IPositionable.Position"/> field
            accordingly. Throws ArgumentException if either the item given
            isn't in the spatial map, or if the layer that the item resides on is configured to allow only one item per
            location at any given time and there is already an item at <paramref name="target" />.
            </summary>
            <param name="item">The item to move.</param>
            <param name="target">Position to move the given item to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.Move(`0,System.Int32,System.Int32)">
            <summary>
            Moves the item specified to the position specified, updating its <see cref="P:SadRogue.Primitives.IPositionable.Position"/> field
            accordingly. Throws ArgumentException if either the item given
            isn't in the spatial map, or if the layer that the item resides on is configured to allow only one item per
            location at any given time and there is already an item at the target position.
            </summary>
            <param name="item">The item to move.</param>
            <param name="targetX">X-value of position to move the given item to.</param>
            <param name="targetY">Y-value of position to move the given item to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.TryMove(`0,SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.TryMove(`0,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.MoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.UInt32)">
            <summary>
            Moves all items that are on layers in <paramref name="layerMask" /> at the specified source location to the target
            location, updating their <see cref="P:SadRogue.Primitives.IPositionable.Position"/> fields accordingly.  Throws ArgumentException
            if one or more items cannot be moved or there are no items to be moved.
            </summary>
            <param name="current">Location to move items from.</param>
            <param name="target">Location to move items to.</param>
            <param name="layerMask">The layer mask to use to find items.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.MoveAll(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Moves all items that are on layers in <paramref name="layerMask" /> at the specified source location to the target
            location, updating their <see cref="P:SadRogue.Primitives.IPositionable.Position"/> fields accordingly.  Throws ArgumentException
            if one or more items cannot be moved or there are no items to be moved.
            </summary>
            <param name="currentX">X-value of the location to move items from.</param>
            <param name="currentY">Y-value of the location to move items from.</param>
            <param name="targetX">X-value of the location to move items to.</param>
            <param name="targetY">Y-value of the location to move items to.</param>
            <param name="layerMask">The layer mask to use to find items.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#ISpatialMap{T}#MoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#ISpatialMap{T}#MoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.TryMoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.UInt32)">
            <summary>
            Moves all items that are on layers in <paramref name="layerMask" /> at the specified source location to the
            target location, updating their Position fields accordingly.  Returns false and moves nothing if one or more
            items cannot be moved or there are no items to be moved.
            </summary>
            <param name="current">Location to move items from.</param>
            <param name="target">Location to move items to.</param>
            <param name="layerMask">The layer mask to use to find items.</param>
            <returns>
            True if all items at <paramref name="current"/> on layers within the mask given were moved to
            <paramref name="target"/>; false otherwise.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.TryMoveAll(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Moves all items that are on layers in <paramref name="layerMask" /> at the specified source location to the
            target location, updating their Position fields accordingly.  Returns false and moves nothing if one or more
            items cannot be moved or there are no items to be moved.
            </summary>
            <param name="currentX">X-value of the location to move items from.</param>
            <param name="currentY">Y-value of the location to move items from.</param>
            <param name="targetX">X-value of the location to move items to.</param>
            <param name="targetY">Y-value of the location to move items to.</param>
            <param name="layerMask">The layer mask to use to find items.</param>
            <returns>
            True if all items at the current position on layers within the mask given were moved to
            the target position; false otherwise.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#ISpatialMap{T}#TryMoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#ISpatialMap{T}#TryMoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.MoveValid(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.UInt32)">
            <summary>
            Moves all items that can be moved, that are at the given position and on any layer specified by the given layer
            mask, to the new position, updating their Position fields accordingly. If no layer mask is specified,
            defaults to all layers.
            </summary>
            <param name="current">Position to move all items from.</param>
            <param name="target">Position to move all items to.</param>
            <param name="layerMask">
            Layer mask specifying which layers to search for items on. Defaults to all layers.
            </param>
            <returns>All items moved.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.MoveValid(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Moves all items that can be moved, that are at the given position and on any layer specified by the given layer
            mask, to the new position, updating their Position fields accordingly. If no layer mask is specified,
            defaults to all layers.
            </summary>
            <param name="currentX">X-value of the position to move items from.</param>
            <param name="currentY">Y-value of the position to move items from.</param>
            <param name="targetX">X-value of the position to move items to.</param>
            <param name="targetY">Y-value of the position to move items from.</param>
            <param name="layerMask">
            Layer mask specifying which layers to search for items on. Defaults to all layers.
            </param>
            <returns>All items moved.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.MoveValid(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.Collections.Generic.List{`0},System.UInt32)">
            <summary>
            Moves all items that can be moved, that are at the given position and on any layer specified by the given layer
            mask, to the new position, updating their Position fields accordingly. If no layer mask is specified,
            defaults to all layers.
            </summary>
            <param name="current">Position to move items from.</param>
            <param name="target">Position to move items to.</param>
            <param name="itemsMovedOutput">List in which to place all moved items.</param>
            <param name="layerMask">
            Layer mask specifying which layers to search for items on. Defaults to all layers.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.MoveValid(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{`0},System.UInt32)">
            <summary>
            Moves all items that can be moved, that are at the given position and on any layer specified by the given layer
            mask, to the new position, updating their Position fields accordingly. If no layer mask is specified,
            defaults to all layers.
            </summary>
            <param name="currentX">X-value of the position to move items from.</param>
            <param name="currentY">Y-value of the position to move items from.</param>
            <param name="targetX">X-value of the position to move items to.</param>
            <param name="targetY">Y-value of the position to move items from.</param>
            <param name="itemsMovedOutput">List in which to place all moved items.</param>
            <param name="layerMask">
            Layer mask specifying which layers to search for items on. Defaults to all layers.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#IReadOnlySpatialMap{T}#Contains(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.Contains(SadRogue.Primitives.Point,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.Contains(System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#IReadOnlySpatialMap{T}#GetItemsAt(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#IReadOnlySpatialMap{T}#GetItemsAt(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.GetItemsAt(SadRogue.Primitives.Point,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.GetItemsAt(System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.GetPositionOfOrNull(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.TryGetPositionOf(`0,SadRogue.Primitives.Point@)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.GetPositionOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.GetLayer(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.GetLayersInMask(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.ToString">
            <summary>
            Returns a string representation of the spatial map.
            </summary>
            <returns>A string representation of the spatial map.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.ToString(System.Func{`0,System.String})">
            <summary>
            Returns a string representation of each item in the spatial map, with elements
            displayed in the specified way.
            </summary>
            <param name="elementStringifier">
            A function that takes an element of type T and produces the string that should
            represent it in the output.
            </param>
            <returns>A string representing each layer in the spatial map, with each element displayed in the specified way.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.TryRemove(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.Remove(SadRogue.Primitives.Point,System.UInt32)">
            <summary>
            Removes all items at the specified location that are on any layer included in the given
            layer mask from the spatial map. Returns any items that were removed. Defaults to searching
            for items on all layers.
            </summary>
            <param name="position">Position to remove items from.</param>
            <param name="layerMask">
            The layer mask indicating which layers to search for items. Defaults to all layers.
            </param>
            <returns>Any items that were removed, or nothing if no items were removed.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.Remove(System.Int32,System.Int32,System.UInt32)">
            <summary>
            Removes all items at the specified location that are on any layer included in the given
            layer mask from the spatial map. Returns any items that were removed. Defaults to searching
            for items on all layers.
            </summary>
            <param name="x">X-value of the position to remove items from.</param>
            <param name="y">Y-value of the position to remove items from.</param>
            <param name="layerMask">
            The layer mask indicating which layers to search for items. Defaults to all layers.
            </param>
            <returns>Any items that were removed, or nothing if no items were removed.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.TryRemove(SadRogue.Primitives.Point,System.UInt32)">
            <summary>
            Attempts to remove all items at the specified location that are on any layer included in the given
            layer mask from the spatial map. Returns true if the items were successfully removed; false if one or more
            failed.
            </summary>
            <param name="position">Position to remove items from.</param>
            <param name="layerMask">
            The layer mask indicating which layers to search for items. Defaults to all layers.
            </param>
            <returns>True if the items were successfully removed; false otherwise</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedLayeredSpatialMap`1.TryRemove(System.Int32,System.Int32,System.UInt32)">
            <summary>
            Attempts to remove all items at the specified location that are on any layer included in the given
            layer mask from the spatial map. Returns true if the items were successfully removed; false if one or more
            failed.
            </summary>
            <param name="x">X-value of the position to remove items from.</param>
            <param name="y">Y-value of the position to remove items from.</param>
            <param name="layerMask">
            The layer mask indicating which layers to search for items. Defaults to all layers.
            </param>
            <returns>True if the items were successfully removed; false otherwise</returns>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.AutoSyncLayeredSpatialMap`1">
             <summary>
             A version of <see cref="T:SadRogue.Primitives.SpatialMaps.LayeredSpatialMap`1"/> which takes items that implement <see cref="T:SadRogue.Primitives.IPositionable"/>,
             and uses that interface's properties/events to automatically ensure items are recorded at the proper positions
             in the spatial map when they move and that the position fields are updated if the spatial map's move functions
             are used.
             </summary>
             <remarks>
             This class automatically keeps the spatial map position of each object synced up with their
             <see cref="P:SadRogue.Primitives.IPositionable.Position"/> property; you may either use the Move functions of the spatial map,
             in which case the Position fields of the objects are updated as appropriate, or you may change the Position
             field, in which case the spatial map position is updated to match.
            
             If you want to manually control the positions of items in the spatial map, you should use
             <see cref="T:SadRogue.Primitives.SpatialMaps.LayeredSpatialMap`1"/> instead.
             </remarks>
             <typeparam name="T">The type of object that will be contained by this spatial map.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncLayeredSpatialMap`1.#ctor(System.Int32,System.Func{System.Int32,SadRogue.Primitives.Pooling.IListPool{`0}},System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point},System.Int32,System.UInt32)">
            <summary>
            Constructor.
            </summary>
            <param name="numberOfLayers">Number of layers to include.</param>
            <param name="customListPoolCreator">
            A function used to determine the list pool implementation used for the spatial maps which support multiple
            items in a location (if any).  The function takes the layer it is creating the pool for as a parameter.
            If no custom creator is specified, a ListPool is used.
            </param>
            <param name="pointComparer">
            Equality comparer to use for comparison and hashing of points, as object are added to/removed from/moved
            around the spatial map.  Be especially mindful of the efficiency of its GetHashCode function, as it will
            determine the efficiency of many AdvancedLayeredSpatialMap functions.  Defaults to the default equality
            comparer for Point, which uses a fairly efficient generalized hashing algorithm.
            </param>
            <param name="startingLayer">Index to use for the first layer.</param>
            <param name="layersSupportingMultipleItems">
            A layer mask indicating which layers should support multiple items residing at the same
            location on that layer. Defaults to no layers.
            </param>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1">
             <summary>
             A version of <see cref="T:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1"/> which takes items that implement <see cref="T:SadRogue.Primitives.IPositionable"/>,
             and uses that interface's properties/events to automatically ensure items are recorded at the proper positions
             in the spatial map when they move and that the position fields are updated if the spatial map's move functions
             are used.
             </summary>
             <remarks>
             This class automatically keeps the spatial map position of each object synced up with their
             <see cref="P:SadRogue.Primitives.IPositionable.Position"/> property; you may either use the Move functions of the spatial map,
             in which case the Position fields of the objects are updated as appropriate, or you may change the Position
             field, in which case the spatial map position is updated to match.
            
             If you want to manually control the positions of items in the spatial map, you should use
             <see cref="T:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1"/> instead.
             </remarks>
             <typeparam name="T">The type of object that will be contained by this spatial map.</typeparam>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.Count">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.Items">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.Positions">
            <inheritdoc />
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.ItemAdded">
            <inheritdoc />
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.ItemMoved">
            <inheritdoc />
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.ItemRemoved">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point},System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="itemComparer">
            Equality comparer to use for comparison and hashing of type T. Be especially mindful of the
            efficiency of its GetHashCode function, as it will determine the efficiency of many AdvancedMultiSpatialMap
            functions.
            </param>
            <param name="pointComparer">
            Equality comparer to use for comparison and hashing of points, as object are added to/removed from/moved
            around the spatial map.  Be especially mindful of the efficiency of its GetHashCode function, as it will
            determine the efficiency of many AdvancedMultiSpatialMap functions.  Defaults to the default equality
            comparer for Point, which uses a fairly efficient generalized hashing algorithm.
            </param>
            <param name="initialCapacity">
            The initial maximum number of elements the AdvancedMultiSpatialMap can hold before it has to
            internally resize data structures. Defaults to 32.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},SadRogue.Primitives.Pooling.IListPool{`0},System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point},System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="itemComparer">
            Equality comparer to use for comparison and hashing of type T. Be especially mindful of the
            efficiency of its GetHashCode function, as it will determine the efficiency of many AdvancedMultiSpatialMap
            functions.
            </param>
            <param name="listPool">
            The list pool implementation to use.  Specify <see cref="T:SadRogue.Primitives.Pooling.NoPoolingListPool`1"/> to disable pooling entirely.
            This implementation _may_ be shared with other spatial maps if you wish, however be aware that no thread safety is implemented
            by the default list pool implementations or the spatial map itself.
            </param>
            <param name="pointComparer">
            Equality comparer to use for comparison and hashing of points, as object are added to/removed from/moved
            around the spatial map.  Be especially mindful of the efficiency of its GetHashCode function, as it will
            determine the efficiency of many AdvancedMultiSpatialMap functions.  Defaults to the default equality
            comparer for Point, which uses a fairly efficient generalized hashing algorithm.
            </param>
            <param name="initialCapacity">
            The initial maximum number of elements the AdvancedMultiSpatialMap can hold before it has to
            internally resize data structures. Defaults to 32.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.GetEnumerator">
            <summary>
            Used by foreach loop, so that the class will give ISpatialTuple objects when used in a
            foreach loop. Generally should never be called explicitly.
            </summary>
            <returns>An enumerator for the spatial map.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.AsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.CanAdd(`0)">
            <summary>
            Returns true if the given item can be added at its current position, eg. if the item is not already in the spatial map;
            false otherwise.
            </summary>
            <param name="newItem">Item to add.</param>
            <returns>True if the item can be successfully added at its current position; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.CanAdd(`0,SadRogue.Primitives.Point)">
            <summary>
            Returns true if the given item can be added at the given position, eg. if the item is not already in the spatial map;
            false otherwise.
            </summary>
            <param name="newItem">Item to add.</param>
            <param name="position">Position to add item to.</param>
            <returns>True if the item can be successfully added at the position given; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.CanAdd(`0,System.Int32,System.Int32)">
            <summary>
            Returns true if the given item can be added at the given position, eg. if the item is not already in the spatial map;
            false otherwise.
            </summary>
            <param name="newItem">Item to add.</param>
            <param name="x">X-value of the position to add item to.</param>
            <param name="y">Y-value of the position to add item to.</param>
            <returns>True if the item can be successfully added at the position given; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.Add(`0)">
            <summary>
            Adds the given item at its position, provided the item is not already in the
            spatial map. If the item is already added, throws ArgumentException.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.Add(`0,SadRogue.Primitives.Point)">
            <summary>
            Changes the position field of the given item to the given value, and then adds it to the spatial map, provided
            the item is not already in the spatial map. If the item is already added, throws ArgumentException.
            </summary>
            <param name="item">The item to add.</param>
            <param name="position">The position at which to add the new item.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.Add(`0,System.Int32,System.Int32)">
            <summary>
            Changes the position field of the given item to the given value, and then adds it to the spatial map, provided
            the item is not already in the spatial map. If the item is already added, throws ArgumentException.
            </summary>
            <param name="item">The item to add.</param>
            <param name="x">x-value of the position to add item to.</param>
            <param name="y">y-value of the position to add item to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.TryAdd(`0)">
            <summary>
            Adds the given item at its position, provided the item is not already in the spatial map. If the item is
            already added, returns false.
            </summary>
            <param name="item">The item to add.</param>
            <returns>True if the item was successfully added; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.TryAdd(`0,SadRogue.Primitives.Point)">
            <summary>
            Changes the position field of the given item to the given value, and then adds it to the spatial map, provided
            the item is not already in the spatial map. If the item is already added, nothing is changed and the function returns false.
            </summary>
            <param name="item">The item to add.</param>
            <param name="position">The position at which to add the new item.</param>
            <returns>True if the item was successfully added; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.TryAdd(`0,System.Int32,System.Int32)">
            <summary>
            Changes the position field of the given item to the given value, and then adds it to the spatial map, provided
            the item is not already in the spatial map. If the item is already added, nothing is changed and the function returns false.
            </summary>
            <param name="item">The item to add.</param>
            <param name="x">x-value of the position to add item to.  Must match the item's Position field.</param>
            <param name="y">y-value of the position to add item to.  Must match the item's Position field.</param>
            <returns>True if the item was successfully added; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.CanMove(`0,SadRogue.Primitives.Point)">
            <summary>
            Returns true if the given item can be moved from its current location to the specified one,
            eg. the item is contained within the spatial map; false otherwise.
            </summary>
            <param name="item">Item to move.</param>
            <param name="target">Location to move item to.</param>
            <returns>true if the given item can be moved to the given position; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.CanMove(`0,System.Int32,System.Int32)">
            <summary>
            Returns true if the given item can be moved from its current location to the specified one,
            eg. the item is contained within the spatial map; false otherwise.
            </summary>
            <param name="item">Item to move.</param>
            <param name="targetX">X-value of the location to move item to.</param>
            <param name="targetY">Y-value of the location to move item to.</param>
            <returns>true if the given item can be moved to the given position; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.CanMoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.CanMoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.Move(`0,SadRogue.Primitives.Point)">
            <summary>
            Moves the item specified to the position specified, updating its <see cref="P:SadRogue.Primitives.IPositionable.Position"/> field
            accordingly. If the item does not exist in the spatial map, the function throws ArgumentException.
            </summary>
            <param name="item">The item to move.</param>
            <param name="target">The position to move it to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.Move(`0,System.Int32,System.Int32)">
            <summary>
            Moves the item specified to the position specified, updating its <see cref="P:SadRogue.Primitives.IPositionable.Position"/> field
            accordingly. If the item does not exist in the spatial map or is already at the target position, the function
            throws ArgumentException.
            </summary>
            <param name="item">The item to move.</param>
            <param name="targetX">X-value of the location to move it to.</param>
            <param name="targetY">Y-value of the location to move it to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.TryMove(`0,SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.TryMove(`0,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.MoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Moves all items at the specified source location to the target location, updating their
            <see cref="P:SadRogue.Primitives.IPositionable.Position"/> fields accordingly.  Throws ArgumentException if there are
            no items to be moved.
            </summary>
            <param name="current">Location to move items from.</param>
            <param name="target">Location to move items to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.TryMoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.MoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves all items at the specified source location to the target location, updating their
            <see cref="P:SadRogue.Primitives.IPositionable.Position"/> fields accordingly.  Throws ArgumentException if there are
            no items to be moved.
            </summary>
            <param name="currentX">X-value of the location to move items from.</param>
            <param name="currentY">Y-value of the location to move items from.</param>
            <param name="targetX">X-value of the location to move items to.</param>
            <param name="targetY">Y-value of the location to move items to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.TryMoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.MoveValid(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.MoveValid(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.Collections.Generic.List{`0})">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.MoveValid(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.MoveValid(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{`0})">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.Contains(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.Contains(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.GetItemsAt(SadRogue.Primitives.Point)">
            <summary>
            Gets the item(s) at the given position if there are any items, or returns
            nothing if there is nothing at that position.
            </summary>
            <param name="position">The position to return the item(s) for.</param>
            <returns>
            The item(s) at the given position if there are any items, or nothing if there is nothing
            at that position.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.GetItemsAt(System.Int32,System.Int32)">
            <summary>
            Gets the item(s) at the given position if there are any items, or returns
            nothing if there is nothing at that position.
            </summary>
            <param name="x">The x-value of the position to return the item(s) for.</param>
            <param name="y">The y-value of the position to return the item(s) for.</param>
            <returns>
            The item(s) at the given position if there are any items, or nothing if there is nothing
            at that position.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.GetPositionOfOrNull(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.TryGetPositionOf(`0,SadRogue.Primitives.Point@)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.GetPositionOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.ToString(System.Func{`0,System.String})">
            <summary>
            Returns a string representation of the spatial map, allowing display of the
            spatial map's items in a specified way.
            </summary>
            <param name="itemStringifier">Function that turns an item into a string.</param>
            <returns>A string representation of the spatial map.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.ToString">
            <summary>
            Returns a string representation of the spatial map.
            </summary>
            <returns>A string representation of the spatial map.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.Remove(`0)">
            <summary>
            Removes the item specified, if it exists.  Throws ArgumentException if the item is
            not in the spatial map.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.TryRemove(`0)">
            <summary>
            Removes the item specified, if it exists.  If the item is not in the spatial map, returns false.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was successfully removed; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.Remove(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.TryRemove(SadRogue.Primitives.Point)">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.Remove(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedMultiSpatialMap`1.TryRemove(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.AutoSyncMultiSpatialMap`1">
             <summary>
             A version of <see cref="T:SadRogue.Primitives.SpatialMaps.MultiSpatialMap`1"/> which takes items that implement <see cref="T:SadRogue.Primitives.IPositionable"/>,
             and uses that interface's properties/events to automatically ensure items are recorded at the proper positions
             in the spatial map when they move and that the position fields are updated if the spatial map's move functions
             are used.
             </summary>
             <remarks>
             This class automatically keeps the spatial map position of each object synced up with their
             <see cref="P:SadRogue.Primitives.IPositionable.Position"/> property; you may either use the Move functions of the spatial map,
             in which case the Position fields of the objects are updated as appropriate, or you may change the Position
             field, in which case the spatial map position is updated to match.
            
             If you want to manually control the positions of items in the spatial map, you should use
             <see cref="T:SadRogue.Primitives.SpatialMaps.MultiSpatialMap`1"/> instead.
             </remarks>
             <typeparam name="T">The type of object that will be contained by this spatial map.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncMultiSpatialMap`1.#ctor(SadRogue.Primitives.Pooling.IListPool{`0},System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point},System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="listPool">
            The list pool implementation to use.  Specify <see cref="T:SadRogue.Primitives.Pooling.NoPoolingListPool`1"/> to disable pooling entirely.
            This implementation _may_ be shared with other spatial maps if you wish, however be aware that no thread safety is implemented
            by the default list pool implementations or the spatial map itself.
            </param>
            <param name="pointComparer">
            Equality comparer to use for comparison and hashing of points, as object are added to/removed from/moved
            around the spatial map.  Be especially mindful of the efficiency of its GetHashCode function, as it will
            determine the efficiency of many MultiSpatialMap functions.  Defaults to the default equality
            comparer for Point, which uses a fairly efficient generalized hashing algorithm.
            </param>
            <param name="initialCapacity">
            The initial maximum number of elements the spatial map can hold before it has to
            internally resize data structures. Defaults to 32.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncMultiSpatialMap`1.#ctor(System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point},System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="pointComparer">
            Equality comparer to use for comparison and hashing of points, as object are added to/removed from/moved
            around the spatial map.  Be especially mindful of the efficiency of its GetHashCode function, as it will
            determine the efficiency of many MultiSpatialMap functions.  Defaults to the default equality
            comparer for Point, which uses a fairly efficient generalized hashing algorithm.
            </param>
            <param name="initialCapacity">
            The initial maximum number of elements the spatial map can hold before it has to
            internally resize data structures. Defaults to 32.
            </param>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1">
             <summary>
             A version of <see cref="T:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1"/> which takes items that implement <see cref="T:SadRogue.Primitives.IPositionable"/>,
             and uses that interface's properties/events to automatically ensure items are recorded at the proper positions
             in the spatial map when they move and that the position fields are updated if the spatial map's move functions
             are used.
             </summary>
             <remarks>
             This class automatically keeps the spatial map position of each object synced up with their
             <see cref="P:SadRogue.Primitives.IPositionable.Position"/> property; you may either use the Move functions of the spatial map,
             in which case the Position fields of the objects are updated as appropriate, or you may change the Position
             field, in which case the spatial map position is updated to match.
            
             If you want to manually control the positions of items in the spatial map, you should use
             <see cref="T:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1"/> instead.
             </remarks>
             <typeparam name="T">The type of object that will be contained by this spatial map.</typeparam>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.Items">
            <inheritdoc/>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.Positions">
            <inheritdoc/>
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.ItemAdded">
            <inheritdoc/>
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.ItemMoved">
            <inheritdoc/>
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.ItemRemoved">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point},System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="itemComparer">
            Equality comparer to use for comparison and hashing of type T. Be especially mindful of the
            efficiency of its GetHashCode function, as it will determine the efficiency of many spatial map functions.
            functions.
            </param>
            <param name="pointComparer">
            Equality comparer to use for comparison and hashing of points, as object are added to/removed from/moved
            around the spatial map.  Be especially mindful of the efficiency of its GetHashCode function, as it will
            determine the efficiency of many spatial map functions.  Defaults to the default equality comparer for
            Point, which uses a fairly efficient generalized hashing algorithm.
            </param>
            <param name="initialCapacity">
            The initial maximum number of elements the spatial map can hold before it has to
            internally resize data structures. Defaults to 32.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.GetEnumerator">
            <summary>
            Used by foreach loop, so that the class will give ISpatialTuple objects when used in a
            foreach loop. Generally should never be called explicitly.
            </summary>
            <returns>An enumerator for the spatial map</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Generic iterator used internally by foreach loops.
            </summary>
            <returns>Enumerator to ISpatialTuple instances.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.AsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.CanAdd(`0)">
            <summary>
            Returns true if the given item can be added at its current position, eg. the item is not already in the
            spatial map and the position is not already filled; false otherwise.
            </summary>
            <param name="newItem">Item to add.</param>
            <returns>True if the item can be successfully added at its current position; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.CanAdd(`0,SadRogue.Primitives.Point)">
            <summary>
            Returns true if the given item can be added at the given position, eg. the item is not already in the
            spatial map and the position is not already filled; false otherwise.
            </summary>
            <param name="newItem">Item to add.</param>
            <param name="position">Position to add item to.</param>
            <returns>True if the item can be successfully added at the position given; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.CanAdd(`0,System.Int32,System.Int32)">
            <summary>
            Returns true if the given item can be added at the given position, eg. if the item is not already in the spatial map;
            false otherwise.
            </summary>
            <param name="newItem">Item to add.</param>
            <param name="x">X-value of the position to add item to.</param>
            <param name="y">Y-value of the position to add item to.</param>
            <returns>True if the item can be successfully added at the position given; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.Add(`0)">
            <summary>
            Adds the given item at its position, provided the item is not already in the
            spatial map and the position is not already filled. If either of those are the case,
            throws ArgumentException.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.Add(`0,SadRogue.Primitives.Point)">
            <summary>
            Changes the position field of the given item to the given value, and then adds it to the spatial map,
            provided the item is not already in the spatial map and the position is not already filled. If either of
            those are the case, throws ArgumentException.
            </summary>
            <param name="item">Item to add.</param>
            <param name="position">Position to add item to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.Add(`0,System.Int32,System.Int32)">
            <summary>
            Changes the position field of the given item to the given value, and then adds it to the spatial map,
            provided the item is not already in the spatial map and the position is not already filled. If either of
            those are the case, throws ArgumentException.
            </summary>
            <param name="item">Item to add.</param>
            <param name="x">X-value of the position to add item to.</param>
            <param name="y">Y-value of the position to add item to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.TryAdd(`0)">
            <summary>
            Tries to add the given item at its position, provided the item is not already in the
            spatial map and the position is not already filled. If either of those are the case,
            returns false.
            </summary>
            <param name="item">Item to add.</param>
            <returns>True if the item was successfully added; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.TryAdd(`0,SadRogue.Primitives.Point)">
            <summary>
            Changes the position field of the given item to the given value, and tries to add the given item at the given
            position, provided the item is not already in the spatial map and the position is not already filled.
            If either of those are the case, nothing is changed and the function returns false.
            </summary>
            <param name="item">Item to add.</param>
            <param name="position">Position to add item to.</param>
            <returns>True if the item was successfully added; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.TryAdd(`0,System.Int32,System.Int32)">
            <summary>
            Changes the position field of the given item to the given value, and tries to add the given item at the given
            position, provided the item is not already in the spatial map and the position is not already filled.
            If either of those are the case, nothing is changed and the function returns false.
            </summary>
            <param name="item">Item to add.</param>
            <param name="x">X-value of the position to add item to.</param>
            <param name="y">Y-value of the position to add item to.</param>
            <returns>True if the item was successfully added; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.CanMove(`0,SadRogue.Primitives.Point)">
            <summary>
            Returns true if the given item can be moved from its current location to the specified one, eg. if the item
            does exists in the spatial map and if the new position is not already filled by some other item; false otherwise.
            </summary>
            <param name="item">Item to move.</param>
            <param name="target">Location to move item to.</param>
            <returns>true if the given item can be moved to the given position; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.CanMove(`0,System.Int32,System.Int32)">
            <summary>
            Returns true if the given item can be moved from its current location to the specified one, eg. if the item
            exists in the spatial map and if the new position is not already filled by some other item; false otherwise.
            </summary>
            <param name="item">Item to move.</param>
            <param name="targetX">X-value of the location to move item to.</param>
            <param name="targetY">Y-value of the location to move item to.</param>
            <returns>true if the given item can be moved to the given position; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.CanMoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Returns true if the item at the current position specified can be moved to the target position, eg. if an item exists
            at the current
            position and the new position is not already filled by some other item; false otherwise.
            </summary>
            <param name="current">Location to move items from.</param>
            <param name="target">Location to move items to.</param>
            <returns>
            true if all items at the position current can be moved to the position target; false if one or more items
            cannot be moved.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.CanMoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns true if the item at the current position specified can be moved to the target position, eg. if an item exists
            at the current
            position and the new position is not already filled by some other item; false otherwise.
            </summary>
            <param name="currentX">X-value of the location to move items from.</param>
            <param name="currentY">Y-value of the location to move items from.</param>
            <param name="targetX">X-value of the location to move items to.</param>
            <param name="targetY">Y-value of the location to move items to.</param>
            <returns>
            true if all items at the position current can be moved to the position target; false if one or more items
            cannot be moved.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.Move(`0,SadRogue.Primitives.Point)">
            <summary>
            Moves the item specified to the position specified, updating its <see cref="P:SadRogue.Primitives.IPositionable.Position"/> field
            accordingly. Throws ArgumentException if the item does not exist in the spatial map or if the position is
            already filled by some other item.
            </summary>
            <param name="item">Item to move.</param>
            <param name="target">Location to move item to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.Move(`0,System.Int32,System.Int32)">
            <summary>
            Moves the item specified to the position specified, updating its <see cref="P:SadRogue.Primitives.IPositionable.Position"/> field
            accordingly. Throws ArgumentException if the item does not exist in the spatial map or if the position is
            already filled by some other item.
            </summary>
            <param name="item">Item to move.</param>
            <param name="targetX">X-value of the location to move it to.</param>
            <param name="targetY">Y-value of the location to move it to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.TryMove(`0,SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.TryMove(`0,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.MoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Moves the item at the specified source location to the target location.  Throws ArgumentException if one or
            more items cannot be moved, eg. if no item exists at the current position or the new position is already
            filled by some other item.
            </summary>
            <param name="current">Location to move items from.</param>
            <param name="target">Location to move items to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.TryMoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.MoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified source location to the target location.  Throws ArgumentException if one or
            more items cannot be moved, eg. if no item exists at the current position or the new position is already
            filled by some other item.
            </summary>
            <param name="currentX">X-value of the location to move items from.</param>
            <param name="currentY">Y-value of the location to move items from.</param>
            <param name="targetX">X-value of the location to move items to.</param>
            <param name="targetY">Y-value of the location to move items to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.TryMoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.MoveValid(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Moves whatever is at position current, if anything, to the target position, if it is a valid move.
            If something was moved, it returns what was moved. If nothing was moved, eg. either there was nothing at
            <paramref name="current" /> or already something at <paramref name="target" />, returns nothing.
            </summary>
            <remarks>
            Since this implementation of ISpatialMap guarantees that only one item may be at any
            given location at a time, the returned values will either be none, or a single value.
            </remarks>
            <param name="current">The position of the item to move.</param>
            <param name="target">The position to move the item to.</param>
            <returns>
            The item moved as a 1-element list if something was moved, or nothing if no item
            was moved.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.MoveValid(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.Collections.Generic.List{`0})">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.MoveValid(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves whatever is at the "current" position specified, if anything, to the "target" position, if
            it is a valid move. If something was moved, it returns what was moved. If nothing was moved, eg.
            either there was nothing at the "current" position given, or already something at the "target" position
            given, it returns nothing.
            </summary>
            <remarks>
            Since this implementation of ISpatialMap guarantees that only one item may be at any
            given location at a time, the returned values will either be none, or a single value.
            </remarks>
            <param name="currentX">X-value of the location to move item from.</param>
            <param name="currentY">Y-value of the location to move item from.</param>
            <param name="targetX">X-value of the location to move item to.</param>
            <param name="targetY">Y-value of the location to move item to.</param>
            <returns>
            The item moved as a 1-element IEnumerable if something was moved, or nothing if no item
            was moved.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.MoveValid(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{`0})">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.Contains(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.Contains(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.GetItemsAt(SadRogue.Primitives.Point)">
            <summary>
            Gets the item at the given position as a 1-element enumerable if there is any item there,
            or nothing if there is nothing at that position.
            </summary>
            <remarks>
            Since this implementation guarantees that only one item can be at any given
            location at once, the return value is guaranteed to be at most one element. You may find it
            more convenient to use the <see cref="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.GetItem(SadRogue.Primitives.Point)" /> function when you know you are
            dealing with a SpatialMap/AdvancedSpatialMap instance.
            </remarks>
            <param name="position">The position to return the item for.</param>
            <returns>
            The item at the given position as a 1-element enumerable, if there is an item there, or
            nothing if there is no item there.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.GetItemsAt(System.Int32,System.Int32)">
            <summary>
            Gets the item at the given position as a 1-element enumerable if there is any item there,
            or nothing if there is nothing at that position.
            </summary>
            <remarks>
            Since this implementation guarantees that only one item can be at any given
            location at once, the return value is guaranteed to be at most one element. You may find it
            more convenient to use the <see cref="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.GetItem(System.Int32,System.Int32)" /> function when you know you are
            dealing with a SpatialMap/AdvancedSpatialMap instance.
            </remarks>
            <param name="x">The x-value of the position to return the item(s) for.</param>
            <param name="y">The y-value of the position to return the item(s) for.</param>
            <returns>
            The item at the given position as a 1-element enumerable, if there is an item there, or
            nothing if there is no item there.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.GetPositionOfOrNull(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.TryGetPositionOf(`0,SadRogue.Primitives.Point@)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.GetPositionOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.GetItem(SadRogue.Primitives.Point)">
            <summary>
            Gets the item at the given position.  Throws ArgumentException no item exists at the given location.
            </summary>
            <exception cref="T:System.ArgumentException">No item is present in the spatial map at the given position.</exception>
            <remarks>
            Intended to be a more convenient function as compared to <see cref="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.GetItemsAt(SadRogue.Primitives.Point)" />, since
            this spatial map implementation only allows a single item to at any given location at a time.
            </remarks>
            <param name="position">The position to return the item for.</param>
            <returns>
            The item at the given position.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.GetItem(System.Int32,System.Int32)">
            <summary>
            Gets the item at the given position.  Throws ArgumentException no item exists at the given location.
            </summary>
            <exception cref="T:System.ArgumentException">No item is present in the spatial map at the given position.</exception>
            <remarks>
            Intended to be a more convenient function as compared to <see cref="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.GetItemsAt(SadRogue.Primitives.Point)" />, since
            this spatial map implementation only allows a single item to at any given location at a time.
            </remarks>
            <param name="x">The x-value of the position to return the item for.</param>
            <param name="y">The y-value of the position to return the item for.</param>
            <returns>
            The item at the given position.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.GetItemOrDefault(SadRogue.Primitives.Point)">
            <summary>
            Gets the item at the given position, or default(T) if no item exists.
            </summary>
            <remarks>
            Intended to be a more convenient function as compared to <see cref="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.GetItemsAt(SadRogue.Primitives.Point)" />, since
            this spatial map implementation only allows a single item to at any given location at a time.
            </remarks>
            <param name="position">The position to return the item for.</param>
            <returns>
            The item at the given position, or default(T) if no item exists at that location.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.GetItemOrDefault(System.Int32,System.Int32)">
            <summary>
            Gets the item at the given position, or default(T) if no item exists.
            </summary>
            <remarks>
            Intended to be a more convenient function as compared to <see cref="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.GetItemsAt(System.Int32,System.Int32)" />, since
            this spatial map implementation only allows a single item to at any given location at a time.
            </remarks>
            <param name="x">The x-value of the position to return the item for.</param>
            <param name="y">The y-value of the position to return the item for.</param>
            <returns>
            The item at the given position, or default(T) if no item exists at that location.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.ToString(System.Func{`0,System.String})">
            <summary>
            Returns a string representation of the spatial map, allowing display of the spatial map's
            items in a specified way.
            </summary>
            <param name="itemStringifier">Function that turns an item into a string.</param>
            <returns>A string representation of the spatial map.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.ToString">
            <summary>
            Returns a string representation of the spatial map.
            </summary>
            <returns>A string representation of the spatial map.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.Remove(`0)">
            <summary>
            Removes the item specified. Throws ArgumentException if the item specified was
            not in the spatial map.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.TryRemove(`0)">
            <summary>
            Removes the item specified. If the item specified was not in the spatial map, does nothing and returns false.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was removed; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.Remove(SadRogue.Primitives.Point)">
            <summary>
            Removes whatever is at the given position, if anything, and returns the item removed as a
            1-element IEnumerable. Returns nothing if no item was at the position specified.
            </summary>
            <remarks>
            Since this implementation of ISpatialMap guarantees that only one item can be at any given
            location at a time, the returned value is guaranteed to be either nothing or a single element.
            </remarks>
            <param name="position">The position of the item to remove.</param>
            <returns>
            The item removed as a 1-element list, if something was removed; an empty list if no item
            was found at that position.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.TryRemove(SadRogue.Primitives.Point)">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.Remove(System.Int32,System.Int32)">
            <summary>
            Removes whatever is at the given position, if anything, and returns the item removed as a
            1-element IEnumerable. Returns nothing if no item was at the position specified.
            </summary>
            <remarks>
            Since this implementation guarantees that only one item can be at any given
            location at a time, the returned value is guaranteed to be either nothing or a single element.
            </remarks>
            <param name="x">X-value of the position to remove item from.</param>
            <param name="y">Y-value of the position to remove item from.</param>
            <returns>
            The item removed as a 1-element IEnumerable, if something was removed; nothing if no item
            was found at that position.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncAdvancedSpatialMap`1.TryRemove(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.AutoSyncSpatialMap`1">
             <summary>
             A version of <see cref="T:SadRogue.Primitives.SpatialMaps.SpatialMap`1"/> which takes items that implement <see cref="T:SadRogue.Primitives.IPositionable"/>,
             and uses that interface's properties/events to automatically ensure items are recorded at the proper positions
             in the spatial map when they move and that the position fields are updated if the spatial map's move functions
             are used.
             </summary>
             <remarks>
             This class automatically keeps the spatial map position of each object synced up with their
             <see cref="P:SadRogue.Primitives.IPositionable.Position"/> property; you may either use the Move functions of the spatial map,
             in which case the Position fields of the objects are updated as appropriate, or you may change the Position
             field, in which case the spatial map position is updated to match.
            
             If you want to manually control the positions of items in the spatial map, you should use
             <see cref="T:SadRogue.Primitives.SpatialMaps.SpatialMap`1"/> instead.
             </remarks>
             <typeparam name="T">The type of object that will be contained by this spatial map.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AutoSyncSpatialMap`1.#ctor(System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point},System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="pointComparer">
            Equality comparer to use for comparison and hashing of points, as object are added to/removed from/moved
            around the spatial map.  Be especially mindful of the efficiency of its GetHashCode function, as it will
            determine the efficiency of many SpatialMap functions.  Defaults to the default equality comparer for
            Point.
            </param>
            <param name="initialCapacity">
            The initial maximum number of elements the SpatialMap can hold before it has to
            internally resize data structures. Defaults to 32.
            </param>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.ReadOnlyLayeredSpatialMapItemsAtEnumerator`1">
             <summary>
             A custom enumerator used to iterate over all positions at a given location in a layered spatial map implementation efficiently.
            
             Generally, you should use <see cref="M:SadRogue.Primitives.SpatialMaps.IReadOnlyLayeredSpatialMap`1.GetItemsAt(SadRogue.Primitives.Point,System.UInt32)"/> (or one of its overloads)
             to get an instance of this, rather than creating one yourself.
             </summary>
             <remarks>
             This type is a struct, and as such is notably more efficient when used in a foreach loop than a function returning
             IEnumerable&lt;T&gt; by using "yield return".  This type does implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
             so you can pass it to functions which require one (for example, System.LINQ).  However, this will have reduced
             performance due to boxing of the iterator.
             </remarks>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.ReadOnlyLayeredSpatialMapItemsAtEnumerator`1.Current">
            <summary>
            The current value for enumeration.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ReadOnlyLayeredSpatialMapItemsAtEnumerator`1.#ctor(SadRogue.Primitives.SpatialMaps.IReadOnlyLayeredSpatialMap{`0},SadRogue.Primitives.Point,System.UInt32)">
            <summary>
            Creates an enumerator which iterates over all items at the given point in the spatial map given, which are on layers in
            the given layer mask.
            </summary>
            <param name="map">The spatial map to check for items in.</param>
            <param name="position">The position to retrieve items at.</param>
            <param name="layerMask">The layer mask specifying layers to check.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ReadOnlyLayeredSpatialMapItemsAtEnumerator`1.MoveNext">
            <summary>
            Advances the iterator to the next item.
            </summary>
            <returns>True if the a new item at the position given within the specified layers; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ReadOnlyLayeredSpatialMapItemsAtEnumerator`1.GetEnumerator">
            <summary>
            Returns this enumerator.
            </summary>
            <returns>This enumerator.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ReadOnlyLayeredSpatialMapItemsAtEnumerator`1.System#Collections#IEnumerator#Reset">
            <inheritdoc />
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.IReadOnlyLayeredSpatialMap`1">
            <summary>
            Interface implementing only the read-only functions for <see cref="T:SadRogue.Primitives.SpatialMaps.LayeredSpatialMap`1" />/
            <see cref="T:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1" />.
            </summary>
            <typeparam name="T">
            Type of element stored in the layered spatial map -- must implement <see cref="T:SadRogue.Primitives.IHasLayer" />.
            </typeparam>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.IReadOnlyLayeredSpatialMap`1.LayerMasker">
            <summary>
            Object used to get layer masks as they pertain to this spatial map.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.IReadOnlyLayeredSpatialMap`1.Layers">
            <summary>
            Gets read-only spatial maps representing each layer. To access a specific layer, instead
            use <see cref="M:SadRogue.Primitives.SpatialMaps.IReadOnlyLayeredSpatialMap`1.GetLayer(System.Int32)" />.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.IReadOnlyLayeredSpatialMap`1.NumberOfLayers">
            <summary>
            Gets the number of layers contained in the spatial map.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.IReadOnlyLayeredSpatialMap`1.StartingLayer">
            <summary>
            Starting index for layers contained in this spatial map.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlyLayeredSpatialMap`1.AsReadOnly">
            <summary>
            Returns a read-only reference to the spatial map. Convenient for "safely" exposing the
            spatial map as a property.
            </summary>
            <returns>The current spatial map, as a "read-only" reference.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlyLayeredSpatialMap`1.Contains(SadRogue.Primitives.Point,System.UInt32)">
            <summary>
            Returns whether or not there is an item in the spatial map at the given position that
            is on a layer included in the given layer mask. Defaults to searching on all layers.
            </summary>
            <param name="position">The position to check for.</param>
            <param name="layerMask">
            Layer mask that indicates which layers to check. Defaults to all layers.
            </param>
            <returns>
            True if there is some item at the given position on a layer included in the given layer
            mask, false if not.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlyLayeredSpatialMap`1.Contains(System.Int32,System.Int32,System.UInt32)">
            <summary>
            Returns whether or not there is an item in the data structure at the given position, that
            is on a layer included in the given layer mask.
            </summary>
            <param name="x">X-value of the position to check for.</param>
            <param name="y">Y-value of the position to check for.</param>
            <param name="layerMask">
            Layer mask that indicates which layers to check. Defaults to all layers.
            </param>
            <returns>
            True if there is some item at the given position on a layer included in the given layer
            mask, false if not.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlyLayeredSpatialMap`1.GetItemsAt(SadRogue.Primitives.Point,System.UInt32)">
            <summary>
            Gets the item(s) associated with the given position that reside on any layer included in
            the given layer mask. Returns nothing if there is nothing at that position on a layer
            included in the given layer mask.
            </summary>
            <param name="position">The position to return the item(s) for.</param>
            <param name="layerMask">
            Layer mask that indicates which layers to check. Defaults to all layers.
            </param>
            <returns>
            The item(s) at the given position that reside on a layer included in the layer mask if
            there are any items, or nothing if there is nothing at that position.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlyLayeredSpatialMap`1.GetItemsAt(System.Int32,System.Int32,System.UInt32)">
            <summary>
            Gets the item(s) associated with the given position that reside on any layer included in
            the given layer mask. Returns nothing if there is nothing at that position on a layer
            included in the given layer mask.
            </summary>
            <param name="x">X-value of the position to return the item(s) for.</param>
            <param name="y">Y-value of the position to return the item(s) for.</param>
            <param name="layerMask">
            Layer mask that indicates which layers to check. Defaults to all layers.
            </param>
            <returns>
            The item(s) at the given position that reside on a layer included in the layer mask if
            there are any items, or nothing if there is nothing at that position.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlyLayeredSpatialMap`1.GetLayer(System.Int32)">
            <summary>
            Gets a read-only spatial map representing the layer specified.
            </summary>
            <param name="layer">The layer to retrieve.</param>
            <returns>The IReadOnlySpatialMap that represents the given layer.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlyLayeredSpatialMap`1.GetLayersInMask(System.UInt32)">
            <summary>
            Returns read-only spatial maps that represent each layer included in the given layer
            mask. Defaults to all layers.
            </summary>
            <param name="layerMask">
            Layer mask indicating which layers to return. Defaults to all layers.
            </param>
            <returns>Read-only spatial maps representing each layer in the given layer mask.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlyLayeredSpatialMap`1.CanMoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.UInt32)">
            <summary>
            Returns true if there are items at <paramref name="current" /> on one or more of the layers specified by the layer
            mask,
            and all items on those layers at that position can be moved to <paramref name="target" />; false otherwise.
            </summary>
            <param name="current">Location to move items from.</param>
            <param name="target">Location to move items to.</param>
            <param name="layerMask">Layer mask indicating which layers to check items on.</param>
            <returns>
            true if all items at the position current can be moved to the position target; false if one or more items
            cannot be moved or there are no items to move.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlyLayeredSpatialMap`1.CanMoveAll(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Returns true if there are items at the current position on one or more of the layers specified by the layer mask,
            and all items on those layers at that position can be moved to the target position; false otherwise.
            </summary>
            <param name="currentX">X-value of the location to move items from.</param>
            <param name="currentY">Y-value of the location to move items from.</param>
            <param name="targetX">X-value of the location to move items to.</param>
            <param name="targetY">Y-value of the location to move items to.</param>
            <param name="layerMask">Layer mask indicating which layers to check items on.</param>
            <returns>
            true if all items at the position current can be moved to the position target; false if one or more items
            cannot be moved or there are no items to move.
            </returns>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1">
            <summary>
            Implements the read-only interface of <see cref="T:SadRogue.Primitives.SpatialMaps.ISpatialMap`1" />.
            </summary>
            <remarks>
            Simply exposes only those functions of <see cref="T:SadRogue.Primitives.SpatialMaps.ISpatialMap`1" /> that do not allow direct modification
            of the data (eg. adding/moving/removing items). This can allow for direct exposure of an ISpatialMap as a
            property of type IReadOnlySpatialMap, without allowing such an exposure to break data encapsulation principles
            of something like a game map.
            </remarks>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.Count">
            <summary>
            The number of items in the spatial map.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.Items">
            <summary>
            Enumerable of the items stored in the spatial map: for use to iterate over all items with a foreach loop.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.Positions">
            <summary>
            Enumerable of all positions that contain items.
            </summary>
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.ItemAdded">
            <summary>
            Event that is fired directly after an item has been added to the spatial map.
            </summary>
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.ItemMoved">
            <summary>
            Event that is fired directly after an item in the spatial map has been moved.
            </summary>
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.ItemRemoved">
            <summary>
            Event that is fired directly after an item has been removed from the spatial map.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.AsReadOnly">
            <summary>
            Returns a read-only reference to the spatial map. Convenient for "safely" exposing the
            spatial as a property, without allowing direct modification.
            </summary>
            <returns>The current spatial map, as a "read-only" reference.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.CanAdd(`0,SadRogue.Primitives.Point)">
            <summary>
            Returns true if the given item can be added at the given position; false otherwise.
            </summary>
            <param name="newItem">Item to add.</param>
            <param name="position">Position to add item to.</param>
            <returns>True if the item can be successfully added at the position given; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.CanAdd(`0,System.Int32,System.Int32)">
            <summary>
            Returns true if the given item can be added at the given position; false otherwise.
            </summary>
            <param name="newItem">Item to add.</param>
            <param name="x">X-value of the position to add item to.</param>
            <param name="y">Y-value of the position to add item to.</param>
            <returns>True if the item can be successfully added at the position given; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.CanMove(`0,SadRogue.Primitives.Point)">
            <summary>
            Returns true if the given item can be moved from its current location to the specified one; false otherwise.
            </summary>
            <param name="item">Item to move.</param>
            <param name="target">Location to move item to.</param>
            <returns>true if the given item can be moved to the given position; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.CanMove(`0,System.Int32,System.Int32)">
            <summary>
            Returns true if the given item can be moved from its current location to the specified one; false otherwise.
            </summary>
            <param name="item">Item to move.</param>
            <param name="targetX">X-value of the location to move item to.</param>
            <param name="targetY">Y-value of the location to move item to.</param>
            <returns>true if the given item can be moved to the given position; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.CanMoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Returns true if there are items at <paramref name="current" /> and all items at that position
            can be moved to <paramref name="target" />; false otherwise.
            </summary>
            <param name="current">Location to move items from.</param>
            <param name="target">Location to move items to.</param>
            <returns>
            true if all items at the position current can be moved to the position target; false if one or more items
            cannot be moved or there are no items to move.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.CanMoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns true if there are items at the current position specified, and all items at that position
            can be moved to the target position; false otherwise.
            </summary>
            <param name="currentX">X-value of the location to move items from.</param>
            <param name="currentY">Y-value of the location to move items from.</param>
            <param name="targetX">X-value of the location to move items to.</param>
            <param name="targetY">Y-value of the location to move items to.</param>
            <returns>
            true if all items at the position current can be moved to the position target; false if one or more items
            cannot be moved or there are no items to move.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.Contains(`0)">
            <summary>
            Returns whether or not the spatial map contains the given item.
            </summary>
            <param name="item">The item to check for.</param>
            <returns>True if the given item is contained in the spatial map, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.Contains(SadRogue.Primitives.Point)">
            <summary>
            Returns if there is an item in the spatial map at the given position or not.
            </summary>
            <param name="position">The position to check for.</param>
            <returns>True if there is some item at the given position, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.Contains(System.Int32,System.Int32)">
            <summary>
            Returns if there is an item in the spatial map at the given position or not.
            </summary>
            <param name="x">The x-value of the position to check for.</param>
            <param name="y">The y-value of the position to check for.</param>
            <returns>True if there is some item at the given position, false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.GetItemsAt(SadRogue.Primitives.Point)">
            <summary>
            Gets the item(s) at the given position if there are any items, or returns
            nothing if there is nothing at that position.
            </summary>
            <param name="position">The position to return the item(s) for.</param>
            <returns>
            The item(s) at the given position if there are any items, or nothing if there is nothing
            at that position.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.GetItemsAt(System.Int32,System.Int32)">
            <summary>
            Gets the item(s) at the given position if there are any items, or returns
            nothing if there is nothing at that position.
            </summary>
            <param name="x">The x-value of the position to return the item(s) for.</param>
            <param name="y">The y-value of the position to return the item(s) for.</param>
            <returns>
            The item(s) at the given position if there are any items, or nothing if there is nothing
            at that position.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.GetPositionOfOrNull(`0)">
            <summary>
            Gets the position associated with the given item in the spatial map, or null if that item is
            not found.
            </summary>
            <param name="item">The item to get the position for.</param>
            <returns>
            The position associated with the given item, if it exists in the spatial map, or null
            if the item does not exist.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.TryGetPositionOf(`0,SadRogue.Primitives.Point@)">
            <summary>
            Attempts to get the position of the given item in the spatial map.  If successful, the function will return
            true and the position will be stored in the <paramref name="position"/> parameter.  If the item was not found,
            <paramref name="position"/> will have the default value for Point, and the function will return false.
            </summary>
            <param name="item">Item to retrieve the position of.</param>
            <param name="position">The position of the item if found, or default(Point) if not.</param>
            <returns>True if the item was found in the spatial map, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.GetPositionOf(`0)">
            <summary>
            Gets the position associated with the given item in the spatial map.  If the item does not exist in the
            spatial map, throws ArgumentException.
            </summary>
            <param name="item">The item to get the position for.</param>
            <returns>
            The position associated with the given item.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.ToString(System.Func{`0,System.String})">
            <summary>
            Returns a string representation of the IReadOnlySpatialMap, allowing display of the spatial map's
            items in a specified way.
            </summary>
            <param name="itemStringifier">Function that turns an item into a string.</param>
            <returns>A string representation of the spatial map.</returns>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.ISpatialMap`1">
             <summary>
             Interface representing the common interface of a "spatial map", which is designed to be a convenient and efficient
             way to store items that reside on a grid and their locations.  If you're about to use a List to
             store all the objects on a grid, consider using one of the provided ISpatialMap implementation instead.
             </summary>
             <remarks>
             When representing objects considered to be located on a 2D grid, there are two main categories of use cases that
             seem to be encountered repeatedly.  The first is when you have a grid with well defined bounds, and intend to
             place or calculate one object or value for each location on the grid; the typical solution for this use case is
             to use an array to store the items (or an <see cref="T:SadRogue.Primitives.GridViews.ArrayView`1"/>, which may be more convenient).
            
             The other use case is when you have either an unbounded grid, or more commonly a series of objects where there is
             not likely to be exactly one object per position.  This makes the array solution much less viable, since it
             would waste a lot of memory.  Storing a list of all the objects is another possible option; but while this is fast
             for iterating over all objects on the grid, it makes retrieving the object (or all objects) at a specific position
             very inefficient.  The traditional answer to that is something like Dictionary&lt;Point, T&gt;, but this can be
             complex to implement depending on the situation.  There are multiple constraints you might want to enforce; some
             instances might want to ensure that a maximum of only one object is associated with a given location, whereas
             others might want to allow _multiple_ objects at a location.  The latter is particularly troublesome to implement
             efficiently in a way that minimizes allocations.
            
             A "spatial map", therefore, is a data structure designed to implement position-to-object mappings like the ones
             described above simply and efficiently.  It acts as an abstraction over all of the above types of constraints
             and more; and the library provides multiple implementations of the interface which are suited to various use
             cases.
            
             Spatial maps allow you to add items at arbitrary positions, move items around, and remove them, all typically
             in constant time, rather than time proportional to the number of items stored.  They also provide linear-time
             iteration through all items in the structure (just like Dictionary does), although also like Dictionary, this
             iteration will usually not be as fast as iterating through the items in a List, even though it shares the
             same asymptotic characteristics.  Additionally, events are provided for when items are added, moved, and removed,
             which can allow you to respond to these as needed.
            
             One common use case is using spatial maps to store objects that already have a Position field of some sort.  In
             these cases, you will typically want to update the object's position in the spatial map whenever the object moves,
             so the spatial map's recorded position and the object's recorded position stay in sync.
             </remarks>
             <typeparam name="T">The type of object that will be contained by the spatial map.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.Add(`0,SadRogue.Primitives.Point)">
            <summary>
            Tries to add the given item at the given position, and throws ArgumentException if the item cannot be added.
            </summary>
            <param name="item">Item to add.</param>
            <param name="position">Position to add item to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.Add(`0,System.Int32,System.Int32)">
            <summary>
            Tries to add the given item at the given position, and throws ArgumentException if the item cannot be added.
            </summary>
            <param name="item">Item to add.</param>
            <param name="x">X-value of the position to add item to.</param>
            <param name="y">Y-value of the position to add item to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.TryAdd(`0,SadRogue.Primitives.Point)">
            <summary>
            Tries to add the given item at the given position.  Does nothing and returns false if the item cannot be added.
            </summary>
            <param name="item">Item to add.</param>
            <param name="position">Position to add item to.</param>
            <returns>True if the item was successfully added; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.TryAdd(`0,System.Int32,System.Int32)">
            <summary>
            Tries to add the given item at the given position.  Does nothing and returns false if the item cannot be added.
            </summary>
            <param name="item">Item to add.</param>
            <param name="x">X-value of the position to add item to.</param>
            <param name="y">Y-value of the position to add item to.</param>
            <returns>True if the item was successfully added; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.Clear">
            <summary>
            Clears all items out of the spatial map.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.Move(`0,SadRogue.Primitives.Point)">
            <summary>
            Moves the given item from its current location to the specified one. Throws ArgumentException if the item
            cannot be moved.
            </summary>
            <param name="item">Item to move.</param>
            <param name="target">Location to move item to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.Move(`0,System.Int32,System.Int32)">
            <summary>
            Moves the given item from its current location to the specified one. Throws ArgumentException if the item
            cannot be moved.
            </summary>
            <param name="item">Item to move</param>
            <param name="targetX">X-value of the location to move item to.</param>
            <param name="targetY">Y-value of the location to move item to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.TryMove(`0,SadRogue.Primitives.Point)">
            <summary>
            Attempts to move the given item from its current location to the specified one. Does nothing and returns
            false if the item cannot be moved to the given location.
            </summary>
            <param name="item">Item to move.</param>
            <param name="target">Location to move item to.</param>
            <returns>True if the item was moved; false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.TryMove(`0,System.Int32,System.Int32)">
            <summary>
            Attempts to move the given item from its current location to the specified one. Does nothing and returns
            false if the item cannot be moved to the given location.
            </summary>
            <param name="item">Item to move.</param>
            <param name="targetX">X-value of the location to move item to.</param>
            <param name="targetY">Y-value of the location to move item to.</param>
            <returns>True if the item was moved; false if not.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.MoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Moves all items at the specified source location to the target location.  Throws ArgumentException if one or
            more items cannot be moved or there are no items to be moved.
            </summary>
            <param name="current">Location to move items from.</param>
            <param name="target">Location to move items to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.TryMoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Moves all items at the specified source location to the target location.  Returns false if one or
            more items cannot be moved or there are no items to be moved.
            </summary>
            <param name="current">Location to move items from.</param>
            <param name="target">Location to move items to.</param>
            <returns>True if all items at <paramref name="current"/> were moved to <paramref name="target"/>; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.MoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves all items at the specified source location to the target location.  Throws ArgumentException if one or
            more items cannot be moved or there are no items to be moved.
            </summary>
            <param name="currentX">X-value of the location to move items from.</param>
            <param name="currentY">Y-value of the location to move items from.</param>
            <param name="targetX">X-value of the location to move items to.</param>
            <param name="targetY">Y-value of the location to move items to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.TryMoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves all items at the specified source location to the target location.  Returns false if one or
            more items cannot be moved or there are no items to be moved.
            </summary>
            <param name="currentX">X-value of the location to move items from.</param>
            <param name="currentY">Y-value of the location to move items from.</param>
            <param name="targetX">X-value of the location to move items to.</param>
            <param name="targetY">Y-value of the location to move items to.</param>
            <returns>True if all items at (currentX, currentY) were moved to (targetX, targetY); false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.MoveValid(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Moves all items at the specified source location that can be moved to the target location. Returns all items that were
            moved.
            </summary>
            <param name="current">Location to move items from.</param>
            <param name="target">Location to move items to.</param>
            <returns>All items that were moved, or an empty list if no items were moved.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.MoveValid(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.Collections.Generic.List{`0})">
            <summary>
            Moves all items at the specified source location that can be moved to the target location. Adds all items that were
            moved to the given list.
            </summary>
            <param name="current">Location to move items from.</param>
            <param name="target">Location to move items to.</param>
            <param name="itemsMovedOutput">A list to which all items successfully moved are added.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.MoveValid(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves all items at the specified location that can be moved to the target one. Returns all items that were moved.
            </summary>
            <param name="currentX">X-value of the location to move items from.</param>
            <param name="currentY">Y-value of the location to move items from.</param>
            <param name="targetX">X-value of the location to move items to.</param>
            <param name="targetY">Y-value of the location to move items to.</param>
            <returns>All items that were moved, or nothing if no items were moved.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.MoveValid(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{`0})">
            <summary>
            Moves all items at the specified source location that can be moved to the target location. Adds all items that were
            moved to the given list.
            </summary>
            <param name="currentX">X-value of the location to move items from.</param>
            <param name="currentY">Y-value of the location to move items from.</param>
            <param name="targetX">X-value of the location to move items to.</param>
            <param name="targetY">Y-value of the location to move items to.</param>
            <param name="itemsMovedOutput">A list to which all items successfully moved are added.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.Remove(`0)">
            <summary>
            Removes the given item from the spatial map.  Throws ArgumentException if the item cannot be removed.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.TryRemove(`0)">
            <summary>
            Attempts to remove the given item from the spatial map.  Does nothing and return false if the item cannot be
            removed.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was successfully removed; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.Remove(SadRogue.Primitives.Point)">
            <summary>
            Removes all items at the specified location from the spatial map. Returns all items
            that were removed.
            </summary>
            <param name="position">Position to remove items from.</param>
            <returns>All items that were removed, or an empty list if no items were removed.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.TryRemove(SadRogue.Primitives.Point)">
            <summary>
            Attempts to remove all items at the specified location from the spatial map. Returns true if the items
            were successfully removed; false if one or more failed.
            </summary>
            <param name="position">Position to remove items from.</param>
            <returns>True if the items were successfully removed; false otherwise</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.Remove(System.Int32,System.Int32)">
            <summary>
            Removes all items at the specified location from the spatial map. Returns all items
            that were removed.
            </summary>
            <param name="x">X-value of the position to remove items from.</param>
            <param name="y">Y-value of the position to remove items from.</param>
            <returns>All items that were removed, or nothing if no items were removed.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ISpatialMap`1.TryRemove(System.Int32,System.Int32)">
            <summary>
            Attempts to remove all items at the specified location from the spatial map. Returns true if the items
            were successfully removed; false if one or more failed.
            </summary>
            <param name="x">X-value of the position to remove items from.</param>
            <param name="y">Y-value of the position to remove items from.</param>
            <returns>True if the items were successfully removed; false otherwise</returns>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.ItemEventArgs`1">
            <summary>
            Event arguments for spatial map events pertaining to an item (<see cref="E:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.ItemAdded" />,
            <see cref="E:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.ItemRemoved" />, etc.)
            </summary>
            <typeparam name="T">Type of item.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ItemEventArgs`1.#ctor(`0,SadRogue.Primitives.Point)">
            <summary>
            Constructor.
            </summary>
            <param name="item">Item being represented.</param>
            <param name="position">Current position of the item.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ItemEventArgs`1.#ctor(`0,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="item">Item being represented.</param>
            <param name="x">X-value of the current position of the item.</param>
            <param name="y">Y-value of the current position of the item.</param>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.ItemEventArgs`1.Item">
            <summary>
            Item being represented.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.ItemEventArgs`1.Position">
            <summary>
            Current position of that item at time of event.
            </summary>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.ItemMovedEventArgs`1">
            <summary>
            Event arguments for spatial maps <see cref="E:SadRogue.Primitives.SpatialMaps.IReadOnlySpatialMap`1.ItemMoved" /> event.
            </summary>
            <typeparam name="T">Type of item being stored.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ItemMovedEventArgs`1.#ctor(`0,SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Constructor.
            </summary>
            <param name="item">Item being represented.</param>
            <param name="oldPosition">Position of item before it was moved.</param>
            <param name="newPosition">Position of item after it has been moved.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ItemMovedEventArgs`1.#ctor(`0,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="item">Item being represented.</param>
            <param name="oldPositionX">X-value of the position of item before it was moved.</param>
            <param name="oldPositionY">Y-value of the position of item before it was moved.</param>
            <param name="newPositionX">X-value of the position of item after it has been moved.</param>
            <param name="newPositionY">Y-value of the position of item after it has been moved.</param>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.ItemMovedEventArgs`1.Item">
            <summary>
            Item being represented.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.ItemMovedEventArgs`1.NewPosition">
            <summary>
            Position of item after it has been moved.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.ItemMovedEventArgs`1.OldPosition">
            <summary>
            Position of item before it was moved.
            </summary>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.IDComparer`1">
            <summary>
            Class intended for comparing/hashing objects that implement <see cref="T:SadRogue.Primitives.IHasID" />. Type T must be a
            reference type.
            </summary>
            <typeparam name="T">
            Type of object being compared. Type T must be a reference type that implements <see cref="T:SadRogue.Primitives.IHasID" />.
            </typeparam>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IDComparer`1.Equals(`0,`0)">
            <summary>
            Equality comparison. Performs comparison via the object's <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" />
            function.
            </summary>
            <param name="x">First object to compare.</param>
            <param name="y">Second object to compare.</param>
            <returns>True if the objects are considered equal, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.IDComparer`1.GetHashCode(`0)">
            <summary>
            Generates a hash based on the object's ID.GetHashCode() function.
            </summary>
            <param name="obj">Object to generate the hash for.</param>
            <returns>The hash of the object, based on its ID.</returns>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.ItemPositionPair`1">
            <summary>
            Item-location pair denoting an entry in a spatial map.
            </summary>
            <typeparam name="TItem">The type of item stored in the pairing.</typeparam>
        </member>
        <member name="F:SadRogue.Primitives.SpatialMaps.ItemPositionPair`1.Item">
            <summary>
            The item.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SpatialMaps.ItemPositionPair`1.Position">
            <summary>
            The position the item is located at.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ItemPositionPair`1.#ctor(`0,SadRogue.Primitives.Point)">
            <summary>
            Constructor.
            </summary>
            <param name="item"/>
            <param name="position"/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ItemPositionPair`1.ToString">
            <summary>
            Returns a string representing the item and the position it's located at.
            </summary>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ItemPositionPair`1.Deconstruct(`0@,SadRogue.Primitives.Point@)">
            <summary>
            Supports C# Deconstruction syntax.
            </summary>
            <param name="item"/>
            <param name="position"/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ItemPositionPair`1.op_Implicit(SadRogue.Primitives.SpatialMaps.ItemPositionPair{`0})~System.ValueTuple{`0,SadRogue.Primitives.Point}">
            <summary>
            Implicitly converts an ItemPositionPair to an equivalent tuple.
            </summary>
            <param name="pair"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ItemPositionPair`1.op_Implicit(System.ValueTuple{`0,SadRogue.Primitives.Point})~SadRogue.Primitives.SpatialMaps.ItemPositionPair{`0}">
            <summary>
            Implicitly converts a tuple to its equivalent ItemPositionPair.
            </summary>
            <param name="tuple"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ItemPositionPair`1.ToTuple">
            <summary>
            Converts the pair to an equivalent tuple.
            </summary>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ItemPositionPair`1.FromTuple(System.ValueTuple{`0,SadRogue.Primitives.Point})">
            <summary>
            Converts the tuple to an equivalent ItemPositionPair.
            </summary>
            <param name="tuple"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ItemPositionPair`1.Equals(SadRogue.Primitives.SpatialMaps.ItemPositionPair{`0})">
            <summary>
            True if the given pair has equivalent items and positions; false otherwise.
            </summary>
            <param name="other"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ItemPositionPair`1.Matches(SadRogue.Primitives.SpatialMaps.ItemPositionPair{`0})">
            <summary>
            True if the given pair has equivalent items and positions; false otherwise.
            </summary>
            <param name="other"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ItemPositionPair`1.Equals(System.Object)">
            <summary>
            True if the given object is an ItemPositionPair that has an equivalent item and position; false otherwise.
            </summary>
            <param name="obj"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ItemPositionPair`1.GetHashCode">
            <summary>
            Returns a hash code based on all of the pair's fields.
            </summary>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ItemPositionPair`1.op_Equality(SadRogue.Primitives.SpatialMaps.ItemPositionPair{`0},SadRogue.Primitives.SpatialMaps.ItemPositionPair{`0})">
            <summary>
            True if the given pairs have the same item and position; false otherwise.
            </summary>
            <param name="left"/>
            <param name="right"/>
            <returns/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.ItemPositionPair`1.op_Inequality(SadRogue.Primitives.SpatialMaps.ItemPositionPair{`0},SadRogue.Primitives.SpatialMaps.ItemPositionPair{`0})">
            <summary>
            True if the given pairs have different items and/or positions; false otherwise.
            </summary>
            <param name="left"/>
            <param name="right"/>
            <returns/>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1">
            <summary>
            A more complex version of <see cref="T:SadRogue.Primitives.SpatialMaps.LayeredSpatialMap`1" /> that does not require the items in it to implement
            <see cref="T:SadRogue.Primitives.IHasID" />, instead requiring the specification of a custom <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use
            for hashing and comparison of items.
            </summary>
            <remarks>
            This class is useful for cases where you do not want to implement <see cref="T:SadRogue.Primitives.IHasID" />. For simple cases, it is
            recommended to use <see cref="T:SadRogue.Primitives.SpatialMaps.LayeredSpatialMap`1" /> instead.
            Be mindful of the efficiency of your hashing function specified in the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> --
            it will in large part determine the performance of AdvancedLayeredSpatialMap!
            </remarks>
            <typeparam name="T">
            Type of items in the layers. Type T must implement <see cref="T:SadRogue.Primitives.IHasLayer" />, and its <see cref="P:SadRogue.Primitives.IHasLayer.Layer" />
            value
            MUST NOT change while the item is in the AdvancedLayeredSpatialMap.
            </typeparam>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32,System.Func{System.Int32,SadRogue.Primitives.Pooling.IListPool{`0}},System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point},System.Int32,System.UInt32)">
            <summary>
            Constructor.
            </summary>
            <param name="itemComparer">
            Equality comparer to use for comparison and hashing of type T. Be especially mindful of the
            efficiency of its GetHashCode function, as it will determine the efficiency of
            many AdvancedLayeredSpatialMap functions.
            </param>
            <param name="numberOfLayers">Number of layers to include.</param>
            <param name="customListPoolCreator">
            A function used to determine the list pool implementation used for the spatial maps which support multiple
            items in a location (if any).  The function takes the layer it is creating the pool for as a parameter.
            If no custom creator is specified, a ListPool is used.
            </param>
            <param name="pointComparer">
            Equality comparer to use for comparison and hashing of points, as object are added to/removed from/moved
            around the spatial map.  Be especially mindful of the efficiency of its GetHashCode function, as it will
            determine the efficiency of many AdvancedLayeredSpatialMap functions.  Defaults to the default equality
            comparer for Point, which uses a fairly efficient generalized hashing algorithm.
            </param>
            <param name="startingLayer">Index to use for the first layer.</param>
            <param name="layersSupportingMultipleItems">
            A layer mask indicating which layers should support multiple items residing at the same
            location on that layer. Defaults to no layers.
            </param>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.LayerMasker">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.Layers">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.NumberOfLayers">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.StartingLayer">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.AsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.Contains(SadRogue.Primitives.Point,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.Contains(System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.GetItemsAt(SadRogue.Primitives.Point,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.GetItemsAt(System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.GetLayer(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.GetLayersInMask(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.CanMoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.CanMoveAll(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.ItemAdded">
            <inheritdoc />
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.ItemMoved">
            <inheritdoc />
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.ItemRemoved">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.Count">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.Items">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.Positions">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.Add(`0,SadRogue.Primitives.Point)">
            <summary>
            Adds the given item at the given position on the correct layer.  ArgumentException is thrown if the layer is
            invalid or the item otherwise cannot be added to its layer.
            </summary>
            <param name="item">Item to add.</param>
            <param name="position">Position to add item at.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.Add(`0,System.Int32,System.Int32)">
            <summary>
            Adds the given item at the given position on the correct layer.  ArgumentException is thrown if the layer is
            invalid or
            the item otherwise cannot be added to its layer.
            </summary>
            <param name="item">Item to add.</param>
            <param name="x">X-value of position to add item at.</param>
            <param name="y">Y-value of position to add item at.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.TryAdd(`0,SadRogue.Primitives.Point)">
            <summary>
            Adds the given item at the given position on the correct layer.  If the layer is
            invalid or the item otherwise cannot be added to its layer, does nothing and returns false.
            </summary>
            <param name="item">Item to add.</param>
            <param name="position">Position to add item at.</param>
            <returns>True if the item was added, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.TryAdd(`0,System.Int32,System.Int32)">
            <summary>
            Adds the given item at the given position on the correct layer.  If the layer is
            invalid or the item otherwise cannot be added to its layer, does nothing and returns false.
            </summary>
            <param name="item">Item to add.</param>
            <param name="x">X-value of position to add item at.</param>
            <param name="y">Y-value of position to add item at.</param>
            <returns>True if the item was added, false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#IReadOnlySpatialMap{T}#AsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#IReadOnlySpatialMap{T}#Contains(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#IReadOnlySpatialMap{T}#Contains(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.GetEnumerator">
            <summary>
            Used by foreach loop, so that the class will give ISpatialTuple objects when used in a
            foreach loop. Generally should never be called explicitly.
            </summary>
            <returns>An enumerator for the spatial map</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Generic iterator used internally by foreach loops.
            </summary>
            <returns>Enumerator to ISpatialTuple instances.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#IReadOnlySpatialMap{T}#GetItemsAt(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#IReadOnlySpatialMap{T}#GetItemsAt(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.GetPositionOfOrNull(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.TryGetPositionOf(`0,SadRogue.Primitives.Point@)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.GetPositionOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.Move(`0,SadRogue.Primitives.Point)">
            <summary>
            Moves the given item to the given position.  Throws ArgumentException if either the item given
            isn't in the spatial map, or if the layer that the item resides on is configured to allow only one item per
            location at any given time and there is already an item at <paramref name="target" />.
            </summary>
            <param name="item">Item to move.</param>
            <param name="target">Position to move the given item to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.Move(`0,System.Int32,System.Int32)">
            <summary>
            Moves the given item to the given position.  Throws ArgumentException if either the item given
            isn't in the spatial map, or if the layer that the item resides on is configured to allow only one item per
            location at any given time and there is already an item at the target position.
            </summary>
            <param name="item">Item to move.</param>
            <param name="targetX">X-value of position to move the given item to.</param>
            <param name="targetY">Y-value of position to move the given item to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.TryMove(`0,SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.TryMove(`0,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#ISpatialMap{T}#MoveValid(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#ISpatialMap{T}#MoveValid(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.Collections.Generic.List{`0})">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#ISpatialMap{T}#MoveValid(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#ISpatialMap{T}#MoveValid(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{`0})">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.TryRemove(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#ISpatialMap{T}#Remove(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#ISpatialMap{T}#TryRemove(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#ISpatialMap{T}#Remove(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#ISpatialMap{T}#TryRemove(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.ToString(System.Func{`0,System.String})">
            <summary>
            Returns a string representation of each item in the spatial map, with elements
            displayed in the specified way.
            </summary>
            <param name="elementStringifier">
            A function that takes an element of type T and produces the string that should
            represent it in the output.
            </param>
            <returns>A string representing each layer in the spatial map, with each element displayed in the specified way.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.CanAdd(`0,SadRogue.Primitives.Point)">
            <summary>
            Returns true if the given item can be added at the given position, eg. it is on a layer in the spatial map and its
            layer will accept it; false otherwise.
            </summary>
            <param name="newItem">Item to add.</param>
            <param name="position">Position to add item to.</param>
            <returns>True if the item can be successfully added at the position given; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.CanAdd(`0,System.Int32,System.Int32)">
            <summary>
            Returns true if the given item can be added at the given position, eg. it is on a layer in the spatial map and its
            layer will accept it; false otherwise.
            </summary>
            <param name="newItem">Item to add.</param>
            <param name="x">X-value of the position to add item to.</param>
            <param name="y">Y-value of the position to add item to.</param>
            <returns>True if the item can be successfully added at the position given; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.CanMove(`0,SadRogue.Primitives.Point)">
            <summary>
            Returns true if the given item can be moved from its current location to the specified one, eg. it is in the spatial
            map and its layer will
            accept it at the new position; false otherwise.
            </summary>
            <param name="item">Item to move.</param>
            <param name="target">Location to move item to.</param>
            <returns>true if the given item can be moved to the given position; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.CanMove(`0,System.Int32,System.Int32)">
            <summary>
            Returns true if the given item can be moved from its current location to the specified one, eg. it is in the spatial
            map and its layer will
            accept it at the new position; false otherwise.
            </summary>
            <param name="item">Item to move.</param>
            <param name="targetX">X-value of the location to move item to.</param>
            <param name="targetY">Y-value of the location to move item to.</param>
            <returns>true if the given item can be moved to the given position; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#IReadOnlySpatialMap{T}#CanMoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#IReadOnlySpatialMap{T}#CanMoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#ISpatialMap{T}#MoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#ISpatialMap{T}#TryMoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#ISpatialMap{T}#TryMoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.SadRogue#Primitives#SpatialMaps#ISpatialMap{T}#MoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.MoveValid(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.UInt32)">
            <summary>
            Moves all items that can be moved, that are at the given position and on any layer specified by the given layer
            mask, to the new position. If no layer mask is specified, defaults to all layers.
            </summary>
            <param name="current">Position to move all items from.</param>
            <param name="target">Position to move all items to.</param>
            <param name="layerMask">
            Layer mask specifying which layers to search for items on. Defaults to all layers.
            </param>
            <returns>All items moved.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.MoveValid(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Moves all items that can be moved, that are at the given position and on any layer specified by the given layer
            mask, to the new position. If no layer mask is specified, defaults to all layers.
            </summary>
            <param name="currentX">X-value of the position to move items from.</param>
            <param name="currentY">Y-value of the position to move items from.</param>
            <param name="targetX">X-value of the position to move items to.</param>
            <param name="targetY">Y-value of the position to move items from.</param>
            <param name="layerMask">
            Layer mask specifying which layers to search for items on. Defaults to all layers.
            </param>
            <returns>All items moved.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.MoveValid(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.Collections.Generic.List{`0},System.UInt32)">
            <summary>
            Moves all items that can be moved, that are at the given position and on any layer specified by the given layer
            mask, to the new position. If no layer mask is specified, defaults to all layers.
            </summary>
            <param name="current">Position to move items from.</param>
            <param name="target">Position to move items to.</param>
            <param name="itemsMovedOutput">List in which to place all moved items.</param>
            <param name="layerMask">
            Layer mask specifying which layers to search for items on. Defaults to all layers.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.MoveValid(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{`0},System.UInt32)">
            <summary>
            Moves all items that can be moved, that are at the given position and on any layer specified by the given layer
            mask, to the new position. If no layer mask is specified, defaults to all layers.
            </summary>
            <param name="currentX">X-value of the position to move items from.</param>
            <param name="currentY">Y-value of the position to move items from.</param>
            <param name="targetX">X-value of the position to move items to.</param>
            <param name="targetY">Y-value of the position to move items from.</param>
            <param name="itemsMovedOutput">List in which to place all moved items.</param>
            <param name="layerMask">
            Layer mask specifying which layers to search for items on. Defaults to all layers.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.Remove(SadRogue.Primitives.Point,System.UInt32)">
            <summary>
            Removes all items at the specified location that are on any layer included in the given
            layer mask from the spatial map. Returns any items that were removed. Defaults to searching
            for items on all layers.
            </summary>
            <param name="position">Position to remove items from.</param>
            <param name="layerMask">
            The layer mask indicating which layers to search for items. Defaults to all layers.
            </param>
            <returns>Any items that were removed, or nothing if no items were removed.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.TryRemove(SadRogue.Primitives.Point,System.UInt32)">
            <summary>
            Attempts to remove all items at the specified location that are on any layer included in the given
            layer mask from the spatial map. Returns true if the items were successfully removed; false if one or more
            failed.
            </summary>
            <param name="position">Position to remove items from.</param>
            <param name="layerMask">
            The layer mask indicating which layers to search for items. Defaults to all layers.
            </param>
            <returns>True if the items were successfully removed; false otherwise</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.Remove(System.Int32,System.Int32,System.UInt32)">
            <summary>
            Removes all items at the specified location that are on any layer included in the given
            layer mask from the spatial map. Returns any items that were removed. Defaults to searching
            for items on all layers.
            </summary>
            <param name="x">X-value of the position to remove items from.</param>
            <param name="y">Y-value of the position to remove items from.</param>
            <param name="layerMask">
            The layer mask indicating which layers to search for items. Defaults to all layers.
            </param>
            <returns>Any items that were removed, or nothing if no items were removed.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.TryRemove(System.Int32,System.Int32,System.UInt32)">
            <summary>
            Attempts to remove all items at the specified location that are on any layer included in the given
            layer mask from the spatial map. Returns true if the items were successfully removed; false if one or more
            failed.
            </summary>
            <param name="x">X-value of the position to remove items from.</param>
            <param name="y">Y-value of the position to remove items from.</param>
            <param name="layerMask">
            The layer mask indicating which layers to search for items. Defaults to all layers.
            </param>
            <returns>True if the items were successfully removed; false otherwise</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.ToString">
            <summary>
            Returns a string representation of each layer in the spatial map.
            </summary>
            <returns>A string representing each layer of the LayeredSpatialMap</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.MoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.UInt32)">
            <summary>
            Moves all items that are on layers in <paramref name="layerMask" /> at the specified source location to the target
            location.  Throws ArgumentException if one or more items cannot be moved or there are
            no items to be moved.
            </summary>
            <param name="current">Location to move items from.</param>
            <param name="target">Location to move items to.</param>
            <param name="layerMask">The layer mask to use to find items.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.MoveAll(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Moves all items that are on layers in <paramref name="layerMask" /> at the specified source location to the target
            location.  Throws ArgumentException if one or more items cannot be moved or there are
            no items to be moved.
            </summary>
            <param name="currentX">X-value of the location to move items from.</param>
            <param name="currentY">Y-value of the location to move items from.</param>
            <param name="targetX">X-value of the location to move items to.</param>
            <param name="targetY">Y-value of the location to move items to.</param>
            <param name="layerMask">The layer mask to use to find items.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.TryMoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.UInt32)">
            <summary>
            Moves all items that are on layers in <paramref name="layerMask" /> at the specified source location to the
            target location.  Returns false if one or more items cannot be moved or there are no items to be moved.
            </summary>
            <param name="current">Location to move items from.</param>
            <param name="target">Location to move items to.</param>
            <param name="layerMask">The layer mask to use to find items.</param>
            <returns>
            True if all items at <paramref name="current"/> on layers within the mask given were moved to
            <paramref name="target"/>; false otherwise.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedLayeredSpatialMap`1.TryMoveAll(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Moves all items that are on layers in <paramref name="layerMask" /> at the specified source location to the
            target location.  Returns false if one or more items cannot be moved or there are no items to be moved.
            </summary>
            <param name="currentX">X-value of the location to move items from.</param>
            <param name="currentY">Y-value of the location to move items from.</param>
            <param name="targetX">X-value of the location to move items to.</param>
            <param name="targetY">Y-value of the location to move items to.</param>
            <param name="layerMask">The layer mask to use to find items.</param>
            <returns>
            True if all items at the current position on layers within the mask given were moved to
            the target position; false otherwise.
            </returns>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.LayeredSpatialMap`1">
            <summary>
            <see cref="T:SadRogue.Primitives.SpatialMaps.ISpatialMap`1" /> implementation that can be used to efficiently represent multiple
            "layers" of objects, with each layer represented as an <see cref="T:SadRogue.Primitives.SpatialMaps.ISpatialMap`1" /> instance.
            It provides the regular spatial map functionality, as well as adds layer masking functionality
            that allow functions to operate on specific layers only.
            </summary>
            <remarks>
            See the <see cref="T:SadRogue.Primitives.SpatialMaps.ISpatialMap`1" /> for documentation on the practical purpose of spatial
            maps.
            The objects stored in a LayeredSpatialMap must be reference types and implement both <see cref="T:SadRogue.Primitives.IHasID" />
            and <see cref="T:SadRogue.Primitives.IHasLayer" />.  Each object in a spatial map is presumed to have a "layer", which is assumed
            to remain constant once the item is added to the layer mask.
            </remarks>
            <typeparam name="T">
            Type of items stored in the layers. Type T must implement <see cref="T:SadRogue.Primitives.IHasID" /> and <see cref="T:SadRogue.Primitives.IHasLayer" />,
            must be a reference type, and its <see cref="P:SadRogue.Primitives.IHasLayer.Layer" /> value MUST NOT change while the item is in the
            spatial map.
            </typeparam>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.LayeredSpatialMap`1.#ctor(System.Int32,System.Func{System.Int32,SadRogue.Primitives.Pooling.IListPool{`0}},System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point},System.Int32,System.UInt32)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            This class allows you to specify the starting index for layers in order to make it easy to
            combine with other structures in a map which may represent other layers. For example, if a
            <paramref name="startingLayer" /> of 0 is specified, layers in the spatial map will have numbers
            in range[0, numberOfLayers - 1]. If 1 is specified, layers will have numbers in range [1-numberOfLayers],
            and anything to do with layer 0 will be ignored. For example, If a layer-mask that includes layers 0,
            2, and 3 is passed to a function, only layers 2 and 3 are considered (since they are the only ones that would
            be included in the spatial map.
            </remarks>
            <param name="numberOfLayers">Number of layers to include.</param>
            <param name="customListPoolCreator">
            A function used to determine the list pool implementation used for the spatial maps which support multiple
            items in a location (if any).  The function takes the layer it is creating the pool for as a parameter.
            If no custom creator is specified, a ListPool is used.
            </param>
            <param name="pointComparer">
            Equality comparer to use for comparison and hashing of points, as object are added to/removed from/moved
            around the spatial map.  Be especially mindful of the efficiency of its GetHashCode function, as it will
            determine the efficiency of many LayeredSpatialMap functions.  Defaults to the default equality
            comparer for Point, which uses a fairly efficient generalized hashing algorithm.
            </param>
            <param name="startingLayer">Index to use for the first layer.</param>
            <param name="layersSupportingMultipleItems">
            A layer mask indicating which layers should support multiple items residing at the same
            location on that layer. Defaults to no layers.  Generate this layer mask via <see cref="F:SadRogue.Primitives.SpatialMaps.LayerMasker.Default" />.
            </param>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.LayerMaskEnumerator">
             <summary>
             A type designed to be returned from <see cref="M:SadRogue.Primitives.SpatialMaps.LayerMasker.Layers(System.UInt32)"/> in order to enumerate over a set of layers
             in a layer mask efficiently.
             </summary>
             <remarks>
             This type is a struct, and as such is much more efficient than using the otherwise equivalent type of
             IEnumerable&lt;int&gt; with "yield return".  The type does also implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>, so it
             can be used with functions that require one (like System.LINQ); however using this function is not recommended
             in situations where runtime performance is a primary concern.
            
             This iterator will enumerate the layers in reverse order; ie. highest active number to lowest active number.
             </remarks>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.LayerMaskEnumerator.Current">
            <summary>
            The current value for enumeration.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.LayerMaskEnumerator.#ctor(System.UInt32,System.Int32)">
            <summary>
            Constructs a new enumerator.
            </summary>
            <param name="mask">Layer mask to enumerate.</param>
            <param name="numLayers">Number of layers to be considered within the mask.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.LayerMaskEnumerator.MoveNext">
            <summary>
            Advances the iterator to the next active layer.
            </summary>
            <returns>True if an active layer was found; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.LayerMaskEnumerator.GetEnumerator">
            <summary>
            Returns this enumerator.
            </summary>
            <returns>This enumerator.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.LayerMaskEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
            This iterator does not support resetting.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.LayerMasker">
            <summary>
            Allows convenient interpretation and creation of layer masks (bit-masks which indicate one or more layers) that
            can be used to interact with <see cref="T:SadRogue.Primitives.SpatialMaps.LayeredSpatialMap`1" />.
            </summary>
            <remarks>
            A layer mask is simply a list of layers encoded as a bit mask.  It is frequently used in
            <see cref="T:SadRogue.Primitives.SpatialMaps.LayeredSpatialMap`1" /> as an optional parameter that indicates what layers should apply
            to an operation or given set of functionality.  LayeredSpatialMap defines its own LayerMask variable that should
            be used to retrieve layer masks for use with that object whenever possible.  For layer masks needed outside of
            that, use <see cref="F:SadRogue.Primitives.SpatialMaps.LayerMasker.Default" />; but this won't enforce the maximum number of layers automatically.  There are
            also constants defined in LayerMasker to represent "all layers" and "no layers".
            </remarks>
        </member>
        <member name="F:SadRogue.Primitives.SpatialMaps.LayerMasker.Default">
            <summary>
            Default layer masker, that excludes no possible layers from its results.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SpatialMaps.LayerMasker.AllLayers">
            <summary>
            Layer-mask representing all layers.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.SpatialMaps.LayerMasker.NoLayers">
            <summary>
            Layer mask representing no layers.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.LayerMasker.#ctor(System.Int32)">
            <summary>
            Constructor. Takes the number of layers allowed, which must be more than 0 and less than
            or equal to 32.
            </summary>
            <param name="numberOfLayers">The number of layers supported by this layer mask generator.</param>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.LayerMasker.NumberOfLayers">
            <summary>
            Maximum number of layers supported by this layer masker. Functions using layer masks enforce this limit,
            and will not consider layers outside the range [0, NumberOfLayers - 1]
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.LayerMasker.AddLayers(System.UInt32,System.Int32[])">
            <summary>
            Adds the given layers to the given layer mask, provided those layers are within the
            supported number of layers. Any layer outside of this range in either of the function's parameters will not
            be included.
            </summary>
            <param name="mask">The mask to add the layers to.</param>
            <param name="layers">Layers to include in the resulting layer mask.</param>
            <returns>
            A layer mask including any original layers that were in the given mask, as well as the new layers
            provided.  However, the mask will exclude any layers not within the range of this LayerMasker's supported
            layers.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.LayerMasker.AddLayers(System.UInt32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Adds the given layers to the given layer mask, provided those layers are within the
            supported number of layers. Any layer outside of this range will not be added.
            </summary>
            <param name="mask">The mask to add the layers to.</param>
            <param name="layers">Layers to include in the resulting layer mask.</param>
            <returns>
            A layer mask including any original layers that were in the given mask (regardless of
            whether they were within the supported number of layers), as well as the new layers
            provided (provided they are within the supported number of layers).
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.LayerMasker.AddLayers(System.UInt32,System.UInt32)">
            <summary>
            Adds layers active in the mask <paramref name="addMask"/> to the <paramref name="mask"/> value, and returns
            the result.  The result will include all layers on in the original mask, as well as all layers on in
            <paramref name="addMask"/>, provided those layers are within the supported number of layers. Any layer
            outside of this range will not be added.
            </summary>
            <param name="mask"></param>
            <param name="addMask"></param>
            <returns></returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.LayerMasker.HasLayer(System.UInt32,System.Int32)">
            <summary>
            Returns whether or not a layer is contained within the given layer mask. Returns false if
            the layer given is outside the supported number of layers.
            </summary>
            <param name="mask">Layer mask to check.</param>
            <param name="layer">Layer to check for.</param>
            <returns>
            True if the given layer is present in the given layer mask, false if it is not or the
            layer is outside the supported number of layers for this LayerMasker.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.LayerMasker.Layers(System.UInt32)">
             <summary>
             Returns a custom enumerator that will enumerate all layers contained within the given layer mask (that fall
             within the supported number of layers).  This function is intended to be used primarily with a foreach loop
             (see remarks).
             </summary>
             <remarks>
             This function returns a custom value type which can be treated like an enumerator and used with C#'s foreach
             loop.  It is intended to be used like so:
             <code>
             foreach (int layerID in myLayerMasker.Layers(myLayerMask))
                 Console.WriteLine($"Do something with layer {layerID}.")
             </code>
            
             This custom iterator will perform many times better (up to 25x better, in fact) than an IEnumerable, when
             used in a foreach loop, since it is a value type and thus incurs no GC allocation and no boxing/unboxing.
            
             The returned enumerator also contains implements IEnumerable if you wish to use
             the returned values with System.Linq or similar:
             <code>
             var array = myLayerMasker.Layers(myLayerMask).ToArray()
             </code>
            
             Note, however, that using this function will degrade the performance benefits of the custom type.
             </remarks>
             <param name="mask">Layer mask to return layers for.</param>
             <returns>
             All layers contained within the given layer mask that fall within the supported number of
             layers for this LayerMasker.
             </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.LayerMasker.Mask(System.Int32[])">
            <summary>
            Gets a layer mask including exactly the given layer indices. Any layer given outside the
            maximum number of layers is ignored, and will not be added to the resulting mask.
            </summary>
            <param name="layers">One or more layers to include in generated layer mask.</param>
            <returns>
            A layer mask including exactly those layers in the input that were within the supported
            number of layers.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.LayerMasker.Mask(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets a layer mask including exactly the given layer indices. Any layer given outside the
            maximum number of layers is ignored, and will not be added to the resulting mask.
            </summary>
            <param name="layers">Layers to include in generated layer mask.</param>
            <returns>
            A layer mask including exactly those layers in the input that were within the supported
            number of layers.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.LayerMasker.MaskAllAbove(System.Int32)">
            <summary>
            Generates and returns a layer mask including the given layer and any layer above (greater
            than) it. Layers not in the supported number of layers will be ignored, and will not be
            added to the resulting layer mask.
            </summary>
            <param name="layer">Layer to start the mask at.</param>
            <returns>
            A layer mask including the specified layer and all layers above it, provided those layers
            fall within the supported number of layers.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.LayerMasker.MaskAllBelow(System.Int32)">
            <summary>
            Generates and returns a layer mask including the given layer and any layer below (less
            than) it. Layers not in the supported number of layers will be ignored, and will not be
            added to the resulting layer mask.
            </summary>
            <param name="layer">Layer to start the mask at.</param>
            <returns>
            A layer mask including the specified layer and all layers below it, provided those layers
            fall within the supported number of layers.
            </returns>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1">
             <summary>
             A more complex version of <see cref="T:SadRogue.Primitives.SpatialMaps.MultiSpatialMap`1" /> that does not require the items in it to implement
             <see cref="T:SadRogue.Primitives.IHasID" />, instead requiring the specification of a custom <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use
             for hashing and comparison of items.
             </summary>
             <remarks>
             This class is useful for cases where you do not want to implement <see cref="T:SadRogue.Primitives.IHasID" />, or if you need
             to use a value type in a spatial map. For simple cases, it is recommended to use <see cref="T:SadRogue.Primitives.SpatialMaps.MultiSpatialMap`1" />
             instead.
            
             Be mindful of the efficiency of your hashing function specified in the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> --
             it will in large part determine the performance of AdvancedMultiSpatialMap!
             </remarks>
             <typeparam name="T">The type of object that will be contained by this AdvancedMultiSpatialMap.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point},System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="itemComparer">
            Equality comparer to use for comparison and hashing of type T. Be especially mindful of the
            efficiency of its GetHashCode function, as it will determine the efficiency of many AdvancedMultiSpatialMap
            functions.
            </param>
            <param name="pointComparer">
            Equality comparer to use for comparison and hashing of points, as object are added to/removed from/moved
            around the spatial map.  Be especially mindful of the efficiency of its GetHashCode function, as it will
            determine the efficiency of many AdvancedMultiSpatialMap functions.  Defaults to the default equality
            comparer for Point, which uses a fairly efficient generalized hashing algorithm.
            </param>
            <param name="initialCapacity">
            The initial maximum number of elements the AdvancedMultiSpatialMap can hold before it has to
            internally resize data structures. Defaults to 32.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},SadRogue.Primitives.Pooling.IListPool{`0},System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point},System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="itemComparer">
            Equality comparer to use for comparison and hashing of type T. Be especially mindful of the
            efficiency of its GetHashCode function, as it will determine the efficiency of many AdvancedMultiSpatialMap
            functions.
            </param>
            <param name="listPool">
            The list pool implementation to use.  Specify <see cref="T:SadRogue.Primitives.Pooling.NoPoolingListPool`1"/> to disable pooling entirely.
            This implementation _may_ be shared with other spatial maps if you wish, however be aware that no thread safety is implemented
            by the default list pool implementations or the spatial map itself.
            </param>
            <param name="pointComparer">
            Equality comparer to use for comparison and hashing of points, as object are added to/removed from/moved
            around the spatial map.  Be especially mindful of the efficiency of its GetHashCode function, as it will
            determine the efficiency of many AdvancedMultiSpatialMap functions.  Defaults to the default equality
            comparer for Point, which uses a fairly efficient generalized hashing algorithm.
            </param>
            <param name="initialCapacity">
            The initial maximum number of elements the AdvancedMultiSpatialMap can hold before it has to
            internally resize data structures. Defaults to 32.
            </param>
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.ItemAdded">
            <inheritdoc />
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.ItemMoved">
            <inheritdoc />
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.ItemRemoved">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.Count">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.Items">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.Positions">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.Add(`0,SadRogue.Primitives.Point)">
            <summary>
            Adds the given item at the given position, provided the item is not already in the
            spatial map. If the item is already added, throws ArgumentException.
            </summary>
            <param name="item">The item to add.</param>
            <param name="position">The position at which to add the new item.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.Add(`0,System.Int32,System.Int32)">
            <summary>
            Adds the given item at the given position, provided the item is not already in the
            spatial map. If the item is already added, throws ArgumentException.
            </summary>
            <param name="item">The item to add.</param>
            <param name="x">x-value of the position to add item to.</param>
            <param name="y">y-value of the position to add item to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.TryAdd(`0,SadRogue.Primitives.Point)">
            <summary>
            Adds the given item at the given position, provided the item is not already in the
            spatial map. If the item is already added, returns false.
            </summary>
            <param name="item">The item to add.</param>
            <param name="position">The position at which to add the new item.</param>
            <returns>True if the item was successfully added; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.TryAdd(`0,System.Int32,System.Int32)">
            <summary>
            Adds the given item at the given position, provided the item is not already in the
            spatial map. If the item is already added, returns false.
            </summary>
            <param name="item">The item to add.</param>
            <param name="x">x-value of the position to add item to.</param>
            <param name="y">y-value of the position to add item to.</param>
            <returns>True if the item was successfully added; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.AsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.Contains(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.Contains(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.GetEnumerator">
            <summary>
            Used by foreach loop, so that the class will give ISpatialTuple objects when used in a
            foreach loop. Generally should never be called explicitly.
            </summary>
            <returns>An enumerator for the spatial map.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Non-generic version of enumerable used by foreach loop internally.
            </summary>
            <returns>Enumerator of ISpatialTuples.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.GetItemsAt(SadRogue.Primitives.Point)">
            <summary>
            Gets the item(s) at the given position if there are any items, or returns
            nothing if there is nothing at that position.
            </summary>
            <param name="position">The position to return the item(s) for.</param>
            <returns>
            The item(s) at the given position if there are any items, or nothing if there is nothing
            at that position.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.SadRogue#Primitives#SpatialMaps#IReadOnlySpatialMap{T}#GetItemsAt(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.GetItemsAt(System.Int32,System.Int32)">
            <summary>
            Gets the item(s) at the given position if there are any items, or returns
            nothing if there is nothing at that position.
            </summary>
            <param name="x">The x-value of the position to return the item(s) for.</param>
            <param name="y">The y-value of the position to return the item(s) for.</param>
            <returns>
            The item(s) at the given position if there are any items, or nothing if there is nothing
            at that position.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.SadRogue#Primitives#SpatialMaps#IReadOnlySpatialMap{T}#GetItemsAt(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.GetPositionOfOrNull(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.TryGetPositionOf(`0,SadRogue.Primitives.Point@)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.GetPositionOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.Move(`0,SadRogue.Primitives.Point)">
            <summary>
            Moves the item specified to the position specified. If the item does not exist in the
            spatial map, the function throws ArgumentException.
            </summary>
            <param name="item">The item to move.</param>
            <param name="target">The position to move it to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.Move(`0,System.Int32,System.Int32)">
            <summary>
            Moves the item specified to the position specified. If the item does not exist in the
            spatial map, the function throws ArgumentException.
            </summary>
            <param name="item">The item to move.</param>
            <param name="targetX">X-value of the location to move it to.</param>
            <param name="targetY">Y-value of the location to move it to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.TryMove(`0,SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.TryMove(`0,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.MoveValid(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.MoveValid(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.Collections.Generic.List{`0})">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.MoveValid(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.MoveValid(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{`0})">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.Remove(`0)">
            <summary>
            Removes the item specified, if it exists.  Throws ArgumentException if the item is
            not in the spatial map.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.TryRemove(`0)">
            <summary>
            Removes the item specified, if it exists.  If the item is not in the spatial map, returns false.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was successfully removed; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.Remove(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.TryRemove(SadRogue.Primitives.Point)">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.Remove(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.TryRemove(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.ToString(System.Func{`0,System.String})">
            <summary>
            Returns a string representation of the spatial map, allowing display of the
            spatial map's items in a specified way.
            </summary>
            <param name="itemStringifier">Function that turns an item into a string.</param>
            <returns>A string representation of the spatial map.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.CanAdd(`0,SadRogue.Primitives.Point)">
            <summary>
            Returns true if the given item can be added at the given position, eg. if the item is not already in the spatial map;
            false otherwise.
            </summary>
            <param name="newItem">Item to add.</param>
            <param name="position">Position to add item to.</param>
            <returns>True if the item can be successfully added at the position given; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.CanAdd(`0,System.Int32,System.Int32)">
            <summary>
            Returns true if the given item can be added at the given position, eg. if the item is not already in the spatial map;
            false otherwise.
            </summary>
            <param name="newItem">Item to add.</param>
            <param name="x">X-value of the position to add item to.</param>
            <param name="y">Y-value of the position to add item to.</param>
            <returns>True if the item can be successfully added at the position given; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.CanMove(`0,SadRogue.Primitives.Point)">
            <summary>
            Returns true if the given item can be moved from its current location to the specified one,
            eg. the item is contained within the spatial map; false otherwise.
            </summary>
            <param name="item">Item to move.</param>
            <param name="target">Location to move item to.</param>
            <returns>true if the given item can be moved to the given position; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.CanMove(`0,System.Int32,System.Int32)">
            <summary>
            Returns true if the given item can be moved from its current location to the specified one,
            eg. the item is contained within the spatial map; false otherwise.
            </summary>
            <param name="item">Item to move.</param>
            <param name="targetX">X-value of the location to move item to.</param>
            <param name="targetY">Y-value of the location to move item to.</param>
            <returns>true if the given item can be moved to the given position; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.CanMoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.CanMoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.MoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Moves all items at the specified source location to the target location.  Throws ArgumentException if there are
            no items to be moved.
            </summary>
            <param name="current">Location to move items from.</param>
            <param name="target">Location to move items to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.TryMoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.TryMoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.MoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves all items at the specified source location to the target location.  Throws ArgumentException if there are
            no items to be moved.
            </summary>
            <param name="currentX">X-value of the location to move items from.</param>
            <param name="currentY">Y-value of the location to move items from.</param>
            <param name="targetX">X-value of the location to move items to.</param>
            <param name="targetY">Y-value of the location to move items to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1.ToString">
            <summary>
            Returns a string representation of the spatial map.
            </summary>
            <returns>A string representation of the spatial map.</returns>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.MultiSpatialMap`1">
             <summary>
             An implementation of <see cref="T:SadRogue.Primitives.SpatialMaps.ISpatialMap`1" /> that allows multiple items to reside
             at any given position at the same time.  If you wish to allow only one item to reside
             at each location at a time, use <see cref="T:SadRogue.Primitives.SpatialMaps.SpatialMap`1" /> instead.  For a situation
             involving different categories or layers of items, you may want to look at
             <see cref="T:SadRogue.Primitives.SpatialMaps.LayeredSpatialMap`1" />.
             </summary>
             <remarks>
             See the <see cref="T:SadRogue.Primitives.SpatialMaps.ISpatialMap`1" /> for documentation on the practical purpose of spatial
             maps.
            
             The objects stored in a MultiSpatialMap must implement <see cref="T:SadRogue.Primitives.IHasID" />. This is used
             internally to keep track of the objects, since uints are easily (and efficiently) hashable.  If you cannot
             or do not wish to implement this interface, use <see cref="T:SadRogue.Primitives.SpatialMaps.AdvancedMultiSpatialMap`1"/> instead.
            
             Although MultiSpatialMap is generally quite fast, if you know the spatial map will
             only have one item at any given position at a time, <see cref="T:SadRogue.Primitives.SpatialMaps.SpatialMap`1" /> may yield
             better performance.
             </remarks>
             <typeparam name="T">
             The type of items being stored in the spatial map. Must implement <see cref="T:SadRogue.Primitives.IHasID" /> and be
             a reference-type.
             </typeparam>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.MultiSpatialMap`1.#ctor(SadRogue.Primitives.Pooling.IListPool{`0},System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point},System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="listPool">
            The list pool implementation to use.  Specify <see cref="T:SadRogue.Primitives.Pooling.NoPoolingListPool`1"/> to disable pooling entirely.
            This implementation _may_ be shared with other spatial maps if you wish, however be aware that no thread safety is implemented
            by the default list pool implementations or the spatial map itself.
            </param>
            <param name="pointComparer">
            Equality comparer to use for comparison and hashing of points, as object are added to/removed from/moved
            around the spatial map.  Be especially mindful of the efficiency of its GetHashCode function, as it will
            determine the efficiency of many MultiSpatialMap functions.  Defaults to the default equality
            comparer for Point, which uses a fairly efficient generalized hashing algorithm.
            </param>
            <param name="initialCapacity">
            The initial maximum number of elements the spatial map can hold before it has to
            internally resize data structures. Defaults to 32.
            </param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.MultiSpatialMap`1.#ctor(System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point},System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="pointComparer">
            Equality comparer to use for comparison and hashing of points, as object are added to/removed from/moved
            around the spatial map.  Be especially mindful of the efficiency of its GetHashCode function, as it will
            determine the efficiency of many MultiSpatialMap functions.  Defaults to the default equality
            comparer for Point, which uses a fairly efficient generalized hashing algorithm.
            </param>
            <param name="initialCapacity">
            The initial maximum number of elements the spatial map can hold before it has to
            internally resize data structures. Defaults to 32.
            </param>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.SpatialMapItemsAtEnumerator`1">
             <summary>
             A custom enumerator used to iterate over the item at a given location in a spatial map implementation efficiently.
            
             Generally, you should use <see cref="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetItemsAt(SadRogue.Primitives.Point)"/> (or one of its overloads)
             to get an instance of this, rather than creating one yourself.
             </summary>
             <remarks>
             This type is a struct, and as such is notably more efficient when used in a foreach loop than a function returning
             IEnumerable&lt;T&gt; by using "yield return".  This type does implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
             so you can pass it to functions which require one (for example, System.LINQ).  However, this will have reduced
             performance due to boxing of the iterator.
             </remarks>
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.SpatialMapItemsAtEnumerator`1.Current">
            <summary>
            The current value for enumeration.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.SpatialMapItemsAtEnumerator`1.#ctor(SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap{`0},SadRogue.Primitives.Point)">
            <summary>
            Creates an enumerator which iterates over all items at the given point in the spatial map given.
            </summary>
            <param name="map">The spatial map to check for items in.</param>
            <param name="position">The position to retrieve items at.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.SpatialMapItemsAtEnumerator`1.MoveNext">
            <summary>
            Advances the iterator to the next item.
            </summary>
            <returns>True if the a new item at the position given; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.SpatialMapItemsAtEnumerator`1.GetEnumerator">
            <summary>
            Returns this enumerator.
            </summary>
            <returns>This enumerator.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.SpatialMapItemsAtEnumerator`1.System#Collections#IEnumerator#Reset">
            <inheritdoc />
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1">
            <summary>
            A more complex version of <see cref="T:SadRogue.Primitives.SpatialMaps.SpatialMap`1" /> that does not require the items in it to implement
            <see cref="T:SadRogue.Primitives.IHasID" />, instead requiring the specification of a custom <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            to use for hashing and comparison of items.
            </summary>
            <remarks>
            This class is useful for cases where you do not want to or cannot implement <see cref="T:SadRogue.Primitives.IHasID" />, or if you need
            to use a value type in a spatial map. For simple cases, it is recommended to use <see cref="T:SadRogue.Primitives.SpatialMaps.SpatialMap`1" />
            instead.
            Be mindful of the efficiency of your hashing function specified in the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> --
            it will, in large part, determine the performance of AdvancedSpatialMap!
            </remarks>
            <typeparam name="T">The type of object that will be contained by this AdvancedSpatialMap.</typeparam>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point},System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="itemComparer">
            Equality comparer to use for comparison and hashing of type T. Be especially mindful of the
            efficiency of its GetHashCode function, as it will determine the efficiency of many AdvancedSpatialMap
            functions.
            </param>
            <param name="pointComparer">
            Equality comparer to use for comparison and hashing of points, as object are added to/removed from/moved
            around the spatial map.  Be especially mindful of the efficiency of its GetHashCode function, as it will
            determine the efficiency of many AdvancedSpatialMap functions.  Defaults to the default equality comparer for
            Point, which uses a fairly efficient generalized hashing algorithm.
            </param>
            <param name="initialCapacity">
            The initial maximum number of elements the AdvancedSpatialMap can hold before it has to
            internally resize data structures. Defaults to 32.
            </param>
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.ItemAdded">
            <inheritdoc />
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.ItemMoved">
            <inheritdoc />
        </member>
        <member name="E:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.ItemRemoved">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.Count">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.Items">
            <inheritdoc />
        </member>
        <member name="P:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.Positions">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.Add(`0,SadRogue.Primitives.Point)">
            <summary>
            Tries to add the given item at the given position, provided the item is not already in the
            spatial map and the position is not already filled. If either of those are the case,
            throws ArgumentException.
            </summary>
            <param name="item">Item to add.</param>
            <param name="position">Position to add item to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.Add(`0,System.Int32,System.Int32)">
            <summary>
            Tries to add the given item at the given position, provided the item is not already in the
            spatial map and the position is not already filled. If either of those are the case,
            throws ArgumentException.
            </summary>
            <param name="item">Item to add.</param>
            <param name="x">X-value of the position to add item to.</param>
            <param name="y">Y-value of the position to add item to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.TryAdd(`0,SadRogue.Primitives.Point)">
            <summary>
            Tries to add the given item at the given position, provided the item is not already in the
            spatial map and the position is not already filled. If either of those are the case,
            returns false.
            </summary>
            <param name="item">Item to add.</param>
            <param name="position">Position to add item to.</param>
            <returns>True if the item was successfully added; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.TryAdd(`0,System.Int32,System.Int32)">
            <summary>
            Tries to add the given item at the given position, provided the item is not already in the
            spatial map and the position is not already filled. If either of those are the case,
            returns false.
            </summary>
            <param name="item">Item to add.</param>
            <param name="x">X-value of the position to add item to.</param>
            <param name="y">Y-value of the position to add item to.</param>
            <returns>True if the item was successfully added; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.AsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.Contains(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.Contains(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetEnumerator">
            <summary>
            Used by foreach loop, so that the class will give ISpatialTuple objects when used in a
            foreach loop. Generally should never be called explicitly.
            </summary>
            <returns>An enumerator for the spatial map</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Generic iterator used internally by foreach loops.
            </summary>
            <returns>Enumerator to ISpatialTuple instances.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetItemsAt(SadRogue.Primitives.Point)">
            <summary>
            Gets the item at the given position as a 1-element enumerable if there is any item there,
            or nothing if there is nothing at that position.
            </summary>
            <remarks>
            This function returns a custom iterator which is very fast when used in a foreach loop.
            If you need an IEnumerable to use with LINQ or other code, the returned struct does implement that interface;
            however note that iterating over it this way will not perform as well as iterating directly over this object.
            
            Since this implementation guarantees that only one item can be at any given
            location at once, the return value is guaranteed to be at most one element. You may find it
            more convenient to use the <see cref="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetItem(SadRogue.Primitives.Point)" /> function when you know you are
            dealing with a SpatialMap/AdvancedSpatialMap instance.
            </remarks>
            <param name="position">The position to return the item for.</param>
            <returns>
            The item at the given position as a 1-element enumerable, if there is an item there, or
            nothing if there is no item there.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetItemsAt(System.Int32,System.Int32)">
            <summary>
            Gets the item at the given position as a 1-element enumerable if there is any item there,
            or nothing if there is nothing at that position.
            </summary>
            <remarks>
            This function returns a custom iterator which is very fast when used in a foreach loop.
            If you need an IEnumerable to use with LINQ or other code, the returned struct does implement that interface;
            however note that iterating over it this way will not perform as well as iterating directly over this object.
            
            Since this implementation guarantees that only one item can be at any given
            location at once, the return value is guaranteed to be at most one element. You may find it
            more convenient to use the <see cref="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetItem(System.Int32,System.Int32)" /> function when you know you are
            dealing with a SpatialMap/AdvancedSpatialMap instance.
            </remarks>
            <param name="x">The x-value of the position to return the item(s) for.</param>
            <param name="y">The y-value of the position to return the item(s) for.</param>
            <returns>
            The item at the given position as a 1-element enumerable, if there is an item there, or
            nothing if there is no item there.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.SadRogue#Primitives#SpatialMaps#IReadOnlySpatialMap{T}#GetItemsAt(SadRogue.Primitives.Point)">
            <summary>
            Gets the item at the given position as a 1-element enumerable if there is any item there,
            or nothing if there is nothing at that position.
            </summary>
            <remarks>
            Since this implementation guarantees that only one item can be at any given
            location at once, the return value is guaranteed to be at most one element. You may find it
            more convenient to use the <see cref="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetItem(SadRogue.Primitives.Point)" /> function when you know you are
            dealing with a SpatialMap/AdvancedSpatialMap instance.
            </remarks>
            <param name="position">The position to return the item for.</param>
            <returns>
            The item at the given position as a 1-element enumerable, if there is an item there, or
            nothing if there is no item there.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.SadRogue#Primitives#SpatialMaps#IReadOnlySpatialMap{T}#GetItemsAt(System.Int32,System.Int32)">
            <summary>
            Gets the item at the given position as a 1-element enumerable if there is any item there,
            or nothing if there is nothing at that position.
            </summary>
            <remarks>
            Since this implementation guarantees that only one item can be at any given
            location at once, the return value is guaranteed to be at most one element. You may find it
            more convenient to use the <see cref="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetItem(System.Int32,System.Int32)" /> function when you know you are
            dealing with a SpatialMap/AdvancedSpatialMap instance.
            </remarks>
            <param name="x">The x-value of the position to return the item(s) for.</param>
            <param name="y">The y-value of the position to return the item(s) for.</param>
            <returns>
            The item at the given position as a 1-element enumerable, if there is an item there, or
            nothing if there is no item there.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetPositionOfOrNull(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetPositionOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.TryGetPositionOf(`0,SadRogue.Primitives.Point@)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.Move(`0,SadRogue.Primitives.Point)">
            <summary>
            Moves the item specified to the position specified. Throws ArgumentException if the item
            does not exist in the spatial map or if the position is already filled by some other item.
            </summary>
            <param name="item">Item to move.</param>
            <param name="target">Location to move item to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.Move(`0,System.Int32,System.Int32)">
            <summary>
            Moves the item specified to the position specified. Throws ArgumentException if the item
            does not exist in the spatial map or if the position is already filled by some other item.
            </summary>
            <param name="item">Item to move.</param>
            <param name="targetX">X-value of the location to move item to.</param>
            <param name="targetY">Y-value of the location to move item to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.TryMove(`0,SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.TryMove(`0,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.MoveValid(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Moves whatever is at position current, if anything, to the target position, if it is a valid move.
            If something was moved, it returns what was moved. If nothing was moved, eg. either there was nothing at
            <paramref name="current" /> or already something at <paramref name="target" />, returns nothing.
            </summary>
            <remarks>
            Since this implementation of ISpatialMap guarantees that only one item may be at any
            given location at a time, the returned values will either be none, or a single value.
            </remarks>
            <param name="current">The position of the item to move.</param>
            <param name="target">The position to move the item to.</param>
            <returns>
            The item moved as a 1-element list if something was moved, or nothing if no item
            was moved.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.MoveValid(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.Collections.Generic.List{`0})">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.MoveValid(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves whatever is at the "current" position specified, if anything, to the "target" position, if
            it is a valid move. If something was moved, it returns what was moved. If nothing was moved, eg.
            either there was nothing at the "current" position given, or already something at the "target" position
            given, it returns nothing.
            </summary>
            <remarks>
            Since this implementation of ISpatialMap guarantees that only one item may be at any
            given location at a time, the returned values will either be none, or a single value.
            </remarks>
            <param name="currentX">X-value of the location to move item from.</param>
            <param name="currentY">Y-value of the location to move item from.</param>
            <param name="targetX">X-value of the location to move item to.</param>
            <param name="targetY">Y-value of the location to move item to.</param>
            <returns>
            The item moved as a 1-element IEnumerable if something was moved, or nothing if no item
            was moved.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.MoveValid(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{`0})">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.Remove(`0)">
            <summary>
            Removes the item specified. Throws ArgumentException if the item specified was
            not in the spatial map.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.TryRemove(`0)">
            <summary>
            Removes the item specified. If the item specified was not in the spatial map, does nothing and returns false.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was removed; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.Remove(SadRogue.Primitives.Point)">
            <summary>
            Removes whatever is at the given position, if anything, and returns the item removed as a
            1-element IEnumerable. Returns nothing if no item was at the position specified.
            </summary>
            <remarks>
            Since this implementation of ISpatialMap guarantees that only one item can be at any given
            location at a time, the returned value is guaranteed to be either nothing or a single element.
            </remarks>
            <param name="position">The position of the item to remove.</param>
            <returns>
            The item removed as a 1-element list, if something was removed; an empty list if no item
            was found at that position.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.TryRemove(SadRogue.Primitives.Point)">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.Remove(System.Int32,System.Int32)">
            <summary>
            Removes whatever is at the given position, if anything, and returns the item removed as a
            1-element IEnumerable. Returns nothing if no item was at the position specified.
            </summary>
            <remarks>
            Since this implementation guarantees that only one item can be at any given
            location at a time, the returned value is guaranteed to be either nothing or a single element.
            </remarks>
            <param name="x">X-value of the position to remove item from.</param>
            <param name="y">Y-value of the position to remove item from.</param>
            <returns>
            The item removed as a 1-element IEnumerable, if something was removed; nothing if no item
            was found at that position.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.TryRemove(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.ToString(System.Func{`0,System.String})">
            <summary>
            Returns a string representation of the spatial map, allowing display of the spatial map's
            items in a specified way.
            </summary>
            <param name="itemStringifier">Function that turns an item into a string.</param>
            <returns>A string representation of the spatial map.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.CanAdd(`0,SadRogue.Primitives.Point)">
            <summary>
            Returns true if the given item can be added at the given position, eg. the item is not already in the
            spatial map and the position is not already filled; false otherwise.
            </summary>
            <param name="newItem">Item to add.</param>
            <param name="position">Position to add item to.</param>
            <returns>True if the item can be successfully added at the position given; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.CanAdd(`0,System.Int32,System.Int32)">
            <summary>
            Returns true if the given item can be added at the given position, eg. the item is not already in the
            spatial map and the position is not already filled; false otherwise.
            </summary>
            <param name="newItem">Item to add.</param>
            <param name="x">X-value of the position to add item to.</param>
            <param name="y">Y-value of the position to add item to.</param>
            <returns>True if the item can be successfully added at the position given; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.CanMove(`0,SadRogue.Primitives.Point)">
            <summary>
            Returns true if the given item can be moved from its current location to the specified one, eg. if the item
            does exists in the spatial map and if the new position is not already filled by some other item; false otherwise.
            However, if the item is already at the specified position, always returns true.
            </summary>
            <param name="item">Item to move.</param>
            <param name="target">Location to move item to.</param>
            <returns>true if the given item can be moved to the given position; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.CanMove(`0,System.Int32,System.Int32)">
            <summary>
            Returns true if the given item can be moved from its current location to the specified one, eg. if the item
            exists in the spatial map and if the new position is not already filled by some other item; false otherwise.
            </summary>
            <param name="item">Item to move.</param>
            <param name="targetX">X-value of the location to move item to.</param>
            <param name="targetY">Y-value of the location to move item to.</param>
            <returns>true if the given item can be moved to the given position; false otherwise.</returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.CanMoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Returns true if the item at the current position specified can be moved to the target position, eg. if an item exists
            at the current position and the new position is not already filled by some other item; false otherwise.
            </summary>
            <param name="current">Location to move items from.</param>
            <param name="target">Location to move items to.</param>
            <returns>
            true if all items at the position current can be moved to the position target; false if one or more items
            cannot be moved.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.CanMoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns true if the item at the current position specified can be moved to the target position, eg. if an item exists
            at the current position and the new position is not already filled by some other item; false otherwise.
            </summary>
            <param name="currentX">X-value of the location to move items from.</param>
            <param name="currentY">Y-value of the location to move items from.</param>
            <param name="targetX">X-value of the location to move items to.</param>
            <param name="targetY">Y-value of the location to move items to.</param>
            <returns>
            true if all items at the position current can be moved to the position target; false if one or more items
            cannot be moved.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.MoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Moves the item at the specified source location to the target location.  Throws ArgumentException if one or
            more items cannot be moved, eg. if no item exists at the current position or the new position is
            already filled by some other item.
            </summary>
            <param name="current">Location to move items from.</param>
            <param name="target">Location to move items to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.TryMoveAll(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.TryMoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.MoveAll(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified source location to the target location.  Throws ArgumentException if one or
            more items cannot be moved, eg.
            if no item exists at the current position or the new position is already filled by some other item.
            </summary>
            <param name="currentX">X-value of the location to move items from.</param>
            <param name="currentY">Y-value of the location to move items from.</param>
            <param name="targetX">X-value of the location to move items to.</param>
            <param name="targetY">Y-value of the location to move items to.</param>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetItem(SadRogue.Primitives.Point)">
            <summary>
            Gets the item at the given position.  Throws ArgumentException no item exists at the given location.
            </summary>
            <exception cref="T:System.ArgumentException">No item is present in the spatial map at the given position.</exception>
            <remarks>
            Intended to be a more convenient function as compared to <see cref="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetItemsAt(SadRogue.Primitives.Point)" />, since
            this spatial map implementation only allows a single item to at any given location at a time.
            </remarks>
            <param name="position">The position to return the item for.</param>
            <returns>
            The item at the given position.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetItem(System.Int32,System.Int32)">
            <summary>
            Gets the item at the given position.  Throws ArgumentException no item exists at the given location.
            </summary>
            <exception cref="T:System.ArgumentException">No item is present in the spatial map at the given position.</exception>
            <remarks>
            Intended to be a more convenient function as compared to <see cref="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetItemsAt(SadRogue.Primitives.Point)" />, since
            this spatial map implementation only allows a single item to at any given location at a time.
            </remarks>
            <param name="x">The x-value of the position to return the item for.</param>
            <param name="y">The y-value of the position to return the item for.</param>
            <returns>
            The item at the given position.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.TryGetItem(SadRogue.Primitives.Point,`0@)">
            <summary>
            Tries to get the item at the given position, and returns true if it is successful, false otherwise.
            The out variable is filled with the value retrieved on success, or default(T) if no item exists.
            </summary>
            <remarks>
            Intended to be a more convenient function as compared to <see cref="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetItemsAt(SadRogue.Primitives.Point)" />, since
            this spatial map implementation only allows a single item to at any given location at a time.
            </remarks>
            <param name="position">The position to return the item for.</param>
            <param name="item">The item retrieved, or default(T) if there was no item at the given location.</param>
            <returns>
            True if there was an item at given position, false if no item exists at that location.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.TryGetItem(System.Int32,System.Int32,`0@)">
            <summary>
            Tries to get the item at the given position, and returns true if it is successful, false otherwise.
            The out variable is filled with the value retrieved on success, or default(T) if no item exists.
            </summary>
            <remarks>
            Intended to be a more convenient function as compared to <see cref="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetItemsAt(SadRogue.Primitives.Point)" />, since
            this spatial map implementation only allows a single item to at any given location at a time.
            </remarks>
            <param name="x">The x-value of the position to return the item for.</param>
            <param name="y">The y-value of the position to return the item for.</param>
            <param name="item">The item retrieved, or default(T) if there was no item at the given location.</param>
            <returns>
            True if there was an item at given position, false if no item exists at that location.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetItemOrDefault(SadRogue.Primitives.Point)">
            <summary>
            Gets the item at the given position, or default(T) if no item exists.
            </summary>
            <remarks>
            Intended to be a more convenient function as compared to <see cref="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetItemsAt(SadRogue.Primitives.Point)" />, since
            this spatial map implementation only allows a single item to at any given location at a time.
            </remarks>
            <param name="position">The position to return the item for.</param>
            <returns>
            The item at the given position, or default(T) if no item exists at that location.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetItemOrDefault(System.Int32,System.Int32)">
            <summary>
            Gets the item at the given position, or default(T) if no item exists.
            </summary>
            <remarks>
            Intended to be a more convenient function as compared to <see cref="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.GetItemsAt(System.Int32,System.Int32)" />, since
            this spatial map implementation only allows a single item to at any given location at a time.
            </remarks>
            <param name="x">The x-value of the position to return the item for.</param>
            <param name="y">The y-value of the position to return the item for.</param>
            <returns>
            The item at the given position, or default(T) if no item exists at that location.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1.ToString">
            <summary>
            Returns a string representation of the spatial map.
            </summary>
            <returns>A string representation of the spatial map.</returns>
        </member>
        <member name="T:SadRogue.Primitives.SpatialMaps.SpatialMap`1">
             <summary>
             An implementation of <see cref="T:SadRogue.Primitives.SpatialMaps.ISpatialMap`1" /> that allows only one item at each position
             at a time.  If you need multiple items to be able to reside at one location at the same time,
             use <see cref="T:SadRogue.Primitives.SpatialMaps.MultiSpatialMap`1" /> or <see cref="T:SadRogue.Primitives.SpatialMaps.LayeredSpatialMap`1" /> instead.
             </summary>
             <remarks>
             See the <see cref="T:SadRogue.Primitives.SpatialMaps.ISpatialMap`1" /> for documentation on the practical purpose of spatial
             maps.
            
             The objects stored in a <see cref="T:SadRogue.Primitives.SpatialMaps.SpatialMap`1"/> must implement <see cref="T:SadRogue.Primitives.IHasID" />. This is used
             internally to keep track of the objects, since uints are easily (and efficiently) hashable.  If you cannot
             or do not wish to implement this interface, use <see cref="T:SadRogue.Primitives.SpatialMaps.AdvancedSpatialMap`1"/> instead.
             </remarks>
             <typeparam name="T">
             The type of object that will be contained by this SpatialMap. Must implement <see cref="T:SadRogue.Primitives.IHasID" />
             and be a reference-type.
             </typeparam>
        </member>
        <member name="M:SadRogue.Primitives.SpatialMaps.SpatialMap`1.#ctor(System.Collections.Generic.IEqualityComparer{SadRogue.Primitives.Point},System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="pointComparer">
            Equality comparer to use for comparison and hashing of points, as object are added to/removed from/moved
            around the spatial map.  Be especially mindful of the efficiency of its GetHashCode function, as it will
            determine the efficiency of many SpatialMap functions.  Defaults to the default equality comparer for
            Point.
            </param>
            <param name="initialCapacity">
            The initial maximum number of elements the SpatialMap can hold before it has to
            internally resize data structures. Defaults to 32.
            </param>
        </member>
        <member name="T:SadRogue.Primitives.ToStringExtensions">
             <summary>
             Static class containing extension extension methods for printing various built-in C# classes
             (as well as some grid views) as strings neatly.
            
             Useful for debugging, and within the primitives library for ToString implementations.
             </summary>
        </member>
        <member name="M:SadRogue.Primitives.ToStringExtensions.ExtendToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String},System.String,System.String)">
            <summary>
            Extension method for <see cref="T:System.Collections.Generic.IEnumerable`1" /> that allows retrieving a string
            representing the contents.
            </summary>
            <remarks>
            Built-in C# data structures like <see cref="T:System.Collections.Generic.List`1" /> implement <see cref="T:System.Collections.Generic.IEnumerable`1" />,
            and as such this method can be used to stringify the contents of C# built-in data structures.
            When no customization parameters are specified, it defaults to a representation looking something
            like [elem1, elem2, elem3].
            </remarks>
            <typeparam name="T" />
            <param name="enumerable" />
            <param name="begin">Character(s) that should precede the string representation of the IEnumerable's elements.</param>
            <param name="elementStringifier">
            Function to use to get the string representation of each element. Specifying null uses the ToString
            function of type T.
            </param>
            <param name="separator">Characters to separate the IEnumerable's elements by.</param>
            <param name="end">Character(s) that should follow the string representation of the IEnumerable's elements.</param>
            <returns>A string representation of the IEnumerable.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ToStringExtensions.ExtendToString``1(System.Collections.Generic.ISet{``0},System.String,System.Func{``0,System.String},System.String,System.String)">
            <summary>
            Extension method for <see cref="T:System.Collections.Generic.ISet`1" /> that allows retrieving a string representing the
            contents.
            </summary>
            <remarks>
            Built-in C# data structures like <see cref="T:System.Collections.Generic.HashSet`1" /> implement <see cref="T:System.Collections.Generic.ISet`1" />,
            and as such this method can be used to stringify the contents of C# built-in set structures.
            When no customization parameters are specified, it defaults to a representation looking something
            like set(elem1, elem2, elem3).
            </remarks>
            <typeparam name="T" />
            <param name="set" />
            <param name="begin">Character(s) that should precede the string representation of the set's elements.</param>
            <param name="elementStringifier">
            Function to use to get the string representation of each element. Specifying null uses the ToString
            function of type T.
            </param>
            <param name="separator">Characters to separate the set's items by.</param>
            <param name="end">Character(s) that should follow the string representation of the set's elements.</param>
            <returns>A string representation of the ISet.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ToStringExtensions.ExtendToString``2(System.Collections.Generic.IDictionary{``0,``1},System.String,System.Func{``0,System.String},System.Func{``1,System.String},System.String,System.String,System.String)">
            <summary>
            Extension method for dictionaries that allows retrieving a string representing the dictionary's contents.
            </summary>
            <remarks>
            Built-in C# data structures like <see cref="T:System.Collections.Generic.Dictionary`2" /> implement <see cref="T:System.Collections.Generic.IDictionary`2" />,
            and as such this method can be used to stringify the contents of C# built-in dictionary structures.
            When no customization parameters are specified, it defaults to a representation looking something
            like {key1 : value, key2 : value}.
            </remarks>
            <typeparam name="TKey" />
            <typeparam name="TValue" />
            <param name="dictionary" />
            <param name="begin">Character(s) that should precede the string representation of the dictionary's elements.</param>
            <param name="keyStringifier">
            Function to use to get the string representation of each key. Specifying null uses the ToString
            function of type K.
            </param>
            <param name="valueStringifier">
            Function to use to get the string representation of each value. Specifying null uses the ToString
            function of type V.
            </param>
            <param name="kvSeparator">Characters used to separate each value from its key.</param>
            <param name="pairSeparator">Characters used to separate each key-value pair from the next.</param>
            <param name="end">Character(s) that should follow the string representation of the dictionary's elements.</param>
            <returns>A string representation of the IDictionary.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ToStringExtensions.ExtendToString``1(``0[0:,0:],System.String,System.String,System.Func{``0,System.String},System.String,System.String,System.String,System.String)">
            <summary>
            Extension method for 2D arrays that allows retrieving a string representing the contents.
            </summary>
            <typeparam name="T" />
            <param name="array" />
            <param name="begin">Character(s) that should precede the string representation of the 2D array.</param>
            <param name="beginRow">Character(s) that should precede the string representation of each row.</param>
            <param name="elementStringifier">
            Function to use to get the string representation of each value. Specifying null uses the ToString
            function of type T.
            </param>
            <param name="rowSeparator">Character(s) used to separate each row from the next.</param>
            <param name="elementSeparator">Character(s) used to separate each element from the next.</param>
            <param name="endRow">Character(s) that should follow the string representation of each row.</param>
            <param name="end">Character(s) that should follow the string representation of the 2D array.</param>
            <returns>A string representation of the 2D array.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ToStringExtensions.ExtendToStringGrid``1(``0[0:,0:],System.String,System.String,System.Func{``0,System.String},System.String,System.String,System.String,System.String)">
            <summary>
            Extension method for 2D arrays that allows retrieving a string representing the contents,
            formatted as if the 2D array represents a coordinate plane/grid.
            </summary>
            <remarks>
            This differs from
            <see cref="M:SadRogue.Primitives.ToStringExtensions.ExtendToString``1(``0[0:,0:],System.String,System.String,System.Func{``0,System.String},System.String,System.String,System.String,System.String)" />
            in that this method prints the array
            such that array[x+1, y] is printed to the RIGHT of array[x, y], rather than BELOW it.
            Effectively it assumes the indexes being used are grid/coordinate plane coordinates.
            </remarks>
            <typeparam name="T" />
            <param name="array" />
            <param name="begin">Character(s) that should precede the string representation of the 2D array.</param>
            <param name="beginRow">Character(s) that should precede the string representation of each row.</param>
            <param name="elementStringifier">
            Function to use to get the string representation of each value. Specifying null uses the ToString
            function of type T.
            </param>
            <param name="rowSeparator">Character(s) used to separate each row from the next.</param>
            <param name="elementSeparator">Character(s) used to separate each element from the next.</param>
            <param name="endRow">Character(s) that should follow the string representation of each row.</param>
            <param name="end">Character(s) that should follow the string representation of the 2D array.</param>
            <returns>
            A string representation of the 2D array, formatted as if the array represents a 2D coordinate plane/grid map.
            </returns>
        </member>
        <member name="M:SadRogue.Primitives.ToStringExtensions.ExtendToStringGrid``1(``0[0:,0:],System.Int32,System.String,System.String,System.Func{``0,System.String},System.String,System.String,System.String,System.String)">
            <summary>
            Extension method for 2D arrays that allows retrieving a string representing the contents,
            formatted as if the 2D array represents a coordinate plane/grid.
            </summary>
            <remarks>
            This differs from
            <see cref="M:SadRogue.Primitives.ToStringExtensions.ExtendToString``1(``0[0:,0:],System.String,System.String,System.Func{``0,System.String},System.String,System.String,System.String,System.String)" />
            in that this method prints the array such that array[x+1, y] is printed to the RIGHT of array[x, y], rather than BELOW
            it.
            Effectively it assumes the indexes being used are grid/coordinate plane coordinates.
            </remarks>
            <typeparam name="T" />
            <param name="array" />
            <param name="fieldSize">
            The amount of space each element should take up in characters. A positive number aligns
            the text to the right of the space, while a negative number aligns the text to the left.
            </param>
            <param name="begin">Character(s) that should precede the string representation of the 2D array.</param>
            <param name="beginRow">Character(s) that should precede the string representation of each row.</param>
            <param name="elementStringifier">
            Function to use to get the string representation of each value. Specifying null uses the ToString
            function of type T.
            </param>
            <param name="rowSeparator">Character(s) used to separate each row from the next.</param>
            <param name="elementSeparator">Character(s) used to separate each element from the next.</param>
            <param name="endRow">Character(s) that should follow the string representation of each row.</param>
            <param name="end">Character(s) that should follow the string representation of the 2D array.</param>
            <returns>
            A string representation of the 2D array, formatted as if the array represents a 2D coordinate plane/grid map.
            </returns>
        </member>
    </members>
</doc>
