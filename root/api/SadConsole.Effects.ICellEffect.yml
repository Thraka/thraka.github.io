### YamlMime:ManagedReference
items:
- uid: SadConsole.Effects.ICellEffect
  commentId: T:SadConsole.Effects.ICellEffect
  id: ICellEffect
  parent: SadConsole.Effects
  children:
  - SadConsole.Effects.ICellEffect.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)
  - SadConsole.Effects.ICellEffect.Clone
  - SadConsole.Effects.ICellEffect.CloneOnAdd
  - SadConsole.Effects.ICellEffect.IsFinished
  - SadConsole.Effects.ICellEffect.RemoveOnFinished
  - SadConsole.Effects.ICellEffect.Restart
  - SadConsole.Effects.ICellEffect.RestoreCellOnRemoved
  - SadConsole.Effects.ICellEffect.RunEffectOnApply
  - SadConsole.Effects.ICellEffect.StartDelay
  - SadConsole.Effects.ICellEffect.Update(System.TimeSpan)
  langs:
  - csharp
  - vb
  name: ICellEffect
  nameWithType: ICellEffect
  fullName: SadConsole.Effects.ICellEffect
  type: Interface
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: The interface describing a cell effect
  example: []
  syntax:
    content: public interface ICellEffect
    content.vb: Public Interface ICellEffect
- uid: SadConsole.Effects.ICellEffect.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)
  commentId: M:SadConsole.Effects.ICellEffect.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)
  id: ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)
  parent: SadConsole.Effects.ICellEffect
  langs:
  - csharp
  - vb
  name: ApplyToCell(ColoredGlyphBase, ColoredGlyphBase)
  nameWithType: ICellEffect.ApplyToCell(ColoredGlyphBase, ColoredGlyphBase)
  fullName: SadConsole.Effects.ICellEffect.ApplyToCell(SadConsole.ColoredGlyphBase, SadConsole.ColoredGlyphBase)
  type: Method
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Applies the state of the effect to a cell.
  example: []
  syntax:
    content: bool ApplyToCell(ColoredGlyphBase cell, ColoredGlyphBase originalState)
    parameters:
    - id: cell
      type: SadConsole.ColoredGlyphBase
      description: The surface cell using this effect.
    - id: originalState
      type: SadConsole.ColoredGlyphBase
      description: The state of the cell prior to the effect being applied.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> when this method modified the <code class="paramref">cell</code>; otherwise <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Function ApplyToCell(cell As ColoredGlyphBase, originalState As ColoredGlyphBase) As Boolean
  overload: SadConsole.Effects.ICellEffect.ApplyToCell*
- uid: SadConsole.Effects.ICellEffect.Update(System.TimeSpan)
  commentId: M:SadConsole.Effects.ICellEffect.Update(System.TimeSpan)
  id: Update(System.TimeSpan)
  parent: SadConsole.Effects.ICellEffect
  langs:
  - csharp
  - vb
  name: Update(TimeSpan)
  nameWithType: ICellEffect.Update(TimeSpan)
  fullName: SadConsole.Effects.ICellEffect.Update(System.TimeSpan)
  type: Method
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Updates the state of the effect.
  example: []
  syntax:
    content: void Update(TimeSpan delta)
    parameters:
    - id: delta
      type: System.TimeSpan
      description: Time since the last call to this effect.
    content.vb: Sub Update(delta As TimeSpan)
  overload: SadConsole.Effects.ICellEffect.Update*
- uid: SadConsole.Effects.ICellEffect.Restart
  commentId: M:SadConsole.Effects.ICellEffect.Restart
  id: Restart
  parent: SadConsole.Effects.ICellEffect
  langs:
  - csharp
  - vb
  name: Restart()
  nameWithType: ICellEffect.Restart()
  fullName: SadConsole.Effects.ICellEffect.Restart()
  type: Method
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Restarts the cell effect.
  example: []
  syntax:
    content: void Restart()
    content.vb: Sub Restart()
  overload: SadConsole.Effects.ICellEffect.Restart*
- uid: SadConsole.Effects.ICellEffect.Clone
  commentId: M:SadConsole.Effects.ICellEffect.Clone
  id: Clone
  parent: SadConsole.Effects.ICellEffect
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: ICellEffect.Clone()
  fullName: SadConsole.Effects.ICellEffect.Clone()
  type: Method
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Returns a duplicate of this effect.
  example: []
  syntax:
    content: ICellEffect Clone()
    return:
      type: SadConsole.Effects.ICellEffect
      description: A new copy of this effect.
    content.vb: Function Clone() As ICellEffect
  overload: SadConsole.Effects.ICellEffect.Clone*
- uid: SadConsole.Effects.ICellEffect.IsFinished
  commentId: P:SadConsole.Effects.ICellEffect.IsFinished
  id: IsFinished
  parent: SadConsole.Effects.ICellEffect
  langs:
  - csharp
  - vb
  name: IsFinished
  nameWithType: ICellEffect.IsFinished
  fullName: SadConsole.Effects.ICellEffect.IsFinished
  type: Property
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: True when the effect is finished.
  example: []
  syntax:
    content: bool IsFinished { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsFinished As Boolean
  overload: SadConsole.Effects.ICellEffect.IsFinished*
- uid: SadConsole.Effects.ICellEffect.CloneOnAdd
  commentId: P:SadConsole.Effects.ICellEffect.CloneOnAdd
  id: CloneOnAdd
  parent: SadConsole.Effects.ICellEffect
  langs:
  - csharp
  - vb
  name: CloneOnAdd
  nameWithType: ICellEffect.CloneOnAdd
  fullName: SadConsole.Effects.ICellEffect.CloneOnAdd
  type: Property
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Flags this effect to be cloned when assigned to a cell instead of reused.
  example: []
  syntax:
    content: bool CloneOnAdd { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property CloneOnAdd As Boolean
  overload: SadConsole.Effects.ICellEffect.CloneOnAdd*
- uid: SadConsole.Effects.ICellEffect.StartDelay
  commentId: P:SadConsole.Effects.ICellEffect.StartDelay
  id: StartDelay
  parent: SadConsole.Effects.ICellEffect
  langs:
  - csharp
  - vb
  name: StartDelay
  nameWithType: ICellEffect.StartDelay
  fullName: SadConsole.Effects.ICellEffect.StartDelay
  type: Property
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: A delay applied to the effect only when it first runs or is restarted.
  example: []
  syntax:
    content: TimeSpan StartDelay { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Property StartDelay As TimeSpan
  overload: SadConsole.Effects.ICellEffect.StartDelay*
- uid: SadConsole.Effects.ICellEffect.RemoveOnFinished
  commentId: P:SadConsole.Effects.ICellEffect.RemoveOnFinished
  id: RemoveOnFinished
  parent: SadConsole.Effects.ICellEffect
  langs:
  - csharp
  - vb
  name: RemoveOnFinished
  nameWithType: ICellEffect.RemoveOnFinished
  fullName: SadConsole.Effects.ICellEffect.RemoveOnFinished
  type: Property
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: When true, the effect should be disassociated with cells when it has finished processing.
  example: []
  syntax:
    content: bool RemoveOnFinished { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property RemoveOnFinished As Boolean
  overload: SadConsole.Effects.ICellEffect.RemoveOnFinished*
- uid: SadConsole.Effects.ICellEffect.RestoreCellOnRemoved
  commentId: P:SadConsole.Effects.ICellEffect.RestoreCellOnRemoved
  id: RestoreCellOnRemoved
  parent: SadConsole.Effects.ICellEffect
  langs:
  - csharp
  - vb
  name: RestoreCellOnRemoved
  nameWithType: ICellEffect.RestoreCellOnRemoved
  fullName: SadConsole.Effects.ICellEffect.RestoreCellOnRemoved
  type: Property
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: When <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>, indicates the <xref href="SadConsole.Effects.EffectsManager" data-throw-if-not-resolved="false"></xref> should restore the cell to its original state.
  example: []
  syntax:
    content: bool RestoreCellOnRemoved { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property RestoreCellOnRemoved As Boolean
  overload: SadConsole.Effects.ICellEffect.RestoreCellOnRemoved*
- uid: SadConsole.Effects.ICellEffect.RunEffectOnApply
  commentId: P:SadConsole.Effects.ICellEffect.RunEffectOnApply
  id: RunEffectOnApply
  parent: SadConsole.Effects.ICellEffect
  langs:
  - csharp
  - vb
  name: RunEffectOnApply
  nameWithType: ICellEffect.RunEffectOnApply
  fullName: SadConsole.Effects.ICellEffect.RunEffectOnApply
  type: Property
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: When <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>, indicates that the <xref href="SadConsole.Effects.EffectsManager" data-throw-if-not-resolved="false"></xref> should run one update frame on this effect when it's first added to the manager.
  example: []
  syntax:
    content: bool RunEffectOnApply { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property RunEffectOnApply As Boolean
  overload: SadConsole.Effects.ICellEffect.RunEffectOnApply*
references:
- uid: SadConsole.Effects
  commentId: N:SadConsole.Effects
  isExternal: true
  href: SadConsole.html
  name: SadConsole.Effects
  nameWithType: SadConsole.Effects
  fullName: SadConsole.Effects
  spec.csharp:
  - uid: SadConsole
    name: SadConsole
    isExternal: true
    href: SadConsole.html
  - name: .
  - uid: SadConsole.Effects
    name: Effects
    isExternal: true
    href: SadConsole.Effects.html
  spec.vb:
  - uid: SadConsole
    name: SadConsole
    isExternal: true
    href: SadConsole.html
  - name: .
  - uid: SadConsole.Effects
    name: Effects
    isExternal: true
    href: SadConsole.Effects.html
- uid: SadConsole.Effects.ICellEffect.ApplyToCell*
  commentId: Overload:SadConsole.Effects.ICellEffect.ApplyToCell
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_ApplyToCell_SadConsole_ColoredGlyphBase_SadConsole_ColoredGlyphBase_
  name: ApplyToCell
  nameWithType: ICellEffect.ApplyToCell
  fullName: SadConsole.Effects.ICellEffect.ApplyToCell
- uid: SadConsole.ColoredGlyphBase
  commentId: T:SadConsole.ColoredGlyphBase
  parent: SadConsole
  isExternal: true
  href: SadConsole.ColoredGlyphBase.html
  name: ColoredGlyphBase
  nameWithType: ColoredGlyphBase
  fullName: SadConsole.ColoredGlyphBase
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: SadConsole
  commentId: N:SadConsole
  isExternal: true
  href: SadConsole.html
  name: SadConsole
  nameWithType: SadConsole
  fullName: SadConsole
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: SadConsole.Effects.ICellEffect.Update*
  commentId: Overload:SadConsole.Effects.ICellEffect.Update
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_Update_System_TimeSpan_
  name: Update
  nameWithType: ICellEffect.Update
  fullName: SadConsole.Effects.ICellEffect.Update
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: SadConsole.Effects.ICellEffect.Restart*
  commentId: Overload:SadConsole.Effects.ICellEffect.Restart
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_Restart
  name: Restart
  nameWithType: ICellEffect.Restart
  fullName: SadConsole.Effects.ICellEffect.Restart
- uid: SadConsole.Effects.ICellEffect.Clone*
  commentId: Overload:SadConsole.Effects.ICellEffect.Clone
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_Clone
  name: Clone
  nameWithType: ICellEffect.Clone
  fullName: SadConsole.Effects.ICellEffect.Clone
- uid: SadConsole.Effects.ICellEffect
  commentId: T:SadConsole.Effects.ICellEffect
  parent: SadConsole.Effects
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html
  name: ICellEffect
  nameWithType: ICellEffect
  fullName: SadConsole.Effects.ICellEffect
- uid: SadConsole.Effects.ICellEffect.IsFinished*
  commentId: Overload:SadConsole.Effects.ICellEffect.IsFinished
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_IsFinished
  name: IsFinished
  nameWithType: ICellEffect.IsFinished
  fullName: SadConsole.Effects.ICellEffect.IsFinished
- uid: SadConsole.Effects.ICellEffect.CloneOnAdd*
  commentId: Overload:SadConsole.Effects.ICellEffect.CloneOnAdd
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_CloneOnAdd
  name: CloneOnAdd
  nameWithType: ICellEffect.CloneOnAdd
  fullName: SadConsole.Effects.ICellEffect.CloneOnAdd
- uid: SadConsole.Effects.ICellEffect.StartDelay*
  commentId: Overload:SadConsole.Effects.ICellEffect.StartDelay
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_StartDelay
  name: StartDelay
  nameWithType: ICellEffect.StartDelay
  fullName: SadConsole.Effects.ICellEffect.StartDelay
- uid: SadConsole.Effects.ICellEffect.RemoveOnFinished*
  commentId: Overload:SadConsole.Effects.ICellEffect.RemoveOnFinished
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_RemoveOnFinished
  name: RemoveOnFinished
  nameWithType: ICellEffect.RemoveOnFinished
  fullName: SadConsole.Effects.ICellEffect.RemoveOnFinished
- uid: SadConsole.Effects.EffectsManager
  commentId: T:SadConsole.Effects.EffectsManager
  parent: SadConsole.Effects
  isExternal: true
  href: SadConsole.Effects.EffectsManager.html
  name: EffectsManager
  nameWithType: EffectsManager
  fullName: SadConsole.Effects.EffectsManager
- uid: SadConsole.Effects.ICellEffect.RestoreCellOnRemoved*
  commentId: Overload:SadConsole.Effects.ICellEffect.RestoreCellOnRemoved
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_RestoreCellOnRemoved
  name: RestoreCellOnRemoved
  nameWithType: ICellEffect.RestoreCellOnRemoved
  fullName: SadConsole.Effects.ICellEffect.RestoreCellOnRemoved
- uid: SadConsole.Effects.ICellEffect.RunEffectOnApply*
  commentId: Overload:SadConsole.Effects.ICellEffect.RunEffectOnApply
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_RunEffectOnApply
  name: RunEffectOnApply
  nameWithType: ICellEffect.RunEffectOnApply
  fullName: SadConsole.Effects.ICellEffect.RunEffectOnApply
