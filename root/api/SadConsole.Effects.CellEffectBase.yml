### YamlMime:ManagedReference
items:
- uid: SadConsole.Effects.CellEffectBase
  commentId: T:SadConsole.Effects.CellEffectBase
  id: CellEffectBase
  parent: SadConsole.Effects
  children:
  - SadConsole.Effects.CellEffectBase.#ctor
  - SadConsole.Effects.CellEffectBase.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)
  - SadConsole.Effects.CellEffectBase.Clone
  - SadConsole.Effects.CellEffectBase.CloneOnAdd
  - SadConsole.Effects.CellEffectBase.IsFinished
  - SadConsole.Effects.CellEffectBase.RemoveOnFinished
  - SadConsole.Effects.CellEffectBase.Restart
  - SadConsole.Effects.CellEffectBase.RestoreCellOnRemoved
  - SadConsole.Effects.CellEffectBase.RunEffectOnApply
  - SadConsole.Effects.CellEffectBase.StartDelay
  - SadConsole.Effects.CellEffectBase.Update(System.TimeSpan)
  - SadConsole.Effects.CellEffectBase._delayFinished
  - SadConsole.Effects.CellEffectBase._timeElapsed
  langs:
  - csharp
  - vb
  name: CellEffectBase
  nameWithType: CellEffectBase
  fullName: SadConsole.Effects.CellEffectBase
  type: Class
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: A base class for cell effects.
  example: []
  syntax:
    content: >-
      [DataContract]

      public abstract class CellEffectBase : ICellEffect
    content.vb: >-
      <DataContract>

      Public MustInherit Class CellEffectBase Implements ICellEffect
  inheritance:
  - System.Object
  derivedClasses:
  - SadConsole.Effects.Blink
  - SadConsole.Effects.BlinkGlyph
  - SadConsole.Effects.Blinker
  - SadConsole.Effects.CodeEffect
  - SadConsole.Effects.Delay
  - SadConsole.Effects.EffectSet
  - SadConsole.Effects.Fade
  - SadConsole.Effects.Recolor
  implements:
  - SadConsole.Effects.ICellEffect
  inheritedMembers:
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  extensionMethods:
  - System.Object.SadConsole.ExtensionsSystem.GetDebuggerDisplayValue
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: SadConsole.Effects.CellEffectBase._delayFinished
  commentId: F:SadConsole.Effects.CellEffectBase._delayFinished
  id: _delayFinished
  parent: SadConsole.Effects.CellEffectBase
  langs:
  - csharp
  - vb
  name: _delayFinished
  nameWithType: CellEffectBase._delayFinished
  fullName: SadConsole.Effects.CellEffectBase._delayFinished
  type: Field
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: A flag to indidcate that the delay timer has finished.
  example: []
  syntax:
    content: >-
      [DataMember]

      protected bool _delayFinished
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Protected _delayFinished As Boolean
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: SadConsole.Effects.CellEffectBase._timeElapsed
  commentId: F:SadConsole.Effects.CellEffectBase._timeElapsed
  id: _timeElapsed
  parent: SadConsole.Effects.CellEffectBase
  langs:
  - csharp
  - vb
  name: _timeElapsed
  nameWithType: CellEffectBase._timeElapsed
  fullName: SadConsole.Effects.CellEffectBase._timeElapsed
  type: Field
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: The total time elapsed while processing the effect.
  example: []
  syntax:
    content: >-
      [DataMember]

      protected TimeSpan _timeElapsed
    return:
      type: System.TimeSpan
    content.vb: >-
      <DataMember>

      Protected _timeElapsed As TimeSpan
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: SadConsole.Effects.CellEffectBase.#ctor
  commentId: M:SadConsole.Effects.CellEffectBase.#ctor
  id: '#ctor'
  parent: SadConsole.Effects.CellEffectBase
  langs:
  - csharp
  - vb
  name: CellEffectBase()
  nameWithType: CellEffectBase.CellEffectBase()
  fullName: SadConsole.Effects.CellEffectBase.CellEffectBase()
  type: Constructor
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Creates a new instance of the effect.
  example: []
  syntax:
    content: protected CellEffectBase()
    content.vb: Protected Sub New()
  overload: SadConsole.Effects.CellEffectBase.#ctor*
  nameWithType.vb: CellEffectBase.New()
  fullName.vb: SadConsole.Effects.CellEffectBase.New()
  name.vb: New()
- uid: SadConsole.Effects.CellEffectBase.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)
  commentId: M:SadConsole.Effects.CellEffectBase.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)
  id: ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)
  parent: SadConsole.Effects.CellEffectBase
  langs:
  - csharp
  - vb
  name: ApplyToCell(ColoredGlyphBase, ColoredGlyphBase)
  nameWithType: CellEffectBase.ApplyToCell(ColoredGlyphBase, ColoredGlyphBase)
  fullName: SadConsole.Effects.CellEffectBase.ApplyToCell(SadConsole.ColoredGlyphBase, SadConsole.ColoredGlyphBase)
  type: Method
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Applies the state of the effect to a cell.
  example: []
  syntax:
    content: public abstract bool ApplyToCell(ColoredGlyphBase cell, ColoredGlyphBase originalState)
    parameters:
    - id: cell
      type: SadConsole.ColoredGlyphBase
      description: The surface cell using this effect.
    - id: originalState
      type: SadConsole.ColoredGlyphBase
      description: The state of the cell prior to the effect being applied.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> when this method modified the <code class="paramref">cell</code>; otherwise <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public MustOverride Function ApplyToCell(cell As ColoredGlyphBase, originalState As ColoredGlyphBase) As Boolean
  overload: SadConsole.Effects.CellEffectBase.ApplyToCell*
  implements:
  - SadConsole.Effects.ICellEffect.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)
- uid: SadConsole.Effects.CellEffectBase.Update(System.TimeSpan)
  commentId: M:SadConsole.Effects.CellEffectBase.Update(System.TimeSpan)
  id: Update(System.TimeSpan)
  parent: SadConsole.Effects.CellEffectBase
  langs:
  - csharp
  - vb
  name: Update(TimeSpan)
  nameWithType: CellEffectBase.Update(TimeSpan)
  fullName: SadConsole.Effects.CellEffectBase.Update(System.TimeSpan)
  type: Method
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Updates the state of the effect.
  example: []
  syntax:
    content: public virtual void Update(TimeSpan delta)
    parameters:
    - id: delta
      type: System.TimeSpan
      description: Time since the last call to this effect.
    content.vb: Public Overridable Sub Update(delta As TimeSpan)
  overload: SadConsole.Effects.CellEffectBase.Update*
  implements:
  - SadConsole.Effects.ICellEffect.Update(System.TimeSpan)
- uid: SadConsole.Effects.CellEffectBase.Restart
  commentId: M:SadConsole.Effects.CellEffectBase.Restart
  id: Restart
  parent: SadConsole.Effects.CellEffectBase
  langs:
  - csharp
  - vb
  name: Restart()
  nameWithType: CellEffectBase.Restart()
  fullName: SadConsole.Effects.CellEffectBase.Restart()
  type: Method
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Restarts the cell effect.
  example: []
  syntax:
    content: public virtual void Restart()
    content.vb: Public Overridable Sub Restart()
  overload: SadConsole.Effects.CellEffectBase.Restart*
  implements:
  - SadConsole.Effects.ICellEffect.Restart
- uid: SadConsole.Effects.CellEffectBase.Clone
  commentId: M:SadConsole.Effects.CellEffectBase.Clone
  id: Clone
  parent: SadConsole.Effects.CellEffectBase
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: CellEffectBase.Clone()
  fullName: SadConsole.Effects.CellEffectBase.Clone()
  type: Method
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Returns a duplicate of this effect.
  example: []
  syntax:
    content: public abstract ICellEffect Clone()
    return:
      type: SadConsole.Effects.ICellEffect
      description: A new copy of this effect.
    content.vb: Public MustOverride Function Clone() As ICellEffect
  overload: SadConsole.Effects.CellEffectBase.Clone*
  implements:
  - SadConsole.Effects.ICellEffect.Clone
- uid: SadConsole.Effects.CellEffectBase.IsFinished
  commentId: P:SadConsole.Effects.CellEffectBase.IsFinished
  id: IsFinished
  parent: SadConsole.Effects.CellEffectBase
  langs:
  - csharp
  - vb
  name: IsFinished
  nameWithType: CellEffectBase.IsFinished
  fullName: SadConsole.Effects.CellEffectBase.IsFinished
  type: Property
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: True when the effect is finished.
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool IsFinished { get; protected set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public Property IsFinished As Boolean
  overload: SadConsole.Effects.CellEffectBase.IsFinished*
  implements:
  - SadConsole.Effects.ICellEffect.IsFinished
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: SadConsole.Effects.CellEffectBase.CloneOnAdd
  commentId: P:SadConsole.Effects.CellEffectBase.CloneOnAdd
  id: CloneOnAdd
  parent: SadConsole.Effects.CellEffectBase
  langs:
  - csharp
  - vb
  name: CloneOnAdd
  nameWithType: CellEffectBase.CloneOnAdd
  fullName: SadConsole.Effects.CellEffectBase.CloneOnAdd
  type: Property
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Flags this effect to be cloned when assigned to a cell instead of reused.
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool CloneOnAdd { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public Property CloneOnAdd As Boolean
  overload: SadConsole.Effects.CellEffectBase.CloneOnAdd*
  implements:
  - SadConsole.Effects.ICellEffect.CloneOnAdd
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: SadConsole.Effects.CellEffectBase.StartDelay
  commentId: P:SadConsole.Effects.CellEffectBase.StartDelay
  id: StartDelay
  parent: SadConsole.Effects.CellEffectBase
  langs:
  - csharp
  - vb
  name: StartDelay
  nameWithType: CellEffectBase.StartDelay
  fullName: SadConsole.Effects.CellEffectBase.StartDelay
  type: Property
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: A delay applied to the effect only when it first runs or is restarted.
  example: []
  syntax:
    content: >-
      [DataMember]

      public TimeSpan StartDelay { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: >-
      <DataMember>

      Public Property StartDelay As TimeSpan
  overload: SadConsole.Effects.CellEffectBase.StartDelay*
  implements:
  - SadConsole.Effects.ICellEffect.StartDelay
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: SadConsole.Effects.CellEffectBase.RemoveOnFinished
  commentId: P:SadConsole.Effects.CellEffectBase.RemoveOnFinished
  id: RemoveOnFinished
  parent: SadConsole.Effects.CellEffectBase
  langs:
  - csharp
  - vb
  name: RemoveOnFinished
  nameWithType: CellEffectBase.RemoveOnFinished
  fullName: SadConsole.Effects.CellEffectBase.RemoveOnFinished
  type: Property
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: When true, the effect should be disassociated with cells when it has finished processing.
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool RemoveOnFinished { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public Property RemoveOnFinished As Boolean
  overload: SadConsole.Effects.CellEffectBase.RemoveOnFinished*
  implements:
  - SadConsole.Effects.ICellEffect.RemoveOnFinished
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: SadConsole.Effects.CellEffectBase.RestoreCellOnRemoved
  commentId: P:SadConsole.Effects.CellEffectBase.RestoreCellOnRemoved
  id: RestoreCellOnRemoved
  parent: SadConsole.Effects.CellEffectBase
  langs:
  - csharp
  - vb
  name: RestoreCellOnRemoved
  nameWithType: CellEffectBase.RestoreCellOnRemoved
  fullName: SadConsole.Effects.CellEffectBase.RestoreCellOnRemoved
  type: Property
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: When <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>, indicates the <xref href="SadConsole.Effects.EffectsManager" data-throw-if-not-resolved="false"></xref> should restore the cell to its original state.
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool RestoreCellOnRemoved { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public Property RestoreCellOnRemoved As Boolean
  overload: SadConsole.Effects.CellEffectBase.RestoreCellOnRemoved*
  implements:
  - SadConsole.Effects.ICellEffect.RestoreCellOnRemoved
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: SadConsole.Effects.CellEffectBase.RunEffectOnApply
  commentId: P:SadConsole.Effects.CellEffectBase.RunEffectOnApply
  id: RunEffectOnApply
  parent: SadConsole.Effects.CellEffectBase
  langs:
  - csharp
  - vb
  name: RunEffectOnApply
  nameWithType: CellEffectBase.RunEffectOnApply
  fullName: SadConsole.Effects.CellEffectBase.RunEffectOnApply
  type: Property
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: When <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>, indicates that the <xref href="SadConsole.Effects.EffectsManager" data-throw-if-not-resolved="false"></xref> should run one update frame on this effect when it's first added to the manager.
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool RunEffectOnApply { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public Property RunEffectOnApply As Boolean
  overload: SadConsole.Effects.CellEffectBase.RunEffectOnApply*
  implements:
  - SadConsole.Effects.ICellEffect.RunEffectOnApply
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
references:
- uid: SadConsole.Effects
  commentId: N:SadConsole.Effects
  isExternal: true
  href: SadConsole.html
  name: SadConsole.Effects
  nameWithType: SadConsole.Effects
  fullName: SadConsole.Effects
  spec.csharp:
  - uid: SadConsole
    name: SadConsole
    isExternal: true
    href: SadConsole.html
  - name: .
  - uid: SadConsole.Effects
    name: Effects
    isExternal: true
    href: SadConsole.Effects.html
  spec.vb:
  - uid: SadConsole
    name: SadConsole
    isExternal: true
    href: SadConsole.html
  - name: .
  - uid: SadConsole.Effects
    name: Effects
    isExternal: true
    href: SadConsole.Effects.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: SadConsole.Effects.ICellEffect
  commentId: T:SadConsole.Effects.ICellEffect
  parent: SadConsole.Effects
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html
  name: ICellEffect
  nameWithType: ICellEffect
  fullName: SadConsole.Effects.ICellEffect
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.SadConsole.ExtensionsSystem.GetDebuggerDisplayValue
  commentId: M:SadConsole.ExtensionsSystem.GetDebuggerDisplayValue(System.Object)
  parent: SadConsole.ExtensionsSystem
  definition: SadConsole.ExtensionsSystem.GetDebuggerDisplayValue(System.Object)
  href: SadConsole.ExtensionsSystem.html#SadConsole_ExtensionsSystem_GetDebuggerDisplayValue_System_Object_
  name: GetDebuggerDisplayValue(object)
  nameWithType: ExtensionsSystem.GetDebuggerDisplayValue(object)
  fullName: SadConsole.ExtensionsSystem.GetDebuggerDisplayValue(object)
  nameWithType.vb: ExtensionsSystem.GetDebuggerDisplayValue(Object)
  fullName.vb: SadConsole.ExtensionsSystem.GetDebuggerDisplayValue(Object)
  name.vb: GetDebuggerDisplayValue(Object)
  spec.csharp:
  - uid: SadConsole.ExtensionsSystem.GetDebuggerDisplayValue(System.Object)
    name: GetDebuggerDisplayValue
    isExternal: true
    href: SadConsole.ExtensionsSystem.html#SadConsole_ExtensionsSystem_GetDebuggerDisplayValue_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: SadConsole.ExtensionsSystem.GetDebuggerDisplayValue(System.Object)
    name: GetDebuggerDisplayValue
    isExternal: true
    href: SadConsole.ExtensionsSystem.html#SadConsole_ExtensionsSystem_GetDebuggerDisplayValue_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: SadConsole.ExtensionsSystem.GetDebuggerDisplayValue(System.Object)
  commentId: M:SadConsole.ExtensionsSystem.GetDebuggerDisplayValue(System.Object)
  isExternal: true
  href: SadConsole.ExtensionsSystem.html#SadConsole_ExtensionsSystem_GetDebuggerDisplayValue_System_Object_
  name: GetDebuggerDisplayValue(object)
  nameWithType: ExtensionsSystem.GetDebuggerDisplayValue(object)
  fullName: SadConsole.ExtensionsSystem.GetDebuggerDisplayValue(object)
  nameWithType.vb: ExtensionsSystem.GetDebuggerDisplayValue(Object)
  fullName.vb: SadConsole.ExtensionsSystem.GetDebuggerDisplayValue(Object)
  name.vb: GetDebuggerDisplayValue(Object)
  spec.csharp:
  - uid: SadConsole.ExtensionsSystem.GetDebuggerDisplayValue(System.Object)
    name: GetDebuggerDisplayValue
    isExternal: true
    href: SadConsole.ExtensionsSystem.html#SadConsole_ExtensionsSystem_GetDebuggerDisplayValue_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: SadConsole.ExtensionsSystem.GetDebuggerDisplayValue(System.Object)
    name: GetDebuggerDisplayValue
    isExternal: true
    href: SadConsole.ExtensionsSystem.html#SadConsole_ExtensionsSystem_GetDebuggerDisplayValue_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: SadConsole.ExtensionsSystem
  commentId: T:SadConsole.ExtensionsSystem
  parent: SadConsole
  isExternal: true
  href: SadConsole.ExtensionsSystem.html
  name: ExtensionsSystem
  nameWithType: ExtensionsSystem
  fullName: SadConsole.ExtensionsSystem
- uid: SadConsole
  commentId: N:SadConsole
  isExternal: true
  href: SadConsole.html
  name: SadConsole
  nameWithType: SadConsole
  fullName: SadConsole
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: SadConsole.Effects.CellEffectBase.#ctor*
  commentId: Overload:SadConsole.Effects.CellEffectBase.#ctor
  isExternal: true
  href: SadConsole.Effects.CellEffectBase.html#SadConsole_Effects_CellEffectBase__ctor
  name: CellEffectBase
  nameWithType: CellEffectBase.CellEffectBase
  fullName: SadConsole.Effects.CellEffectBase.CellEffectBase
  nameWithType.vb: CellEffectBase.New
  fullName.vb: SadConsole.Effects.CellEffectBase.New
  name.vb: New
- uid: SadConsole.Effects.CellEffectBase.ApplyToCell*
  commentId: Overload:SadConsole.Effects.CellEffectBase.ApplyToCell
  isExternal: true
  href: SadConsole.Effects.CellEffectBase.html#SadConsole_Effects_CellEffectBase_ApplyToCell_SadConsole_ColoredGlyphBase_SadConsole_ColoredGlyphBase_
  name: ApplyToCell
  nameWithType: CellEffectBase.ApplyToCell
  fullName: SadConsole.Effects.CellEffectBase.ApplyToCell
- uid: SadConsole.Effects.ICellEffect.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)
  commentId: M:SadConsole.Effects.ICellEffect.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)
  parent: SadConsole.Effects.ICellEffect
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_ApplyToCell_SadConsole_ColoredGlyphBase_SadConsole_ColoredGlyphBase_
  name: ApplyToCell(ColoredGlyphBase, ColoredGlyphBase)
  nameWithType: ICellEffect.ApplyToCell(ColoredGlyphBase, ColoredGlyphBase)
  fullName: SadConsole.Effects.ICellEffect.ApplyToCell(SadConsole.ColoredGlyphBase, SadConsole.ColoredGlyphBase)
  spec.csharp:
  - uid: SadConsole.Effects.ICellEffect.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)
    name: ApplyToCell
    isExternal: true
    href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_ApplyToCell_SadConsole_ColoredGlyphBase_SadConsole_ColoredGlyphBase_
  - name: (
  - uid: SadConsole.ColoredGlyphBase
    name: ColoredGlyphBase
    isExternal: true
    href: SadConsole.ColoredGlyphBase.html
  - name: ','
  - name: " "
  - uid: SadConsole.ColoredGlyphBase
    name: ColoredGlyphBase
    isExternal: true
    href: SadConsole.ColoredGlyphBase.html
  - name: )
  spec.vb:
  - uid: SadConsole.Effects.ICellEffect.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)
    name: ApplyToCell
    isExternal: true
    href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_ApplyToCell_SadConsole_ColoredGlyphBase_SadConsole_ColoredGlyphBase_
  - name: (
  - uid: SadConsole.ColoredGlyphBase
    name: ColoredGlyphBase
    isExternal: true
    href: SadConsole.ColoredGlyphBase.html
  - name: ','
  - name: " "
  - uid: SadConsole.ColoredGlyphBase
    name: ColoredGlyphBase
    isExternal: true
    href: SadConsole.ColoredGlyphBase.html
  - name: )
- uid: SadConsole.ColoredGlyphBase
  commentId: T:SadConsole.ColoredGlyphBase
  parent: SadConsole
  isExternal: true
  href: SadConsole.ColoredGlyphBase.html
  name: ColoredGlyphBase
  nameWithType: ColoredGlyphBase
  fullName: SadConsole.ColoredGlyphBase
- uid: SadConsole.Effects.CellEffectBase.Update*
  commentId: Overload:SadConsole.Effects.CellEffectBase.Update
  isExternal: true
  href: SadConsole.Effects.CellEffectBase.html#SadConsole_Effects_CellEffectBase_Update_System_TimeSpan_
  name: Update
  nameWithType: CellEffectBase.Update
  fullName: SadConsole.Effects.CellEffectBase.Update
- uid: SadConsole.Effects.ICellEffect.Update(System.TimeSpan)
  commentId: M:SadConsole.Effects.ICellEffect.Update(System.TimeSpan)
  parent: SadConsole.Effects.ICellEffect
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_Update_System_TimeSpan_
  name: Update(TimeSpan)
  nameWithType: ICellEffect.Update(TimeSpan)
  fullName: SadConsole.Effects.ICellEffect.Update(System.TimeSpan)
  spec.csharp:
  - uid: SadConsole.Effects.ICellEffect.Update(System.TimeSpan)
    name: Update
    isExternal: true
    href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_Update_System_TimeSpan_
  - name: (
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: )
  spec.vb:
  - uid: SadConsole.Effects.ICellEffect.Update(System.TimeSpan)
    name: Update
    isExternal: true
    href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_Update_System_TimeSpan_
  - name: (
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: )
- uid: SadConsole.Effects.CellEffectBase.Restart*
  commentId: Overload:SadConsole.Effects.CellEffectBase.Restart
  isExternal: true
  href: SadConsole.Effects.CellEffectBase.html#SadConsole_Effects_CellEffectBase_Restart
  name: Restart
  nameWithType: CellEffectBase.Restart
  fullName: SadConsole.Effects.CellEffectBase.Restart
- uid: SadConsole.Effects.ICellEffect.Restart
  commentId: M:SadConsole.Effects.ICellEffect.Restart
  parent: SadConsole.Effects.ICellEffect
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_Restart
  name: Restart()
  nameWithType: ICellEffect.Restart()
  fullName: SadConsole.Effects.ICellEffect.Restart()
  spec.csharp:
  - uid: SadConsole.Effects.ICellEffect.Restart
    name: Restart
    isExternal: true
    href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_Restart
  - name: (
  - name: )
  spec.vb:
  - uid: SadConsole.Effects.ICellEffect.Restart
    name: Restart
    isExternal: true
    href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_Restart
  - name: (
  - name: )
- uid: SadConsole.Effects.CellEffectBase.Clone*
  commentId: Overload:SadConsole.Effects.CellEffectBase.Clone
  isExternal: true
  href: SadConsole.Effects.CellEffectBase.html#SadConsole_Effects_CellEffectBase_Clone
  name: Clone
  nameWithType: CellEffectBase.Clone
  fullName: SadConsole.Effects.CellEffectBase.Clone
- uid: SadConsole.Effects.ICellEffect.Clone
  commentId: M:SadConsole.Effects.ICellEffect.Clone
  parent: SadConsole.Effects.ICellEffect
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_Clone
  name: Clone()
  nameWithType: ICellEffect.Clone()
  fullName: SadConsole.Effects.ICellEffect.Clone()
  spec.csharp:
  - uid: SadConsole.Effects.ICellEffect.Clone
    name: Clone
    isExternal: true
    href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_Clone
  - name: (
  - name: )
  spec.vb:
  - uid: SadConsole.Effects.ICellEffect.Clone
    name: Clone
    isExternal: true
    href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_Clone
  - name: (
  - name: )
- uid: SadConsole.Effects.CellEffectBase.IsFinished*
  commentId: Overload:SadConsole.Effects.CellEffectBase.IsFinished
  isExternal: true
  href: SadConsole.Effects.CellEffectBase.html#SadConsole_Effects_CellEffectBase_IsFinished
  name: IsFinished
  nameWithType: CellEffectBase.IsFinished
  fullName: SadConsole.Effects.CellEffectBase.IsFinished
- uid: SadConsole.Effects.ICellEffect.IsFinished
  commentId: P:SadConsole.Effects.ICellEffect.IsFinished
  parent: SadConsole.Effects.ICellEffect
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_IsFinished
  name: IsFinished
  nameWithType: ICellEffect.IsFinished
  fullName: SadConsole.Effects.ICellEffect.IsFinished
- uid: SadConsole.Effects.CellEffectBase.CloneOnAdd*
  commentId: Overload:SadConsole.Effects.CellEffectBase.CloneOnAdd
  isExternal: true
  href: SadConsole.Effects.CellEffectBase.html#SadConsole_Effects_CellEffectBase_CloneOnAdd
  name: CloneOnAdd
  nameWithType: CellEffectBase.CloneOnAdd
  fullName: SadConsole.Effects.CellEffectBase.CloneOnAdd
- uid: SadConsole.Effects.ICellEffect.CloneOnAdd
  commentId: P:SadConsole.Effects.ICellEffect.CloneOnAdd
  parent: SadConsole.Effects.ICellEffect
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_CloneOnAdd
  name: CloneOnAdd
  nameWithType: ICellEffect.CloneOnAdd
  fullName: SadConsole.Effects.ICellEffect.CloneOnAdd
- uid: SadConsole.Effects.CellEffectBase.StartDelay*
  commentId: Overload:SadConsole.Effects.CellEffectBase.StartDelay
  isExternal: true
  href: SadConsole.Effects.CellEffectBase.html#SadConsole_Effects_CellEffectBase_StartDelay
  name: StartDelay
  nameWithType: CellEffectBase.StartDelay
  fullName: SadConsole.Effects.CellEffectBase.StartDelay
- uid: SadConsole.Effects.ICellEffect.StartDelay
  commentId: P:SadConsole.Effects.ICellEffect.StartDelay
  parent: SadConsole.Effects.ICellEffect
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_StartDelay
  name: StartDelay
  nameWithType: ICellEffect.StartDelay
  fullName: SadConsole.Effects.ICellEffect.StartDelay
- uid: SadConsole.Effects.CellEffectBase.RemoveOnFinished*
  commentId: Overload:SadConsole.Effects.CellEffectBase.RemoveOnFinished
  isExternal: true
  href: SadConsole.Effects.CellEffectBase.html#SadConsole_Effects_CellEffectBase_RemoveOnFinished
  name: RemoveOnFinished
  nameWithType: CellEffectBase.RemoveOnFinished
  fullName: SadConsole.Effects.CellEffectBase.RemoveOnFinished
- uid: SadConsole.Effects.ICellEffect.RemoveOnFinished
  commentId: P:SadConsole.Effects.ICellEffect.RemoveOnFinished
  parent: SadConsole.Effects.ICellEffect
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_RemoveOnFinished
  name: RemoveOnFinished
  nameWithType: ICellEffect.RemoveOnFinished
  fullName: SadConsole.Effects.ICellEffect.RemoveOnFinished
- uid: SadConsole.Effects.EffectsManager
  commentId: T:SadConsole.Effects.EffectsManager
  parent: SadConsole.Effects
  isExternal: true
  href: SadConsole.Effects.EffectsManager.html
  name: EffectsManager
  nameWithType: EffectsManager
  fullName: SadConsole.Effects.EffectsManager
- uid: SadConsole.Effects.CellEffectBase.RestoreCellOnRemoved*
  commentId: Overload:SadConsole.Effects.CellEffectBase.RestoreCellOnRemoved
  isExternal: true
  href: SadConsole.Effects.CellEffectBase.html#SadConsole_Effects_CellEffectBase_RestoreCellOnRemoved
  name: RestoreCellOnRemoved
  nameWithType: CellEffectBase.RestoreCellOnRemoved
  fullName: SadConsole.Effects.CellEffectBase.RestoreCellOnRemoved
- uid: SadConsole.Effects.ICellEffect.RestoreCellOnRemoved
  commentId: P:SadConsole.Effects.ICellEffect.RestoreCellOnRemoved
  parent: SadConsole.Effects.ICellEffect
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_RestoreCellOnRemoved
  name: RestoreCellOnRemoved
  nameWithType: ICellEffect.RestoreCellOnRemoved
  fullName: SadConsole.Effects.ICellEffect.RestoreCellOnRemoved
- uid: SadConsole.Effects.CellEffectBase.RunEffectOnApply*
  commentId: Overload:SadConsole.Effects.CellEffectBase.RunEffectOnApply
  isExternal: true
  href: SadConsole.Effects.CellEffectBase.html#SadConsole_Effects_CellEffectBase_RunEffectOnApply
  name: RunEffectOnApply
  nameWithType: CellEffectBase.RunEffectOnApply
  fullName: SadConsole.Effects.CellEffectBase.RunEffectOnApply
- uid: SadConsole.Effects.ICellEffect.RunEffectOnApply
  commentId: P:SadConsole.Effects.ICellEffect.RunEffectOnApply
  parent: SadConsole.Effects.ICellEffect
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html#SadConsole_Effects_ICellEffect_RunEffectOnApply
  name: RunEffectOnApply
  nameWithType: ICellEffect.RunEffectOnApply
  fullName: SadConsole.Effects.ICellEffect.RunEffectOnApply
