### YamlMime:ManagedReference
items:
- uid: SadConsole.Effects.EffectsManager
  commentId: T:SadConsole.Effects.EffectsManager
  id: EffectsManager
  parent: SadConsole.Effects
  children:
  - SadConsole.Effects.EffectsManager.#ctor(SadConsole.ICellSurface)
  - SadConsole.Effects.EffectsManager.ClearCellEffect(SadConsole.ColoredGlyphBase)
  - SadConsole.Effects.EffectsManager.Count
  - SadConsole.Effects.EffectsManager.DropInvalidCells
  - SadConsole.Effects.EffectsManager.GetEffect(SadConsole.ColoredGlyphBase)
  - SadConsole.Effects.EffectsManager.GetEffects
  - SadConsole.Effects.EffectsManager.GetKnownEffect(SadConsole.Effects.ICellEffect,SadConsole.Effects.EffectsManager.ColoredGlyphEffectData@)
  - SadConsole.Effects.EffectsManager.Remove(SadConsole.Effects.ICellEffect)
  - SadConsole.Effects.EffectsManager.RemoveAll
  - SadConsole.Effects.EffectsManager.SetEffect(SadConsole.ColoredGlyphBase,SadConsole.Effects.ICellEffect)
  - SadConsole.Effects.EffectsManager.SetEffect(System.Collections.Generic.IEnumerable{SadConsole.ColoredGlyphBase},SadConsole.Effects.ICellEffect)
  - SadConsole.Effects.EffectsManager.UpdateEffects(System.TimeSpan)
  - SadConsole.Effects.EffectsManager._backingSurface
  - SadConsole.Effects.EffectsManager._effectCells
  - SadConsole.Effects.EffectsManager._effects
  langs:
  - csharp
  - vb
  name: EffectsManager
  nameWithType: EffectsManager
  fullName: SadConsole.Effects.EffectsManager
  type: Class
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Effects manager for a text surface.
  example: []
  syntax:
    content: public class EffectsManager
    content.vb: Public Class EffectsManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
- uid: SadConsole.Effects.EffectsManager._effects
  commentId: F:SadConsole.Effects.EffectsManager._effects
  id: _effects
  parent: SadConsole.Effects.EffectsManager
  langs:
  - csharp
  - vb
  name: _effects
  nameWithType: EffectsManager._effects
  fullName: SadConsole.Effects.EffectsManager._effects
  type: Field
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: A dictionary of effect data keyed by the effect.
  example: []
  syntax:
    content: protected Dictionary<ICellEffect, EffectsManager.ColoredGlyphEffectData> _effects
    return:
      type: System.Collections.Generic.Dictionary{SadConsole.Effects.ICellEffect,SadConsole.Effects.EffectsManager.ColoredGlyphEffectData}
    content.vb: Protected _effects As Dictionary(Of ICellEffect, EffectsManager.ColoredGlyphEffectData)
- uid: SadConsole.Effects.EffectsManager._effectCells
  commentId: F:SadConsole.Effects.EffectsManager._effectCells
  id: _effectCells
  parent: SadConsole.Effects.EffectsManager
  langs:
  - csharp
  - vb
  name: _effectCells
  nameWithType: EffectsManager._effectCells
  fullName: SadConsole.Effects.EffectsManager._effectCells
  type: Field
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: A dictionary of effect data keyed by the cell index.
  example: []
  syntax:
    content: protected Dictionary<ColoredGlyphBase, EffectsManager.ColoredGlyphEffectData> _effectCells
    return:
      type: System.Collections.Generic.Dictionary{SadConsole.ColoredGlyphBase,SadConsole.Effects.EffectsManager.ColoredGlyphEffectData}
    content.vb: Protected _effectCells As Dictionary(Of ColoredGlyphBase, EffectsManager.ColoredGlyphEffectData)
- uid: SadConsole.Effects.EffectsManager._backingSurface
  commentId: F:SadConsole.Effects.EffectsManager._backingSurface
  id: _backingSurface
  parent: SadConsole.Effects.EffectsManager
  langs:
  - csharp
  - vb
  name: _backingSurface
  nameWithType: EffectsManager._backingSurface
  fullName: SadConsole.Effects.EffectsManager._backingSurface
  type: Field
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: The surface hosting this effects manager.
  example: []
  syntax:
    content: protected ICellSurface _backingSurface
    return:
      type: SadConsole.ICellSurface
    content.vb: Protected _backingSurface As ICellSurface
- uid: SadConsole.Effects.EffectsManager.#ctor(SadConsole.ICellSurface)
  commentId: M:SadConsole.Effects.EffectsManager.#ctor(SadConsole.ICellSurface)
  id: '#ctor(SadConsole.ICellSurface)'
  parent: SadConsole.Effects.EffectsManager
  langs:
  - csharp
  - vb
  name: EffectsManager(ICellSurface)
  nameWithType: EffectsManager.EffectsManager(ICellSurface)
  fullName: SadConsole.Effects.EffectsManager.EffectsManager(SadConsole.ICellSurface)
  type: Constructor
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Creates a new effects manager associated with a text surface.
  example: []
  syntax:
    content: public EffectsManager(ICellSurface surface)
    parameters:
    - id: surface
      type: SadConsole.ICellSurface
      description: Text surface to manage.
    content.vb: Public Sub New(surface As ICellSurface)
  overload: SadConsole.Effects.EffectsManager.#ctor*
  nameWithType.vb: EffectsManager.New(ICellSurface)
  fullName.vb: SadConsole.Effects.EffectsManager.New(SadConsole.ICellSurface)
  name.vb: New(ICellSurface)
- uid: SadConsole.Effects.EffectsManager.SetEffect(SadConsole.ColoredGlyphBase,SadConsole.Effects.ICellEffect)
  commentId: M:SadConsole.Effects.EffectsManager.SetEffect(SadConsole.ColoredGlyphBase,SadConsole.Effects.ICellEffect)
  id: SetEffect(SadConsole.ColoredGlyphBase,SadConsole.Effects.ICellEffect)
  parent: SadConsole.Effects.EffectsManager
  langs:
  - csharp
  - vb
  name: SetEffect(ColoredGlyphBase, ICellEffect?)
  nameWithType: EffectsManager.SetEffect(ColoredGlyphBase, ICellEffect?)
  fullName: SadConsole.Effects.EffectsManager.SetEffect(SadConsole.ColoredGlyphBase, SadConsole.Effects.ICellEffect?)
  type: Method
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Associates a cell effect with a cell.
  example: []
  syntax:
    content: public void SetEffect(ColoredGlyphBase cell, ICellEffect? effect)
    parameters:
    - id: cell
      type: SadConsole.ColoredGlyphBase
      description: Cell to set the effect for.
    - id: effect
      type: SadConsole.Effects.ICellEffect
      description: The effect to associate with the cell.
    content.vb: Public Sub SetEffect(cell As ColoredGlyphBase, effect As ICellEffect)
  overload: SadConsole.Effects.EffectsManager.SetEffect*
  nameWithType.vb: EffectsManager.SetEffect(ColoredGlyphBase, ICellEffect)
  fullName.vb: SadConsole.Effects.EffectsManager.SetEffect(SadConsole.ColoredGlyphBase, SadConsole.Effects.ICellEffect)
  name.vb: SetEffect(ColoredGlyphBase, ICellEffect)
- uid: SadConsole.Effects.EffectsManager.SetEffect(System.Collections.Generic.IEnumerable{SadConsole.ColoredGlyphBase},SadConsole.Effects.ICellEffect)
  commentId: M:SadConsole.Effects.EffectsManager.SetEffect(System.Collections.Generic.IEnumerable{SadConsole.ColoredGlyphBase},SadConsole.Effects.ICellEffect)
  id: SetEffect(System.Collections.Generic.IEnumerable{SadConsole.ColoredGlyphBase},SadConsole.Effects.ICellEffect)
  parent: SadConsole.Effects.EffectsManager
  langs:
  - csharp
  - vb
  name: SetEffect(IEnumerable<ColoredGlyphBase>, ICellEffect?)
  nameWithType: EffectsManager.SetEffect(IEnumerable<ColoredGlyphBase>, ICellEffect?)
  fullName: SadConsole.Effects.EffectsManager.SetEffect(System.Collections.Generic.IEnumerable<SadConsole.ColoredGlyphBase>, SadConsole.Effects.ICellEffect?)
  type: Method
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Changes the effect of the <code class="paramref">cells</code> provided.
  example: []
  syntax:
    content: public void SetEffect(IEnumerable<ColoredGlyphBase> cells, ICellEffect? effect)
    parameters:
    - id: cells
      type: System.Collections.Generic.IEnumerable{SadConsole.ColoredGlyphBase}
      description: A list of cell indicies to change the effect on.
    - id: effect
      type: SadConsole.Effects.ICellEffect
      description: The effect to associate with the cell.
    content.vb: Public Sub SetEffect(cells As IEnumerable(Of ColoredGlyphBase), effect As ICellEffect)
  overload: SadConsole.Effects.EffectsManager.SetEffect*
  nameWithType.vb: EffectsManager.SetEffect(IEnumerable(Of ColoredGlyphBase), ICellEffect)
  fullName.vb: SadConsole.Effects.EffectsManager.SetEffect(System.Collections.Generic.IEnumerable(Of SadConsole.ColoredGlyphBase), SadConsole.Effects.ICellEffect)
  name.vb: SetEffect(IEnumerable(Of ColoredGlyphBase), ICellEffect)
- uid: SadConsole.Effects.EffectsManager.GetEffect(SadConsole.ColoredGlyphBase)
  commentId: M:SadConsole.Effects.EffectsManager.GetEffect(SadConsole.ColoredGlyphBase)
  id: GetEffect(SadConsole.ColoredGlyphBase)
  parent: SadConsole.Effects.EffectsManager
  langs:
  - csharp
  - vb
  name: GetEffect(ColoredGlyphBase)
  nameWithType: EffectsManager.GetEffect(ColoredGlyphBase)
  fullName: SadConsole.Effects.EffectsManager.GetEffect(SadConsole.ColoredGlyphBase)
  type: Method
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Gets the effect of the specified cell.
  example: []
  syntax:
    content: public ICellEffect? GetEffect(ColoredGlyphBase cell)
    parameters:
    - id: cell
      type: SadConsole.ColoredGlyphBase
    return:
      type: SadConsole.Effects.ICellEffect
      description: The effect.
    content.vb: Public Function GetEffect(cell As ColoredGlyphBase) As ICellEffect
  overload: SadConsole.Effects.EffectsManager.GetEffect*
- uid: SadConsole.Effects.EffectsManager.GetEffects
  commentId: M:SadConsole.Effects.EffectsManager.GetEffects
  id: GetEffects
  parent: SadConsole.Effects.EffectsManager
  langs:
  - csharp
  - vb
  name: GetEffects()
  nameWithType: EffectsManager.GetEffects()
  fullName: SadConsole.Effects.EffectsManager.GetEffects()
  type: Method
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Gets a collection of effects associated with the manager.
  example: []
  syntax:
    content: public IEnumerable<ICellEffect>? GetEffects()
    return:
      type: System.Collections.Generic.IEnumerable{SadConsole.Effects.ICellEffect}
      description: Null if there aren't any effects.
    content.vb: Public Function GetEffects() As IEnumerable(Of ICellEffect)
  overload: SadConsole.Effects.EffectsManager.GetEffects*
- uid: SadConsole.Effects.EffectsManager.DropInvalidCells
  commentId: M:SadConsole.Effects.EffectsManager.DropInvalidCells
  id: DropInvalidCells
  parent: SadConsole.Effects.EffectsManager
  langs:
  - csharp
  - vb
  name: DropInvalidCells()
  nameWithType: EffectsManager.DropInvalidCells()
  fullName: SadConsole.Effects.EffectsManager.DropInvalidCells()
  type: Method
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Checks all the cells in this manager and removes any that are no longer in the parent surface.
  example: []
  syntax:
    content: public void DropInvalidCells()
    content.vb: Public Sub DropInvalidCells()
  overload: SadConsole.Effects.EffectsManager.DropInvalidCells*
- uid: SadConsole.Effects.EffectsManager.Remove(SadConsole.Effects.ICellEffect)
  commentId: M:SadConsole.Effects.EffectsManager.Remove(SadConsole.Effects.ICellEffect)
  id: Remove(SadConsole.Effects.ICellEffect)
  parent: SadConsole.Effects.EffectsManager
  langs:
  - csharp
  - vb
  name: Remove(ICellEffect)
  nameWithType: EffectsManager.Remove(ICellEffect)
  fullName: SadConsole.Effects.EffectsManager.Remove(SadConsole.Effects.ICellEffect)
  type: Method
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Removes an effect and associated cells from the manager.
  example: []
  syntax:
    content: public void Remove(ICellEffect effect)
    parameters:
    - id: effect
      type: SadConsole.Effects.ICellEffect
      description: Effect to remove.
    content.vb: Public Sub Remove(effect As ICellEffect)
  overload: SadConsole.Effects.EffectsManager.Remove*
- uid: SadConsole.Effects.EffectsManager.RemoveAll
  commentId: M:SadConsole.Effects.EffectsManager.RemoveAll
  id: RemoveAll
  parent: SadConsole.Effects.EffectsManager
  langs:
  - csharp
  - vb
  name: RemoveAll()
  nameWithType: EffectsManager.RemoveAll()
  fullName: SadConsole.Effects.EffectsManager.RemoveAll()
  type: Method
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Removes all effects and associated cells.
  example: []
  syntax:
    content: public void RemoveAll()
    content.vb: Public Sub RemoveAll()
  overload: SadConsole.Effects.EffectsManager.RemoveAll*
- uid: SadConsole.Effects.EffectsManager.GetKnownEffect(SadConsole.Effects.ICellEffect,SadConsole.Effects.EffectsManager.ColoredGlyphEffectData@)
  commentId: M:SadConsole.Effects.EffectsManager.GetKnownEffect(SadConsole.Effects.ICellEffect,SadConsole.Effects.EffectsManager.ColoredGlyphEffectData@)
  id: GetKnownEffect(SadConsole.Effects.ICellEffect,SadConsole.Effects.EffectsManager.ColoredGlyphEffectData@)
  parent: SadConsole.Effects.EffectsManager
  langs:
  - csharp
  - vb
  name: GetKnownEffect(ICellEffect, out ColoredGlyphEffectData)
  nameWithType: EffectsManager.GetKnownEffect(ICellEffect, out EffectsManager.ColoredGlyphEffectData)
  fullName: SadConsole.Effects.EffectsManager.GetKnownEffect(SadConsole.Effects.ICellEffect, out SadConsole.Effects.EffectsManager.ColoredGlyphEffectData)
  type: Method
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Gets effect data from the dictionary if it exists.
  example: []
  syntax:
    content: protected bool GetKnownEffect(ICellEffect effect, out EffectsManager.ColoredGlyphEffectData effectData)
    parameters:
    - id: effect
      type: SadConsole.Effects.ICellEffect
      description: The effect to get.
    - id: effectData
      type: SadConsole.Effects.EffectsManager.ColoredGlyphEffectData
      description: The effect data ssociated with the effect.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> when the effect exists; otherwise <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Protected Function GetKnownEffect(effect As ICellEffect, effectData As EffectsManager.ColoredGlyphEffectData) As Boolean
  overload: SadConsole.Effects.EffectsManager.GetKnownEffect*
  nameWithType.vb: EffectsManager.GetKnownEffect(ICellEffect, EffectsManager.ColoredGlyphEffectData)
  fullName.vb: SadConsole.Effects.EffectsManager.GetKnownEffect(SadConsole.Effects.ICellEffect, SadConsole.Effects.EffectsManager.ColoredGlyphEffectData)
  name.vb: GetKnownEffect(ICellEffect, ColoredGlyphEffectData)
- uid: SadConsole.Effects.EffectsManager.ClearCellEffect(SadConsole.ColoredGlyphBase)
  commentId: M:SadConsole.Effects.EffectsManager.ClearCellEffect(SadConsole.ColoredGlyphBase)
  id: ClearCellEffect(SadConsole.ColoredGlyphBase)
  parent: SadConsole.Effects.EffectsManager
  langs:
  - csharp
  - vb
  name: ClearCellEffect(ColoredGlyphBase)
  nameWithType: EffectsManager.ClearCellEffect(ColoredGlyphBase)
  fullName: SadConsole.Effects.EffectsManager.ClearCellEffect(SadConsole.ColoredGlyphBase)
  type: Method
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Clears the effect for the cell specified by index.
  example: []
  syntax:
    content: protected void ClearCellEffect(ColoredGlyphBase cell)
    parameters:
    - id: cell
      type: SadConsole.ColoredGlyphBase
      description: The cell index.
    content.vb: Protected Sub ClearCellEffect(cell As ColoredGlyphBase)
  overload: SadConsole.Effects.EffectsManager.ClearCellEffect*
- uid: SadConsole.Effects.EffectsManager.UpdateEffects(System.TimeSpan)
  commentId: M:SadConsole.Effects.EffectsManager.UpdateEffects(System.TimeSpan)
  id: UpdateEffects(System.TimeSpan)
  parent: SadConsole.Effects.EffectsManager
  langs:
  - csharp
  - vb
  name: UpdateEffects(TimeSpan)
  nameWithType: EffectsManager.UpdateEffects(TimeSpan)
  fullName: SadConsole.Effects.EffectsManager.UpdateEffects(System.TimeSpan)
  type: Method
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Updates all known effects and applies them to their associated cells.
  example: []
  syntax:
    content: public void UpdateEffects(TimeSpan delta)
    parameters:
    - id: delta
      type: System.TimeSpan
      description: The time elapased since the last update.
    content.vb: Public Sub UpdateEffects(delta As TimeSpan)
  overload: SadConsole.Effects.EffectsManager.UpdateEffects*
- uid: SadConsole.Effects.EffectsManager.Count
  commentId: P:SadConsole.Effects.EffectsManager.Count
  id: Count
  parent: SadConsole.Effects.EffectsManager
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: EffectsManager.Count
  fullName: SadConsole.Effects.EffectsManager.Count
  type: Property
  assemblies:
  - SadConsole
  namespace: SadConsole.Effects
  summary: Gets the number of effects.
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: SadConsole.Effects.EffectsManager.Count*
references:
- uid: SadConsole.Effects
  commentId: N:SadConsole.Effects
  isExternal: true
  href: SadConsole.html
  name: SadConsole.Effects
  nameWithType: SadConsole.Effects
  fullName: SadConsole.Effects
  spec.csharp:
  - uid: SadConsole
    name: SadConsole
    isExternal: true
    href: SadConsole.html
  - name: .
  - uid: SadConsole.Effects
    name: Effects
    isExternal: true
    href: SadConsole.Effects.html
  spec.vb:
  - uid: SadConsole
    name: SadConsole
    isExternal: true
    href: SadConsole.html
  - name: .
  - uid: SadConsole.Effects
    name: Effects
    isExternal: true
    href: SadConsole.Effects.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.Dictionary{SadConsole.Effects.ICellEffect,SadConsole.Effects.EffectsManager.ColoredGlyphEffectData}
  commentId: T:System.Collections.Generic.Dictionary{SadConsole.Effects.ICellEffect,SadConsole.Effects.EffectsManager.ColoredGlyphEffectData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<ICellEffect, EffectsManager.ColoredGlyphEffectData>
  nameWithType: Dictionary<ICellEffect, EffectsManager.ColoredGlyphEffectData>
  fullName: System.Collections.Generic.Dictionary<SadConsole.Effects.ICellEffect, SadConsole.Effects.EffectsManager.ColoredGlyphEffectData>
  nameWithType.vb: Dictionary(Of ICellEffect, EffectsManager.ColoredGlyphEffectData)
  fullName.vb: System.Collections.Generic.Dictionary(Of SadConsole.Effects.ICellEffect, SadConsole.Effects.EffectsManager.ColoredGlyphEffectData)
  name.vb: Dictionary(Of ICellEffect, EffectsManager.ColoredGlyphEffectData)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: SadConsole.Effects.ICellEffect
    name: ICellEffect
    isExternal: true
    href: SadConsole.Effects.ICellEffect.html
  - name: ','
  - name: " "
  - uid: SadConsole.Effects.EffectsManager
    name: EffectsManager
    isExternal: true
    href: SadConsole.Effects.EffectsManager.html
  - name: .
  - uid: SadConsole.Effects.EffectsManager.ColoredGlyphEffectData
    name: ColoredGlyphEffectData
    isExternal: true
    href: SadConsole.Effects.EffectsManager.ColoredGlyphEffectData.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: SadConsole.Effects.ICellEffect
    name: ICellEffect
    isExternal: true
    href: SadConsole.Effects.ICellEffect.html
  - name: ','
  - name: " "
  - uid: SadConsole.Effects.EffectsManager
    name: EffectsManager
    isExternal: true
    href: SadConsole.Effects.EffectsManager.html
  - name: .
  - uid: SadConsole.Effects.EffectsManager.ColoredGlyphEffectData
    name: ColoredGlyphEffectData
    isExternal: true
    href: SadConsole.Effects.EffectsManager.ColoredGlyphEffectData.html
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections.Generic.Dictionary{SadConsole.ColoredGlyphBase,SadConsole.Effects.EffectsManager.ColoredGlyphEffectData}
  commentId: T:System.Collections.Generic.Dictionary{SadConsole.ColoredGlyphBase,SadConsole.Effects.EffectsManager.ColoredGlyphEffectData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<ColoredGlyphBase, EffectsManager.ColoredGlyphEffectData>
  nameWithType: Dictionary<ColoredGlyphBase, EffectsManager.ColoredGlyphEffectData>
  fullName: System.Collections.Generic.Dictionary<SadConsole.ColoredGlyphBase, SadConsole.Effects.EffectsManager.ColoredGlyphEffectData>
  nameWithType.vb: Dictionary(Of ColoredGlyphBase, EffectsManager.ColoredGlyphEffectData)
  fullName.vb: System.Collections.Generic.Dictionary(Of SadConsole.ColoredGlyphBase, SadConsole.Effects.EffectsManager.ColoredGlyphEffectData)
  name.vb: Dictionary(Of ColoredGlyphBase, EffectsManager.ColoredGlyphEffectData)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: SadConsole.ColoredGlyphBase
    name: ColoredGlyphBase
    isExternal: true
    href: SadConsole.ColoredGlyphBase.html
  - name: ','
  - name: " "
  - uid: SadConsole.Effects.EffectsManager
    name: EffectsManager
    isExternal: true
    href: SadConsole.Effects.EffectsManager.html
  - name: .
  - uid: SadConsole.Effects.EffectsManager.ColoredGlyphEffectData
    name: ColoredGlyphEffectData
    isExternal: true
    href: SadConsole.Effects.EffectsManager.ColoredGlyphEffectData.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: SadConsole.ColoredGlyphBase
    name: ColoredGlyphBase
    isExternal: true
    href: SadConsole.ColoredGlyphBase.html
  - name: ','
  - name: " "
  - uid: SadConsole.Effects.EffectsManager
    name: EffectsManager
    isExternal: true
    href: SadConsole.Effects.EffectsManager.html
  - name: .
  - uid: SadConsole.Effects.EffectsManager.ColoredGlyphEffectData
    name: ColoredGlyphEffectData
    isExternal: true
    href: SadConsole.Effects.EffectsManager.ColoredGlyphEffectData.html
  - name: )
- uid: SadConsole.ICellSurface
  commentId: T:SadConsole.ICellSurface
  parent: SadConsole
  isExternal: true
  href: SadConsole.ICellSurface.html
  name: ICellSurface
  nameWithType: ICellSurface
  fullName: SadConsole.ICellSurface
- uid: SadConsole
  commentId: N:SadConsole
  isExternal: true
  href: SadConsole.html
  name: SadConsole
  nameWithType: SadConsole
  fullName: SadConsole
- uid: SadConsole.Effects.EffectsManager.#ctor*
  commentId: Overload:SadConsole.Effects.EffectsManager.#ctor
  isExternal: true
  href: SadConsole.Effects.EffectsManager.html#SadConsole.Effects.EffectsManager.#ctor(SadConsole.ICellSurface)
  name: EffectsManager
  nameWithType: EffectsManager.EffectsManager
  fullName: SadConsole.Effects.EffectsManager.EffectsManager
  nameWithType.vb: EffectsManager.New
  fullName.vb: SadConsole.Effects.EffectsManager.New
  name.vb: New
- uid: SadConsole.Effects.EffectsManager.SetEffect*
  commentId: Overload:SadConsole.Effects.EffectsManager.SetEffect
  isExternal: true
  href: SadConsole.Effects.EffectsManager.html#SadConsole.Effects.EffectsManager.SetEffect(SadConsole.ColoredGlyphBase,SadConsole.Effects.ICellEffect)
  name: SetEffect
  nameWithType: EffectsManager.SetEffect
  fullName: SadConsole.Effects.EffectsManager.SetEffect
- uid: SadConsole.ColoredGlyphBase
  commentId: T:SadConsole.ColoredGlyphBase
  parent: SadConsole
  isExternal: true
  href: SadConsole.ColoredGlyphBase.html
  name: ColoredGlyphBase
  nameWithType: ColoredGlyphBase
  fullName: SadConsole.ColoredGlyphBase
- uid: SadConsole.Effects.ICellEffect
  commentId: T:SadConsole.Effects.ICellEffect
  parent: SadConsole.Effects
  isExternal: true
  href: SadConsole.Effects.ICellEffect.html
  name: ICellEffect
  nameWithType: ICellEffect
  fullName: SadConsole.Effects.ICellEffect
- uid: System.Collections.Generic.IEnumerable{SadConsole.ColoredGlyphBase}
  commentId: T:System.Collections.Generic.IEnumerable{SadConsole.ColoredGlyphBase}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<ColoredGlyphBase>
  nameWithType: IEnumerable<ColoredGlyphBase>
  fullName: System.Collections.Generic.IEnumerable<SadConsole.ColoredGlyphBase>
  nameWithType.vb: IEnumerable(Of ColoredGlyphBase)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SadConsole.ColoredGlyphBase)
  name.vb: IEnumerable(Of ColoredGlyphBase)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: SadConsole.ColoredGlyphBase
    name: ColoredGlyphBase
    isExternal: true
    href: SadConsole.ColoredGlyphBase.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: SadConsole.ColoredGlyphBase
    name: ColoredGlyphBase
    isExternal: true
    href: SadConsole.ColoredGlyphBase.html
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: SadConsole.Effects.EffectsManager.GetEffect*
  commentId: Overload:SadConsole.Effects.EffectsManager.GetEffect
  isExternal: true
  href: SadConsole.Effects.EffectsManager.html#SadConsole.Effects.EffectsManager.GetEffect(SadConsole.ColoredGlyphBase)
  name: GetEffect
  nameWithType: EffectsManager.GetEffect
  fullName: SadConsole.Effects.EffectsManager.GetEffect
- uid: SadConsole.Effects.EffectsManager.GetEffects*
  commentId: Overload:SadConsole.Effects.EffectsManager.GetEffects
  isExternal: true
  href: SadConsole.Effects.EffectsManager.html#SadConsole.Effects.EffectsManager.GetEffects
  name: GetEffects
  nameWithType: EffectsManager.GetEffects
  fullName: SadConsole.Effects.EffectsManager.GetEffects
- uid: System.Collections.Generic.IEnumerable{SadConsole.Effects.ICellEffect}
  commentId: T:System.Collections.Generic.IEnumerable{SadConsole.Effects.ICellEffect}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<ICellEffect>
  nameWithType: IEnumerable<ICellEffect>
  fullName: System.Collections.Generic.IEnumerable<SadConsole.Effects.ICellEffect>
  nameWithType.vb: IEnumerable(Of ICellEffect)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SadConsole.Effects.ICellEffect)
  name.vb: IEnumerable(Of ICellEffect)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: SadConsole.Effects.ICellEffect
    name: ICellEffect
    isExternal: true
    href: SadConsole.Effects.ICellEffect.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: SadConsole.Effects.ICellEffect
    name: ICellEffect
    isExternal: true
    href: SadConsole.Effects.ICellEffect.html
  - name: )
- uid: SadConsole.Effects.EffectsManager.DropInvalidCells*
  commentId: Overload:SadConsole.Effects.EffectsManager.DropInvalidCells
  isExternal: true
  href: SadConsole.Effects.EffectsManager.html#SadConsole.Effects.EffectsManager.DropInvalidCells
  name: DropInvalidCells
  nameWithType: EffectsManager.DropInvalidCells
  fullName: SadConsole.Effects.EffectsManager.DropInvalidCells
- uid: SadConsole.Effects.EffectsManager.Remove*
  commentId: Overload:SadConsole.Effects.EffectsManager.Remove
  isExternal: true
  href: SadConsole.Effects.EffectsManager.html#SadConsole.Effects.EffectsManager.Remove(SadConsole.Effects.ICellEffect)
  name: Remove
  nameWithType: EffectsManager.Remove
  fullName: SadConsole.Effects.EffectsManager.Remove
- uid: SadConsole.Effects.EffectsManager.RemoveAll*
  commentId: Overload:SadConsole.Effects.EffectsManager.RemoveAll
  isExternal: true
  href: SadConsole.Effects.EffectsManager.html#SadConsole.Effects.EffectsManager.RemoveAll
  name: RemoveAll
  nameWithType: EffectsManager.RemoveAll
  fullName: SadConsole.Effects.EffectsManager.RemoveAll
- uid: SadConsole.Effects.EffectsManager.GetKnownEffect*
  commentId: Overload:SadConsole.Effects.EffectsManager.GetKnownEffect
  isExternal: true
  href: SadConsole.Effects.EffectsManager.html#SadConsole.Effects.EffectsManager.GetKnownEffect(SadConsole.Effects.ICellEffect,SadConsole.Effects.EffectsManager.ColoredGlyphEffectData@)
  name: GetKnownEffect
  nameWithType: EffectsManager.GetKnownEffect
  fullName: SadConsole.Effects.EffectsManager.GetKnownEffect
- uid: SadConsole.Effects.EffectsManager.ColoredGlyphEffectData
  commentId: T:SadConsole.Effects.EffectsManager.ColoredGlyphEffectData
  parent: SadConsole.Effects
  isExternal: true
  href: SadConsole.Effects.EffectsManager.html
  name: EffectsManager.ColoredGlyphEffectData
  nameWithType: EffectsManager.ColoredGlyphEffectData
  fullName: SadConsole.Effects.EffectsManager.ColoredGlyphEffectData
  spec.csharp:
  - uid: SadConsole.Effects.EffectsManager
    name: EffectsManager
    isExternal: true
    href: SadConsole.Effects.EffectsManager.html
  - name: .
  - uid: SadConsole.Effects.EffectsManager.ColoredGlyphEffectData
    name: ColoredGlyphEffectData
    isExternal: true
    href: SadConsole.Effects.EffectsManager.ColoredGlyphEffectData.html
  spec.vb:
  - uid: SadConsole.Effects.EffectsManager
    name: EffectsManager
    isExternal: true
    href: SadConsole.Effects.EffectsManager.html
  - name: .
  - uid: SadConsole.Effects.EffectsManager.ColoredGlyphEffectData
    name: ColoredGlyphEffectData
    isExternal: true
    href: SadConsole.Effects.EffectsManager.ColoredGlyphEffectData.html
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: SadConsole.Effects.EffectsManager.ClearCellEffect*
  commentId: Overload:SadConsole.Effects.EffectsManager.ClearCellEffect
  isExternal: true
  href: SadConsole.Effects.EffectsManager.html#SadConsole.Effects.EffectsManager.ClearCellEffect(SadConsole.ColoredGlyphBase)
  name: ClearCellEffect
  nameWithType: EffectsManager.ClearCellEffect
  fullName: SadConsole.Effects.EffectsManager.ClearCellEffect
- uid: SadConsole.Effects.EffectsManager.UpdateEffects*
  commentId: Overload:SadConsole.Effects.EffectsManager.UpdateEffects
  isExternal: true
  href: SadConsole.Effects.EffectsManager.html#SadConsole.Effects.EffectsManager.UpdateEffects(System.TimeSpan)
  name: UpdateEffects
  nameWithType: EffectsManager.UpdateEffects
  fullName: SadConsole.Effects.EffectsManager.UpdateEffects
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: SadConsole.Effects.EffectsManager.Count*
  commentId: Overload:SadConsole.Effects.EffectsManager.Count
  isExternal: true
  href: SadConsole.Effects.EffectsManager.html#SadConsole.Effects.EffectsManager.Count
  name: Count
  nameWithType: EffectsManager.Count
  fullName: SadConsole.Effects.EffectsManager.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
